#include <xamarin/xamarin.h>
#include "registrar.h"
extern "C" {


@implementation Microsoft_Maui_MauiUIApplicationDelegate {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	typedef UIWindow * (*callback_396_Microsoft_Maui_MauiUIApplicationDelegate_get_Window_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(UIWindow *) window
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		UIWindow * rv = { 0 };
		static callback_396_Microsoft_Maui_MauiUIApplicationDelegate_get_Window_function callback_396_Microsoft_Maui_MauiUIApplicationDelegate_get_Window;
		xamarin_registrar_dlsym ((void **) &callback_396_Microsoft_Maui_MauiUIApplicationDelegate_get_Window, "Microsoft.Maui", "callback_396_Microsoft_Maui_MauiUIApplicationDelegate_get_Window", 15);
		rv = callback_396_Microsoft_Maui_MauiUIApplicationDelegate_get_Window (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef void (*callback_397_Microsoft_Maui_MauiUIApplicationDelegate_set_Window_function) (id self, SEL sel, UIWindow * p0, GCHandle* exception_gchandle);
	-(void) setWindow:(UIWindow *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_397_Microsoft_Maui_MauiUIApplicationDelegate_set_Window_function callback_397_Microsoft_Maui_MauiUIApplicationDelegate_set_Window;
		xamarin_registrar_dlsym ((void **) &callback_397_Microsoft_Maui_MauiUIApplicationDelegate_set_Window, "Microsoft.Maui", "callback_397_Microsoft_Maui_MauiUIApplicationDelegate_set_Window", 16);
		callback_397_Microsoft_Maui_MauiUIApplicationDelegate_set_Window (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef BOOL (*callback_382_Microsoft_Maui_MauiUIApplicationDelegate_WillFinishLaunching_function) (id self, SEL sel, UIApplication * p0, NSDictionary * p1, GCHandle* exception_gchandle);
	-(BOOL) application:(UIApplication *)p0 willFinishLaunchingWithOptions:(NSDictionary *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		BOOL rv = { 0 };
		static callback_382_Microsoft_Maui_MauiUIApplicationDelegate_WillFinishLaunching_function callback_382_Microsoft_Maui_MauiUIApplicationDelegate_WillFinishLaunching;
		xamarin_registrar_dlsym ((void **) &callback_382_Microsoft_Maui_MauiUIApplicationDelegate_WillFinishLaunching, "Microsoft.Maui", "callback_382_Microsoft_Maui_MauiUIApplicationDelegate_WillFinishLaunching", 1);
		rv = callback_382_Microsoft_Maui_MauiUIApplicationDelegate_WillFinishLaunching (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef BOOL (*callback_383_Microsoft_Maui_MauiUIApplicationDelegate_FinishedLaunching_function) (id self, SEL sel, UIApplication * p0, NSDictionary * p1, GCHandle* exception_gchandle);
	-(BOOL) application:(UIApplication *)p0 didFinishLaunchingWithOptions:(NSDictionary *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		BOOL rv = { 0 };
		static callback_383_Microsoft_Maui_MauiUIApplicationDelegate_FinishedLaunching_function callback_383_Microsoft_Maui_MauiUIApplicationDelegate_FinishedLaunching;
		xamarin_registrar_dlsym ((void **) &callback_383_Microsoft_Maui_MauiUIApplicationDelegate_FinishedLaunching, "Microsoft.Maui", "callback_383_Microsoft_Maui_MauiUIApplicationDelegate_FinishedLaunching", 2);
		rv = callback_383_Microsoft_Maui_MauiUIApplicationDelegate_FinishedLaunching (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef BOOL (*callback_384_Microsoft_Maui_MauiUIApplicationDelegate_RespondsToSelector_function) (id self, SEL sel, SEL p0, GCHandle* exception_gchandle);
	-(BOOL) respondsToSelector:(SEL)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		BOOL rv = { 0 };
		static callback_384_Microsoft_Maui_MauiUIApplicationDelegate_RespondsToSelector_function callback_384_Microsoft_Maui_MauiUIApplicationDelegate_RespondsToSelector;
		xamarin_registrar_dlsym ((void **) &callback_384_Microsoft_Maui_MauiUIApplicationDelegate_RespondsToSelector, "Microsoft.Maui", "callback_384_Microsoft_Maui_MauiUIApplicationDelegate_RespondsToSelector", 3);
		rv = callback_384_Microsoft_Maui_MauiUIApplicationDelegate_RespondsToSelector (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef UISceneConfiguration * (*callback_385_Microsoft_Maui_MauiUIApplicationDelegate_GetConfiguration_function) (id self, SEL sel, UIApplication * p0, UISceneSession * p1, UISceneConnectionOptions * p2, GCHandle* exception_gchandle);
	-(UISceneConfiguration *) application:(UIApplication *)p0 configurationForConnectingSceneSession:(UISceneSession *)p1 options:(UISceneConnectionOptions *)p2
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		UISceneConfiguration * rv = { 0 };
		static callback_385_Microsoft_Maui_MauiUIApplicationDelegate_GetConfiguration_function callback_385_Microsoft_Maui_MauiUIApplicationDelegate_GetConfiguration;
		xamarin_registrar_dlsym ((void **) &callback_385_Microsoft_Maui_MauiUIApplicationDelegate_GetConfiguration, "Microsoft.Maui", "callback_385_Microsoft_Maui_MauiUIApplicationDelegate_GetConfiguration", 4);
		rv = callback_385_Microsoft_Maui_MauiUIApplicationDelegate_GetConfiguration (self, _cmd, p0, p1, p2, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef void (*callback_386_Microsoft_Maui_MauiUIApplicationDelegate_PerformActionForShortcutItem_function) (id self, SEL sel, UIApplication * p0, UIApplicationShortcutItem * p1, void (^p2)(BOOL), GCHandle* exception_gchandle);
	-(void) application:(UIApplication *)p0 performActionForShortcutItem:(UIApplicationShortcutItem *)p1 completionHandler:(void (^)(BOOL))p2
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_386_Microsoft_Maui_MauiUIApplicationDelegate_PerformActionForShortcutItem_function callback_386_Microsoft_Maui_MauiUIApplicationDelegate_PerformActionForShortcutItem;
		xamarin_registrar_dlsym ((void **) &callback_386_Microsoft_Maui_MauiUIApplicationDelegate_PerformActionForShortcutItem, "Microsoft.Maui", "callback_386_Microsoft_Maui_MauiUIApplicationDelegate_PerformActionForShortcutItem", 5);
		callback_386_Microsoft_Maui_MauiUIApplicationDelegate_PerformActionForShortcutItem (self, _cmd, p0, p1, p2, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef BOOL (*callback_387_Microsoft_Maui_MauiUIApplicationDelegate_OpenUrl_function) (id self, SEL sel, UIApplication * p0, NSURL * p1, NSDictionary * p2, GCHandle* exception_gchandle);
	-(BOOL) application:(UIApplication *)p0 openURL:(NSURL *)p1 options:(NSDictionary *)p2
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		BOOL rv = { 0 };
		static callback_387_Microsoft_Maui_MauiUIApplicationDelegate_OpenUrl_function callback_387_Microsoft_Maui_MauiUIApplicationDelegate_OpenUrl;
		xamarin_registrar_dlsym ((void **) &callback_387_Microsoft_Maui_MauiUIApplicationDelegate_OpenUrl, "Microsoft.Maui", "callback_387_Microsoft_Maui_MauiUIApplicationDelegate_OpenUrl", 6);
		rv = callback_387_Microsoft_Maui_MauiUIApplicationDelegate_OpenUrl (self, _cmd, p0, p1, p2, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef BOOL (*callback_388_Microsoft_Maui_MauiUIApplicationDelegate_ContinueUserActivity_function) (id self, SEL sel, UIApplication * p0, NSUserActivity * p1, void (^p2)(id *), GCHandle* exception_gchandle);
	-(BOOL) application:(UIApplication *)p0 continueUserActivity:(NSUserActivity *)p1 restorationHandler:(void (^)(id *))p2
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		BOOL rv = { 0 };
		static callback_388_Microsoft_Maui_MauiUIApplicationDelegate_ContinueUserActivity_function callback_388_Microsoft_Maui_MauiUIApplicationDelegate_ContinueUserActivity;
		xamarin_registrar_dlsym ((void **) &callback_388_Microsoft_Maui_MauiUIApplicationDelegate_ContinueUserActivity, "Microsoft.Maui", "callback_388_Microsoft_Maui_MauiUIApplicationDelegate_ContinueUserActivity", 7);
		rv = callback_388_Microsoft_Maui_MauiUIApplicationDelegate_ContinueUserActivity (self, _cmd, p0, p1, p2, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef void (*callback_389_Microsoft_Maui_MauiUIApplicationDelegate_OnActivated_function) (id self, SEL sel, UIApplication * p0, GCHandle* exception_gchandle);
	-(void) applicationDidBecomeActive:(UIApplication *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_389_Microsoft_Maui_MauiUIApplicationDelegate_OnActivated_function callback_389_Microsoft_Maui_MauiUIApplicationDelegate_OnActivated;
		xamarin_registrar_dlsym ((void **) &callback_389_Microsoft_Maui_MauiUIApplicationDelegate_OnActivated, "Microsoft.Maui", "callback_389_Microsoft_Maui_MauiUIApplicationDelegate_OnActivated", 8);
		callback_389_Microsoft_Maui_MauiUIApplicationDelegate_OnActivated (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_390_Microsoft_Maui_MauiUIApplicationDelegate_OnResignActivation_function) (id self, SEL sel, UIApplication * p0, GCHandle* exception_gchandle);
	-(void) applicationWillResignActive:(UIApplication *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_390_Microsoft_Maui_MauiUIApplicationDelegate_OnResignActivation_function callback_390_Microsoft_Maui_MauiUIApplicationDelegate_OnResignActivation;
		xamarin_registrar_dlsym ((void **) &callback_390_Microsoft_Maui_MauiUIApplicationDelegate_OnResignActivation, "Microsoft.Maui", "callback_390_Microsoft_Maui_MauiUIApplicationDelegate_OnResignActivation", 9);
		callback_390_Microsoft_Maui_MauiUIApplicationDelegate_OnResignActivation (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_391_Microsoft_Maui_MauiUIApplicationDelegate_WillTerminate_function) (id self, SEL sel, UIApplication * p0, GCHandle* exception_gchandle);
	-(void) applicationWillTerminate:(UIApplication *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_391_Microsoft_Maui_MauiUIApplicationDelegate_WillTerminate_function callback_391_Microsoft_Maui_MauiUIApplicationDelegate_WillTerminate;
		xamarin_registrar_dlsym ((void **) &callback_391_Microsoft_Maui_MauiUIApplicationDelegate_WillTerminate, "Microsoft.Maui", "callback_391_Microsoft_Maui_MauiUIApplicationDelegate_WillTerminate", 10);
		callback_391_Microsoft_Maui_MauiUIApplicationDelegate_WillTerminate (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_392_Microsoft_Maui_MauiUIApplicationDelegate_DidEnterBackground_function) (id self, SEL sel, UIApplication * p0, GCHandle* exception_gchandle);
	-(void) applicationDidEnterBackground:(UIApplication *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_392_Microsoft_Maui_MauiUIApplicationDelegate_DidEnterBackground_function callback_392_Microsoft_Maui_MauiUIApplicationDelegate_DidEnterBackground;
		xamarin_registrar_dlsym ((void **) &callback_392_Microsoft_Maui_MauiUIApplicationDelegate_DidEnterBackground, "Microsoft.Maui", "callback_392_Microsoft_Maui_MauiUIApplicationDelegate_DidEnterBackground", 11);
		callback_392_Microsoft_Maui_MauiUIApplicationDelegate_DidEnterBackground (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_393_Microsoft_Maui_MauiUIApplicationDelegate_WillEnterForeground_function) (id self, SEL sel, UIApplication * p0, GCHandle* exception_gchandle);
	-(void) applicationWillEnterForeground:(UIApplication *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_393_Microsoft_Maui_MauiUIApplicationDelegate_WillEnterForeground_function callback_393_Microsoft_Maui_MauiUIApplicationDelegate_WillEnterForeground;
		xamarin_registrar_dlsym ((void **) &callback_393_Microsoft_Maui_MauiUIApplicationDelegate_WillEnterForeground, "Microsoft.Maui", "callback_393_Microsoft_Maui_MauiUIApplicationDelegate_WillEnterForeground", 12);
		callback_393_Microsoft_Maui_MauiUIApplicationDelegate_WillEnterForeground (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_394_Microsoft_Maui_MauiUIApplicationDelegate_ApplicationSignificantTimeChange_function) (id self, SEL sel, UIApplication * p0, GCHandle* exception_gchandle);
	-(void) applicationSignificantTimeChange:(UIApplication *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_394_Microsoft_Maui_MauiUIApplicationDelegate_ApplicationSignificantTimeChange_function callback_394_Microsoft_Maui_MauiUIApplicationDelegate_ApplicationSignificantTimeChange;
		xamarin_registrar_dlsym ((void **) &callback_394_Microsoft_Maui_MauiUIApplicationDelegate_ApplicationSignificantTimeChange, "Microsoft.Maui", "callback_394_Microsoft_Maui_MauiUIApplicationDelegate_ApplicationSignificantTimeChange", 13);
		callback_394_Microsoft_Maui_MauiUIApplicationDelegate_ApplicationSignificantTimeChange (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_395_Microsoft_Maui_MauiUIApplicationDelegate_PerformFetch_function) (id self, SEL sel, UIApplication * p0, void (^p1)(void *), GCHandle* exception_gchandle);
	-(void) application:(UIApplication *)p0 performFetchWithCompletionHandler:(void (^)(void *))p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_395_Microsoft_Maui_MauiUIApplicationDelegate_PerformFetch_function callback_395_Microsoft_Maui_MauiUIApplicationDelegate_PerformFetch;
		xamarin_registrar_dlsym ((void **) &callback_395_Microsoft_Maui_MauiUIApplicationDelegate_PerformFetch, "Microsoft.Maui", "callback_395_Microsoft_Maui_MauiUIApplicationDelegate_PerformFetch", 14);
		callback_395_Microsoft_Maui_MauiUIApplicationDelegate_PerformFetch (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_398_Microsoft_Maui_MauiUIApplicationDelegate_BuildMenu_function) (id self, SEL sel, id p0, GCHandle* exception_gchandle);
	-(void) buildMenuWithBuilder:(id)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_398_Microsoft_Maui_MauiUIApplicationDelegate_BuildMenu_function callback_398_Microsoft_Maui_MauiUIApplicationDelegate_BuildMenu;
		xamarin_registrar_dlsym ((void **) &callback_398_Microsoft_Maui_MauiUIApplicationDelegate_BuildMenu, "Microsoft.Maui", "callback_398_Microsoft_Maui_MauiUIApplicationDelegate_BuildMenu", 17);
		callback_398_Microsoft_Maui_MauiUIApplicationDelegate_BuildMenu (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef BOOL (*callback_399_Microsoft_Maui_MauiUIApplicationDelegate_CanPerform_function) (id self, SEL sel, SEL p0, NSObject * p1, GCHandle* exception_gchandle);
	-(BOOL) canPerformAction:(SEL)p0 withSender:(NSObject *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		BOOL rv = { 0 };
		static callback_399_Microsoft_Maui_MauiUIApplicationDelegate_CanPerform_function callback_399_Microsoft_Maui_MauiUIApplicationDelegate_CanPerform;
		xamarin_registrar_dlsym ((void **) &callback_399_Microsoft_Maui_MauiUIApplicationDelegate_CanPerform, "Microsoft.Maui", "callback_399_Microsoft_Maui_MauiUIApplicationDelegate_CanPerform", 18);
		rv = callback_399_Microsoft_Maui_MauiUIApplicationDelegate_CanPerform (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef void (*callback_400_Microsoft_Maui_MauiUIApplicationDelegate_MenuItemSelected_function) (id self, SEL sel, UICommand * p0, GCHandle* exception_gchandle);
	-(void) MenuItemSelected:(UICommand *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_400_Microsoft_Maui_MauiUIApplicationDelegate_MenuItemSelected_function callback_400_Microsoft_Maui_MauiUIApplicationDelegate_MenuItemSelected;
		xamarin_registrar_dlsym ((void **) &callback_400_Microsoft_Maui_MauiUIApplicationDelegate_MenuItemSelected, "Microsoft.Maui", "callback_400_Microsoft_Maui_MauiUIApplicationDelegate_MenuItemSelected", 19);
		callback_400_Microsoft_Maui_MauiUIApplicationDelegate_MenuItemSelected (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef id (*callback_381_Microsoft_Maui_MauiUIApplicationDelegate__ctor_function) (id self, SEL sel, bool* call_super, GCHandle* exception_gchandle);
	-(id) init
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_381_Microsoft_Maui_MauiUIApplicationDelegate__ctor_function callback_381_Microsoft_Maui_MauiUIApplicationDelegate__ctor;
		xamarin_registrar_dlsym ((void **) &callback_381_Microsoft_Maui_MauiUIApplicationDelegate__ctor, "Microsoft.Maui", "callback_381_Microsoft_Maui_MauiUIApplicationDelegate__ctor", 0);
		rv = callback_381_Microsoft_Maui_MauiUIApplicationDelegate__ctor (self, _cmd, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [UIResponder class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@implementation AppDelegate {
}

	typedef id (*callback_0_MiniProject_AppDelegate__ctor_function) (id self, SEL sel, bool* call_super, GCHandle* exception_gchandle);
	-(id) init
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_0_MiniProject_AppDelegate__ctor_function callback_0_MiniProject_AppDelegate__ctor;
		xamarin_registrar_dlsym ((void **) &callback_0_MiniProject_AppDelegate__ctor, "MiniProject", "callback_0_MiniProject_AppDelegate__ctor", 0);
		rv = callback_0_MiniProject_AppDelegate__ctor (self, _cmd, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [Microsoft_Maui_MauiUIApplicationDelegate class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@interface Microsoft_Maui_Controls_Compatibility_Platform_iOS_GlobalCloseContextGestureRecognizer : UIGestureRecognizer {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(void) touchesBegan:(NSSet *)p0 withEvent:(UIEvent *)p1;
	-(void) touchesEnded:(NSSet *)p0 withEvent:(UIEvent *)p1;
	-(void) touchesMoved:(NSSet *)p0 withEvent:(UIEvent *)p1;
	-(BOOL) conformsToProtocol:(void *)p0;
@end

@implementation Microsoft_Maui_Controls_Compatibility_Platform_iOS_GlobalCloseContextGestureRecognizer {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	typedef void (*callback_5_Microsoft_Maui_Controls_Compatibility_Platform_iOS_GlobalCloseContextGestureRecognizer_TouchesBegan_function) (id self, SEL sel, NSSet * p0, UIEvent * p1, GCHandle* exception_gchandle);
	-(void) touchesBegan:(NSSet *)p0 withEvent:(UIEvent *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_5_Microsoft_Maui_Controls_Compatibility_Platform_iOS_GlobalCloseContextGestureRecognizer_TouchesBegan_function callback_5_Microsoft_Maui_Controls_Compatibility_Platform_iOS_GlobalCloseContextGestureRecognizer_TouchesBegan;
		xamarin_registrar_dlsym ((void **) &callback_5_Microsoft_Maui_Controls_Compatibility_Platform_iOS_GlobalCloseContextGestureRecognizer_TouchesBegan, "Microsoft.Maui.Controls", "callback_5_Microsoft_Maui_Controls_Compatibility_Platform_iOS_GlobalCloseContextGestureRecognizer_TouchesBegan", 4);
		callback_5_Microsoft_Maui_Controls_Compatibility_Platform_iOS_GlobalCloseContextGestureRecognizer_TouchesBegan (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_6_Microsoft_Maui_Controls_Compatibility_Platform_iOS_GlobalCloseContextGestureRecognizer_TouchesEnded_function) (id self, SEL sel, NSSet * p0, UIEvent * p1, GCHandle* exception_gchandle);
	-(void) touchesEnded:(NSSet *)p0 withEvent:(UIEvent *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_6_Microsoft_Maui_Controls_Compatibility_Platform_iOS_GlobalCloseContextGestureRecognizer_TouchesEnded_function callback_6_Microsoft_Maui_Controls_Compatibility_Platform_iOS_GlobalCloseContextGestureRecognizer_TouchesEnded;
		xamarin_registrar_dlsym ((void **) &callback_6_Microsoft_Maui_Controls_Compatibility_Platform_iOS_GlobalCloseContextGestureRecognizer_TouchesEnded, "Microsoft.Maui.Controls", "callback_6_Microsoft_Maui_Controls_Compatibility_Platform_iOS_GlobalCloseContextGestureRecognizer_TouchesEnded", 5);
		callback_6_Microsoft_Maui_Controls_Compatibility_Platform_iOS_GlobalCloseContextGestureRecognizer_TouchesEnded (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_7_Microsoft_Maui_Controls_Compatibility_Platform_iOS_GlobalCloseContextGestureRecognizer_TouchesMoved_function) (id self, SEL sel, NSSet * p0, UIEvent * p1, GCHandle* exception_gchandle);
	-(void) touchesMoved:(NSSet *)p0 withEvent:(UIEvent *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_7_Microsoft_Maui_Controls_Compatibility_Platform_iOS_GlobalCloseContextGestureRecognizer_TouchesMoved_function callback_7_Microsoft_Maui_Controls_Compatibility_Platform_iOS_GlobalCloseContextGestureRecognizer_TouchesMoved;
		xamarin_registrar_dlsym ((void **) &callback_7_Microsoft_Maui_Controls_Compatibility_Platform_iOS_GlobalCloseContextGestureRecognizer_TouchesMoved, "Microsoft.Maui.Controls", "callback_7_Microsoft_Maui_Controls_Compatibility_Platform_iOS_GlobalCloseContextGestureRecognizer_TouchesMoved", 6);
		callback_7_Microsoft_Maui_Controls_Compatibility_Platform_iOS_GlobalCloseContextGestureRecognizer_TouchesMoved (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
@end

@interface Microsoft_Maui_Controls_Compatibility_Platform_iOS_NativeViewPropertyListener : NSObject {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(void) observeValueForKeyPath:(NSString *)p0 ofObject:(NSObject *)p1 change:(NSDictionary *)p2 context:(void *)p3;
	-(BOOL) conformsToProtocol:(void *)p0;
@end

@implementation Microsoft_Maui_Controls_Compatibility_Platform_iOS_NativeViewPropertyListener {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	typedef void (*callback_8_Microsoft_Maui_Controls_Compatibility_Platform_iOS_NativeViewPropertyListener_ObserveValue_function) (id self, SEL sel, NSString * p0, NSObject * p1, NSDictionary * p2, void * p3, GCHandle* exception_gchandle);
	-(void) observeValueForKeyPath:(NSString *)p0 ofObject:(NSObject *)p1 change:(NSDictionary *)p2 context:(void *)p3
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_8_Microsoft_Maui_Controls_Compatibility_Platform_iOS_NativeViewPropertyListener_ObserveValue_function callback_8_Microsoft_Maui_Controls_Compatibility_Platform_iOS_NativeViewPropertyListener_ObserveValue;
		xamarin_registrar_dlsym ((void **) &callback_8_Microsoft_Maui_Controls_Compatibility_Platform_iOS_NativeViewPropertyListener_ObserveValue, "Microsoft.Maui.Controls", "callback_8_Microsoft_Maui_Controls_Compatibility_Platform_iOS_NativeViewPropertyListener_ObserveValue", 7);
		callback_8_Microsoft_Maui_Controls_Compatibility_Platform_iOS_NativeViewPropertyListener_ObserveValue (self, _cmd, p0, p1, p2, p3, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
@end

@interface Microsoft_Maui_Platform_ModalWrapper : UIViewController {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(BOOL) conformsToProtocol:(void *)p0;
	-(id) init;
@end

@implementation Microsoft_Maui_Platform_ModalWrapper {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}

	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef id (*callback_520_Microsoft_Maui_Platform_ModalWrapper__ctor_function) (id self, SEL sel, bool* call_super, GCHandle* exception_gchandle);
	-(id) init
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_520_Microsoft_Maui_Platform_ModalWrapper__ctor_function callback_520_Microsoft_Maui_Platform_ModalWrapper__ctor;
		xamarin_registrar_dlsym ((void **) &callback_520_Microsoft_Maui_Platform_ModalWrapper__ctor, "Microsoft.Maui", "callback_520_Microsoft_Maui_Platform_ModalWrapper__ctor", 139);
		rv = callback_520_Microsoft_Maui_Platform_ModalWrapper__ctor (self, _cmd, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [UIViewController class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@interface Microsoft_Maui_Controls_Platform_ControlsModalWrapper : Microsoft_Maui_Platform_ModalWrapper<UIAdaptivePresentationControllerDelegate> {
}
	-(void) presentationControllerDidDismiss:(UIPresentationController *)p0;
	-(void) dismissViewControllerAnimated:(BOOL)p0 completion:(void (^)())p1;
	-(NSUInteger) supportedInterfaceOrientations;
	-(NSInteger) preferredInterfaceOrientationForPresentation;
	-(BOOL) shouldAutorotate;
	-(BOOL) shouldAutorotateToInterfaceOrientation:(NSInteger)p0;
	-(BOOL) shouldAutomaticallyForwardRotationMethods;
	-(void) viewDidLayoutSubviews;
	-(void) viewWillAppear:(BOOL)p0;
	-(void) viewDidLoad;
	-(UIViewController *) childViewControllerForStatusBarStyle;
@end

@implementation Microsoft_Maui_Controls_Platform_ControlsModalWrapper {
}

	typedef void (*callback_10_Microsoft_Maui_Controls_Platform_ControlsModalWrapper_DidDismiss_function) (id self, SEL sel, UIPresentationController * p0, GCHandle* exception_gchandle);
	-(void) presentationControllerDidDismiss:(UIPresentationController *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_10_Microsoft_Maui_Controls_Platform_ControlsModalWrapper_DidDismiss_function callback_10_Microsoft_Maui_Controls_Platform_ControlsModalWrapper_DidDismiss;
		xamarin_registrar_dlsym ((void **) &callback_10_Microsoft_Maui_Controls_Platform_ControlsModalWrapper_DidDismiss, "Microsoft.Maui.Controls", "callback_10_Microsoft_Maui_Controls_Platform_ControlsModalWrapper_DidDismiss", 9);
		callback_10_Microsoft_Maui_Controls_Platform_ControlsModalWrapper_DidDismiss (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_11_Microsoft_Maui_Controls_Platform_ControlsModalWrapper_DismissViewController_function) (id self, SEL sel, BOOL p0, void (^p1)(), GCHandle* exception_gchandle);
	-(void) dismissViewControllerAnimated:(BOOL)p0 completion:(void (^)())p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_11_Microsoft_Maui_Controls_Platform_ControlsModalWrapper_DismissViewController_function callback_11_Microsoft_Maui_Controls_Platform_ControlsModalWrapper_DismissViewController;
		xamarin_registrar_dlsym ((void **) &callback_11_Microsoft_Maui_Controls_Platform_ControlsModalWrapper_DismissViewController, "Microsoft.Maui.Controls", "callback_11_Microsoft_Maui_Controls_Platform_ControlsModalWrapper_DismissViewController", 10);
		callback_11_Microsoft_Maui_Controls_Platform_ControlsModalWrapper_DismissViewController (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef NSUInteger (*callback_12_Microsoft_Maui_Controls_Platform_ControlsModalWrapper_GetSupportedInterfaceOrientations_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(NSUInteger) supportedInterfaceOrientations
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		NSUInteger rv = { 0 };
		static callback_12_Microsoft_Maui_Controls_Platform_ControlsModalWrapper_GetSupportedInterfaceOrientations_function callback_12_Microsoft_Maui_Controls_Platform_ControlsModalWrapper_GetSupportedInterfaceOrientations;
		xamarin_registrar_dlsym ((void **) &callback_12_Microsoft_Maui_Controls_Platform_ControlsModalWrapper_GetSupportedInterfaceOrientations, "Microsoft.Maui.Controls", "callback_12_Microsoft_Maui_Controls_Platform_ControlsModalWrapper_GetSupportedInterfaceOrientations", 11);
		rv = callback_12_Microsoft_Maui_Controls_Platform_ControlsModalWrapper_GetSupportedInterfaceOrientations (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef NSInteger (*callback_13_Microsoft_Maui_Controls_Platform_ControlsModalWrapper_PreferredInterfaceOrientationForPresentation_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(NSInteger) preferredInterfaceOrientationForPresentation
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		NSInteger rv = { 0 };
		static callback_13_Microsoft_Maui_Controls_Platform_ControlsModalWrapper_PreferredInterfaceOrientationForPresentation_function callback_13_Microsoft_Maui_Controls_Platform_ControlsModalWrapper_PreferredInterfaceOrientationForPresentation;
		xamarin_registrar_dlsym ((void **) &callback_13_Microsoft_Maui_Controls_Platform_ControlsModalWrapper_PreferredInterfaceOrientationForPresentation, "Microsoft.Maui.Controls", "callback_13_Microsoft_Maui_Controls_Platform_ControlsModalWrapper_PreferredInterfaceOrientationForPresentation", 12);
		rv = callback_13_Microsoft_Maui_Controls_Platform_ControlsModalWrapper_PreferredInterfaceOrientationForPresentation (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef BOOL (*callback_14_Microsoft_Maui_Controls_Platform_ControlsModalWrapper_ShouldAutorotate_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(BOOL) shouldAutorotate
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		BOOL rv = { 0 };
		static callback_14_Microsoft_Maui_Controls_Platform_ControlsModalWrapper_ShouldAutorotate_function callback_14_Microsoft_Maui_Controls_Platform_ControlsModalWrapper_ShouldAutorotate;
		xamarin_registrar_dlsym ((void **) &callback_14_Microsoft_Maui_Controls_Platform_ControlsModalWrapper_ShouldAutorotate, "Microsoft.Maui.Controls", "callback_14_Microsoft_Maui_Controls_Platform_ControlsModalWrapper_ShouldAutorotate", 13);
		rv = callback_14_Microsoft_Maui_Controls_Platform_ControlsModalWrapper_ShouldAutorotate (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef BOOL (*callback_15_Microsoft_Maui_Controls_Platform_ControlsModalWrapper_ShouldAutorotateToInterfaceOrientation_function) (id self, SEL sel, NSInteger p0, GCHandle* exception_gchandle);
	-(BOOL) shouldAutorotateToInterfaceOrientation:(NSInteger)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		BOOL rv = { 0 };
		static callback_15_Microsoft_Maui_Controls_Platform_ControlsModalWrapper_ShouldAutorotateToInterfaceOrientation_function callback_15_Microsoft_Maui_Controls_Platform_ControlsModalWrapper_ShouldAutorotateToInterfaceOrientation;
		xamarin_registrar_dlsym ((void **) &callback_15_Microsoft_Maui_Controls_Platform_ControlsModalWrapper_ShouldAutorotateToInterfaceOrientation, "Microsoft.Maui.Controls", "callback_15_Microsoft_Maui_Controls_Platform_ControlsModalWrapper_ShouldAutorotateToInterfaceOrientation", 14);
		rv = callback_15_Microsoft_Maui_Controls_Platform_ControlsModalWrapper_ShouldAutorotateToInterfaceOrientation (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef BOOL (*callback_16_Microsoft_Maui_Controls_Platform_ControlsModalWrapper_get_ShouldAutomaticallyForwardRotationMethods_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(BOOL) shouldAutomaticallyForwardRotationMethods
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		BOOL rv = { 0 };
		static callback_16_Microsoft_Maui_Controls_Platform_ControlsModalWrapper_get_ShouldAutomaticallyForwardRotationMethods_function callback_16_Microsoft_Maui_Controls_Platform_ControlsModalWrapper_get_ShouldAutomaticallyForwardRotationMethods;
		xamarin_registrar_dlsym ((void **) &callback_16_Microsoft_Maui_Controls_Platform_ControlsModalWrapper_get_ShouldAutomaticallyForwardRotationMethods, "Microsoft.Maui.Controls", "callback_16_Microsoft_Maui_Controls_Platform_ControlsModalWrapper_get_ShouldAutomaticallyForwardRotationMethods", 15);
		rv = callback_16_Microsoft_Maui_Controls_Platform_ControlsModalWrapper_get_ShouldAutomaticallyForwardRotationMethods (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef void (*callback_17_Microsoft_Maui_Controls_Platform_ControlsModalWrapper_ViewDidLayoutSubviews_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) viewDidLayoutSubviews
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_17_Microsoft_Maui_Controls_Platform_ControlsModalWrapper_ViewDidLayoutSubviews_function callback_17_Microsoft_Maui_Controls_Platform_ControlsModalWrapper_ViewDidLayoutSubviews;
		xamarin_registrar_dlsym ((void **) &callback_17_Microsoft_Maui_Controls_Platform_ControlsModalWrapper_ViewDidLayoutSubviews, "Microsoft.Maui.Controls", "callback_17_Microsoft_Maui_Controls_Platform_ControlsModalWrapper_ViewDidLayoutSubviews", 16);
		callback_17_Microsoft_Maui_Controls_Platform_ControlsModalWrapper_ViewDidLayoutSubviews (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_18_Microsoft_Maui_Controls_Platform_ControlsModalWrapper_ViewWillAppear_function) (id self, SEL sel, BOOL p0, GCHandle* exception_gchandle);
	-(void) viewWillAppear:(BOOL)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_18_Microsoft_Maui_Controls_Platform_ControlsModalWrapper_ViewWillAppear_function callback_18_Microsoft_Maui_Controls_Platform_ControlsModalWrapper_ViewWillAppear;
		xamarin_registrar_dlsym ((void **) &callback_18_Microsoft_Maui_Controls_Platform_ControlsModalWrapper_ViewWillAppear, "Microsoft.Maui.Controls", "callback_18_Microsoft_Maui_Controls_Platform_ControlsModalWrapper_ViewWillAppear", 17);
		callback_18_Microsoft_Maui_Controls_Platform_ControlsModalWrapper_ViewWillAppear (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_19_Microsoft_Maui_Controls_Platform_ControlsModalWrapper_ViewDidLoad_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) viewDidLoad
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_19_Microsoft_Maui_Controls_Platform_ControlsModalWrapper_ViewDidLoad_function callback_19_Microsoft_Maui_Controls_Platform_ControlsModalWrapper_ViewDidLoad;
		xamarin_registrar_dlsym ((void **) &callback_19_Microsoft_Maui_Controls_Platform_ControlsModalWrapper_ViewDidLoad, "Microsoft.Maui.Controls", "callback_19_Microsoft_Maui_Controls_Platform_ControlsModalWrapper_ViewDidLoad", 18);
		callback_19_Microsoft_Maui_Controls_Platform_ControlsModalWrapper_ViewDidLoad (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef UIViewController * (*callback_20_Microsoft_Maui_Controls_Platform_ControlsModalWrapper_ChildViewControllerForStatusBarStyle_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(UIViewController *) childViewControllerForStatusBarStyle
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		UIViewController * rv = { 0 };
		static callback_20_Microsoft_Maui_Controls_Platform_ControlsModalWrapper_ChildViewControllerForStatusBarStyle_function callback_20_Microsoft_Maui_Controls_Platform_ControlsModalWrapper_ChildViewControllerForStatusBarStyle;
		xamarin_registrar_dlsym ((void **) &callback_20_Microsoft_Maui_Controls_Platform_ControlsModalWrapper_ChildViewControllerForStatusBarStyle, "Microsoft.Maui.Controls", "callback_20_Microsoft_Maui_Controls_Platform_ControlsModalWrapper_ChildViewControllerForStatusBarStyle", 19);
		rv = callback_20_Microsoft_Maui_Controls_Platform_ControlsModalWrapper_ChildViewControllerForStatusBarStyle (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
@end

@implementation Microsoft_Maui_Controls_Platform_Compatibility_UIContainerView {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	typedef CGSize (*callback_117_Microsoft_Maui_Controls_Platform_Compatibility_UIContainerView_SizeThatFits_function) (id self, SEL sel, CGSize p0, GCHandle* exception_gchandle);
	-(CGSize) sizeThatFits:(CGSize)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		CGSize rv = { 0 };
		static callback_117_Microsoft_Maui_Controls_Platform_Compatibility_UIContainerView_SizeThatFits_function callback_117_Microsoft_Maui_Controls_Platform_Compatibility_UIContainerView_SizeThatFits;
		xamarin_registrar_dlsym ((void **) &callback_117_Microsoft_Maui_Controls_Platform_Compatibility_UIContainerView_SizeThatFits, "Microsoft.Maui.Controls", "callback_117_Microsoft_Maui_Controls_Platform_Compatibility_UIContainerView_SizeThatFits", 116);
		rv = callback_117_Microsoft_Maui_Controls_Platform_Compatibility_UIContainerView_SizeThatFits (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef void (*callback_118_Microsoft_Maui_Controls_Platform_Compatibility_UIContainerView_WillRemoveSubview_function) (id self, SEL sel, UIView * p0, GCHandle* exception_gchandle);
	-(void) willRemoveSubview:(UIView *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_118_Microsoft_Maui_Controls_Platform_Compatibility_UIContainerView_WillRemoveSubview_function callback_118_Microsoft_Maui_Controls_Platform_Compatibility_UIContainerView_WillRemoveSubview;
		xamarin_registrar_dlsym ((void **) &callback_118_Microsoft_Maui_Controls_Platform_Compatibility_UIContainerView_WillRemoveSubview, "Microsoft.Maui.Controls", "callback_118_Microsoft_Maui_Controls_Platform_Compatibility_UIContainerView_WillRemoveSubview", 117);
		callback_118_Microsoft_Maui_Controls_Platform_Compatibility_UIContainerView_WillRemoveSubview (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_119_Microsoft_Maui_Controls_Platform_Compatibility_UIContainerView_AddSubview_function) (id self, SEL sel, UIView * p0, GCHandle* exception_gchandle);
	-(void) addSubview:(UIView *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_119_Microsoft_Maui_Controls_Platform_Compatibility_UIContainerView_AddSubview_function callback_119_Microsoft_Maui_Controls_Platform_Compatibility_UIContainerView_AddSubview;
		xamarin_registrar_dlsym ((void **) &callback_119_Microsoft_Maui_Controls_Platform_Compatibility_UIContainerView_AddSubview, "Microsoft.Maui.Controls", "callback_119_Microsoft_Maui_Controls_Platform_Compatibility_UIContainerView_AddSubview", 118);
		callback_119_Microsoft_Maui_Controls_Platform_Compatibility_UIContainerView_AddSubview (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_120_Microsoft_Maui_Controls_Platform_Compatibility_UIContainerView_LayoutSubviews_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) layoutSubviews
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_120_Microsoft_Maui_Controls_Platform_Compatibility_UIContainerView_LayoutSubviews_function callback_120_Microsoft_Maui_Controls_Platform_Compatibility_UIContainerView_LayoutSubviews;
		xamarin_registrar_dlsym ((void **) &callback_120_Microsoft_Maui_Controls_Platform_Compatibility_UIContainerView_LayoutSubviews, "Microsoft.Maui.Controls", "callback_120_Microsoft_Maui_Controls_Platform_Compatibility_UIContainerView_LayoutSubviews", 119);
		callback_120_Microsoft_Maui_Controls_Platform_Compatibility_UIContainerView_LayoutSubviews (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
@end

@interface Microsoft_Maui_Controls_Platform_Compatibility_ShellFlyoutHeaderContainer : Microsoft_Maui_Controls_Platform_Compatibility_UIContainerView {
}
	-(void) layoutSubviews;
	-(void) safeAreaInsetsDidChange;
@end

@implementation Microsoft_Maui_Controls_Platform_Compatibility_ShellFlyoutHeaderContainer {
}

	typedef void (*callback_40_Microsoft_Maui_Controls_Platform_Compatibility_ShellFlyoutHeaderContainer_LayoutSubviews_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) layoutSubviews
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_40_Microsoft_Maui_Controls_Platform_Compatibility_ShellFlyoutHeaderContainer_LayoutSubviews_function callback_40_Microsoft_Maui_Controls_Platform_Compatibility_ShellFlyoutHeaderContainer_LayoutSubviews;
		xamarin_registrar_dlsym ((void **) &callback_40_Microsoft_Maui_Controls_Platform_Compatibility_ShellFlyoutHeaderContainer_LayoutSubviews, "Microsoft.Maui.Controls", "callback_40_Microsoft_Maui_Controls_Platform_Compatibility_ShellFlyoutHeaderContainer_LayoutSubviews", 39);
		callback_40_Microsoft_Maui_Controls_Platform_Compatibility_ShellFlyoutHeaderContainer_LayoutSubviews (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_41_Microsoft_Maui_Controls_Platform_Compatibility_ShellFlyoutHeaderContainer_SafeAreaInsetsDidChange_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) safeAreaInsetsDidChange
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_41_Microsoft_Maui_Controls_Platform_Compatibility_ShellFlyoutHeaderContainer_SafeAreaInsetsDidChange_function callback_41_Microsoft_Maui_Controls_Platform_Compatibility_ShellFlyoutHeaderContainer_SafeAreaInsetsDidChange;
		xamarin_registrar_dlsym ((void **) &callback_41_Microsoft_Maui_Controls_Platform_Compatibility_ShellFlyoutHeaderContainer_SafeAreaInsetsDidChange, "Microsoft.Maui.Controls", "callback_41_Microsoft_Maui_Controls_Platform_Compatibility_ShellFlyoutHeaderContainer_SafeAreaInsetsDidChange", 40);
		callback_41_Microsoft_Maui_Controls_Platform_Compatibility_ShellFlyoutHeaderContainer_SafeAreaInsetsDidChange (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}
@end

@implementation Microsoft_Maui_Controls_Platform_Compatibility_ShellItemRenderer {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	typedef UIViewController * (*callback_49_Microsoft_Maui_Controls_Platform_Compatibility_ShellItemRenderer_get_SelectedViewController_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(UIViewController *) selectedViewController
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		UIViewController * rv = { 0 };
		static callback_49_Microsoft_Maui_Controls_Platform_Compatibility_ShellItemRenderer_get_SelectedViewController_function callback_49_Microsoft_Maui_Controls_Platform_Compatibility_ShellItemRenderer_get_SelectedViewController;
		xamarin_registrar_dlsym ((void **) &callback_49_Microsoft_Maui_Controls_Platform_Compatibility_ShellItemRenderer_get_SelectedViewController, "Microsoft.Maui.Controls", "callback_49_Microsoft_Maui_Controls_Platform_Compatibility_ShellItemRenderer_get_SelectedViewController", 48);
		rv = callback_49_Microsoft_Maui_Controls_Platform_Compatibility_ShellItemRenderer_get_SelectedViewController (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef void (*callback_50_Microsoft_Maui_Controls_Platform_Compatibility_ShellItemRenderer_set_SelectedViewController_function) (id self, SEL sel, UIViewController * p0, GCHandle* exception_gchandle);
	-(void) setSelectedViewController:(UIViewController *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_50_Microsoft_Maui_Controls_Platform_Compatibility_ShellItemRenderer_set_SelectedViewController_function callback_50_Microsoft_Maui_Controls_Platform_Compatibility_ShellItemRenderer_set_SelectedViewController;
		xamarin_registrar_dlsym ((void **) &callback_50_Microsoft_Maui_Controls_Platform_Compatibility_ShellItemRenderer_set_SelectedViewController, "Microsoft.Maui.Controls", "callback_50_Microsoft_Maui_Controls_Platform_Compatibility_ShellItemRenderer_set_SelectedViewController", 49);
		callback_50_Microsoft_Maui_Controls_Platform_Compatibility_ShellItemRenderer_set_SelectedViewController (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_51_Microsoft_Maui_Controls_Platform_Compatibility_ShellItemRenderer_DidShowViewController_function) (id self, SEL sel, UINavigationController * p0, UIViewController * p1, BOOL p2, GCHandle* exception_gchandle);
	-(void) navigationController:(UINavigationController *)p0 didShowViewController:(UIViewController *)p1 animated:(BOOL)p2
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_51_Microsoft_Maui_Controls_Platform_Compatibility_ShellItemRenderer_DidShowViewController_function callback_51_Microsoft_Maui_Controls_Platform_Compatibility_ShellItemRenderer_DidShowViewController;
		xamarin_registrar_dlsym ((void **) &callback_51_Microsoft_Maui_Controls_Platform_Compatibility_ShellItemRenderer_DidShowViewController, "Microsoft.Maui.Controls", "callback_51_Microsoft_Maui_Controls_Platform_Compatibility_ShellItemRenderer_DidShowViewController", 50);
		callback_51_Microsoft_Maui_Controls_Platform_Compatibility_ShellItemRenderer_DidShowViewController (self, _cmd, p0, p1, p2, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_52_Microsoft_Maui_Controls_Platform_Compatibility_ShellItemRenderer_ViewDidLayoutSubviews_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) viewDidLayoutSubviews
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_52_Microsoft_Maui_Controls_Platform_Compatibility_ShellItemRenderer_ViewDidLayoutSubviews_function callback_52_Microsoft_Maui_Controls_Platform_Compatibility_ShellItemRenderer_ViewDidLayoutSubviews;
		xamarin_registrar_dlsym ((void **) &callback_52_Microsoft_Maui_Controls_Platform_Compatibility_ShellItemRenderer_ViewDidLayoutSubviews, "Microsoft.Maui.Controls", "callback_52_Microsoft_Maui_Controls_Platform_Compatibility_ShellItemRenderer_ViewDidLayoutSubviews", 51);
		callback_52_Microsoft_Maui_Controls_Platform_Compatibility_ShellItemRenderer_ViewDidLayoutSubviews (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_53_Microsoft_Maui_Controls_Platform_Compatibility_ShellItemRenderer_ViewDidLoad_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) viewDidLoad
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_53_Microsoft_Maui_Controls_Platform_Compatibility_ShellItemRenderer_ViewDidLoad_function callback_53_Microsoft_Maui_Controls_Platform_Compatibility_ShellItemRenderer_ViewDidLoad;
		xamarin_registrar_dlsym ((void **) &callback_53_Microsoft_Maui_Controls_Platform_Compatibility_ShellItemRenderer_ViewDidLoad, "Microsoft.Maui.Controls", "callback_53_Microsoft_Maui_Controls_Platform_Compatibility_ShellItemRenderer_ViewDidLoad", 52);
		callback_53_Microsoft_Maui_Controls_Platform_Compatibility_ShellItemRenderer_ViewDidLoad (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_54_Microsoft_Maui_Controls_Platform_Compatibility_ShellItemRenderer_ViewWillLayoutSubviews_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) viewWillLayoutSubviews
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_54_Microsoft_Maui_Controls_Platform_Compatibility_ShellItemRenderer_ViewWillLayoutSubviews_function callback_54_Microsoft_Maui_Controls_Platform_Compatibility_ShellItemRenderer_ViewWillLayoutSubviews;
		xamarin_registrar_dlsym ((void **) &callback_54_Microsoft_Maui_Controls_Platform_Compatibility_ShellItemRenderer_ViewWillLayoutSubviews, "Microsoft.Maui.Controls", "callback_54_Microsoft_Maui_Controls_Platform_Compatibility_ShellItemRenderer_ViewWillLayoutSubviews", 53);
		callback_54_Microsoft_Maui_Controls_Platform_Compatibility_ShellItemRenderer_ViewWillLayoutSubviews (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
@end

@implementation Microsoft_Maui_Controls_Platform_Compatibility_ShellTableViewController {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	typedef void (*callback_103_Microsoft_Maui_Controls_Platform_Compatibility_ShellTableViewController_ViewDidLoad_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) viewDidLoad
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_103_Microsoft_Maui_Controls_Platform_Compatibility_ShellTableViewController_ViewDidLoad_function callback_103_Microsoft_Maui_Controls_Platform_Compatibility_ShellTableViewController_ViewDidLoad;
		xamarin_registrar_dlsym ((void **) &callback_103_Microsoft_Maui_Controls_Platform_Compatibility_ShellTableViewController_ViewDidLoad, "Microsoft.Maui.Controls", "callback_103_Microsoft_Maui_Controls_Platform_Compatibility_ShellTableViewController_ViewDidLoad", 102);
		callback_103_Microsoft_Maui_Controls_Platform_Compatibility_ShellTableViewController_ViewDidLoad (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_104_Microsoft_Maui_Controls_Platform_Compatibility_ShellTableViewController_ViewSafeAreaInsetsDidChange_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) viewSafeAreaInsetsDidChange
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_104_Microsoft_Maui_Controls_Platform_Compatibility_ShellTableViewController_ViewSafeAreaInsetsDidChange_function callback_104_Microsoft_Maui_Controls_Platform_Compatibility_ShellTableViewController_ViewSafeAreaInsetsDidChange;
		xamarin_registrar_dlsym ((void **) &callback_104_Microsoft_Maui_Controls_Platform_Compatibility_ShellTableViewController_ViewSafeAreaInsetsDidChange, "Microsoft.Maui.Controls", "callback_104_Microsoft_Maui_Controls_Platform_Compatibility_ShellTableViewController_ViewSafeAreaInsetsDidChange", 103);
		callback_104_Microsoft_Maui_Controls_Platform_Compatibility_ShellTableViewController_ViewSafeAreaInsetsDidChange (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
@end

@implementation Microsoft_Maui_Controls_Platform_Compatibility_UIContainerCell {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	typedef void (*callback_116_Microsoft_Maui_Controls_Platform_Compatibility_UIContainerCell_LayoutSubviews_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) layoutSubviews
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_116_Microsoft_Maui_Controls_Platform_Compatibility_UIContainerCell_LayoutSubviews_function callback_116_Microsoft_Maui_Controls_Platform_Compatibility_UIContainerCell_LayoutSubviews;
		xamarin_registrar_dlsym ((void **) &callback_116_Microsoft_Maui_Controls_Platform_Compatibility_UIContainerCell_LayoutSubviews, "Microsoft.Maui.Controls", "callback_116_Microsoft_Maui_Controls_Platform_Compatibility_UIContainerCell_LayoutSubviews", 115);
		callback_116_Microsoft_Maui_Controls_Platform_Compatibility_UIContainerCell_LayoutSubviews (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
@end

@implementation Microsoft_Maui_Controls_Handlers_Items_ItemsViewCell {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}

	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef id (*callback_150_Microsoft_Maui_Controls_Handlers_Items_ItemsViewCell__ctor_function) (id self, SEL sel, CGRect p0, bool* call_super, GCHandle* exception_gchandle);
	-(id) initWithFrame:(CGRect)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_150_Microsoft_Maui_Controls_Handlers_Items_ItemsViewCell__ctor_function callback_150_Microsoft_Maui_Controls_Handlers_Items_ItemsViewCell__ctor;
		xamarin_registrar_dlsym ((void **) &callback_150_Microsoft_Maui_Controls_Handlers_Items_ItemsViewCell__ctor, "Microsoft.Maui.Controls", "callback_150_Microsoft_Maui_Controls_Handlers_Items_ItemsViewCell__ctor", 149);
		rv = callback_150_Microsoft_Maui_Controls_Handlers_Items_ItemsViewCell__ctor (self, _cmd, p0, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [UICollectionViewCell class] };
			rv = ((id (*)(objc_super*, SEL, CGRect)) objc_msgSendSuper) (&super, @selector (initWithFrame:), p0);
		}
		return rv;
	}
@end

@implementation Microsoft_Maui_Controls_Handlers_Items_TemplatedCell {
}

	typedef UICollectionViewLayoutAttributes * (*callback_184_Microsoft_Maui_Controls_Handlers_Items_TemplatedCell_PreferredLayoutAttributesFittingAttributes_function) (id self, SEL sel, UICollectionViewLayoutAttributes * p0, GCHandle* exception_gchandle);
	-(UICollectionViewLayoutAttributes *) preferredLayoutAttributesFittingAttributes:(UICollectionViewLayoutAttributes *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		UICollectionViewLayoutAttributes * rv = { 0 };
		static callback_184_Microsoft_Maui_Controls_Handlers_Items_TemplatedCell_PreferredLayoutAttributesFittingAttributes_function callback_184_Microsoft_Maui_Controls_Handlers_Items_TemplatedCell_PreferredLayoutAttributesFittingAttributes;
		xamarin_registrar_dlsym ((void **) &callback_184_Microsoft_Maui_Controls_Handlers_Items_TemplatedCell_PreferredLayoutAttributesFittingAttributes, "Microsoft.Maui.Controls", "callback_184_Microsoft_Maui_Controls_Handlers_Items_TemplatedCell_PreferredLayoutAttributesFittingAttributes", 183);
		rv = callback_184_Microsoft_Maui_Controls_Handlers_Items_TemplatedCell_PreferredLayoutAttributesFittingAttributes (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef void (*callback_185_Microsoft_Maui_Controls_Handlers_Items_TemplatedCell_PrepareForReuse_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) prepareForReuse
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_185_Microsoft_Maui_Controls_Handlers_Items_TemplatedCell_PrepareForReuse_function callback_185_Microsoft_Maui_Controls_Handlers_Items_TemplatedCell_PrepareForReuse;
		xamarin_registrar_dlsym ((void **) &callback_185_Microsoft_Maui_Controls_Handlers_Items_TemplatedCell_PrepareForReuse, "Microsoft.Maui.Controls", "callback_185_Microsoft_Maui_Controls_Handlers_Items_TemplatedCell_PrepareForReuse", 184);
		callback_185_Microsoft_Maui_Controls_Handlers_Items_TemplatedCell_PrepareForReuse (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef BOOL (*callback_186_Microsoft_Maui_Controls_Handlers_Items_TemplatedCell_get_Selected_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(BOOL) isSelected
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		BOOL rv = { 0 };
		static callback_186_Microsoft_Maui_Controls_Handlers_Items_TemplatedCell_get_Selected_function callback_186_Microsoft_Maui_Controls_Handlers_Items_TemplatedCell_get_Selected;
		xamarin_registrar_dlsym ((void **) &callback_186_Microsoft_Maui_Controls_Handlers_Items_TemplatedCell_get_Selected, "Microsoft.Maui.Controls", "callback_186_Microsoft_Maui_Controls_Handlers_Items_TemplatedCell_get_Selected", 185);
		rv = callback_186_Microsoft_Maui_Controls_Handlers_Items_TemplatedCell_get_Selected (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef void (*callback_187_Microsoft_Maui_Controls_Handlers_Items_TemplatedCell_set_Selected_function) (id self, SEL sel, BOOL p0, GCHandle* exception_gchandle);
	-(void) setSelected:(BOOL)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_187_Microsoft_Maui_Controls_Handlers_Items_TemplatedCell_set_Selected_function callback_187_Microsoft_Maui_Controls_Handlers_Items_TemplatedCell_set_Selected;
		xamarin_registrar_dlsym ((void **) &callback_187_Microsoft_Maui_Controls_Handlers_Items_TemplatedCell_set_Selected, "Microsoft.Maui.Controls", "callback_187_Microsoft_Maui_Controls_Handlers_Items_TemplatedCell_set_Selected", 186);
		callback_187_Microsoft_Maui_Controls_Handlers_Items_TemplatedCell_set_Selected (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef id (*callback_183_Microsoft_Maui_Controls_Handlers_Items_TemplatedCell__ctor_function) (id self, SEL sel, CGRect p0, bool* call_super, GCHandle* exception_gchandle);
	-(id) initWithFrame:(CGRect)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_183_Microsoft_Maui_Controls_Handlers_Items_TemplatedCell__ctor_function callback_183_Microsoft_Maui_Controls_Handlers_Items_TemplatedCell__ctor;
		xamarin_registrar_dlsym ((void **) &callback_183_Microsoft_Maui_Controls_Handlers_Items_TemplatedCell__ctor, "Microsoft.Maui.Controls", "callback_183_Microsoft_Maui_Controls_Handlers_Items_TemplatedCell__ctor", 182);
		rv = callback_183_Microsoft_Maui_Controls_Handlers_Items_TemplatedCell__ctor (self, _cmd, p0, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [Microsoft_Maui_Controls_Handlers_Items_ItemsViewCell class] };
			rv = ((id (*)(objc_super*, SEL, CGRect)) objc_msgSendSuper) (&super, @selector (initWithFrame:), p0);
		}
		return rv;
	}
@end

@implementation Microsoft_Maui_Controls_Handlers_Items_CarouselTemplatedCell {
}

	typedef id (*callback_121_Microsoft_Maui_Controls_Handlers_Items_CarouselTemplatedCell__ctor_function) (id self, SEL sel, CGRect p0, bool* call_super, GCHandle* exception_gchandle);
	-(id) initWithFrame:(CGRect)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_121_Microsoft_Maui_Controls_Handlers_Items_CarouselTemplatedCell__ctor_function callback_121_Microsoft_Maui_Controls_Handlers_Items_CarouselTemplatedCell__ctor;
		xamarin_registrar_dlsym ((void **) &callback_121_Microsoft_Maui_Controls_Handlers_Items_CarouselTemplatedCell__ctor, "Microsoft.Maui.Controls", "callback_121_Microsoft_Maui_Controls_Handlers_Items_CarouselTemplatedCell__ctor", 120);
		rv = callback_121_Microsoft_Maui_Controls_Handlers_Items_CarouselTemplatedCell__ctor (self, _cmd, p0, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [Microsoft_Maui_Controls_Handlers_Items_TemplatedCell class] };
			rv = ((id (*)(objc_super*, SEL, CGRect)) objc_msgSendSuper) (&super, @selector (initWithFrame:), p0);
		}
		return rv;
	}
@end

@implementation Microsoft_Maui_Controls_Handlers_Items_ItemsViewController_1 {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	typedef UICollectionViewCell * (*callback_151_Microsoft_Maui_Controls_Handlers_Items_ItemsViewController_1_GetCell_function) (id self, SEL sel, UICollectionView * p0, NSIndexPath * p1, GCHandle* exception_gchandle);
	-(UICollectionViewCell *) collectionView:(UICollectionView *)p0 cellForItemAtIndexPath:(NSIndexPath *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		UICollectionViewCell * rv = { 0 };
		static callback_151_Microsoft_Maui_Controls_Handlers_Items_ItemsViewController_1_GetCell_function callback_151_Microsoft_Maui_Controls_Handlers_Items_ItemsViewController_1_GetCell;
		xamarin_registrar_dlsym ((void **) &callback_151_Microsoft_Maui_Controls_Handlers_Items_ItemsViewController_1_GetCell, "Microsoft.Maui.Controls", "callback_151_Microsoft_Maui_Controls_Handlers_Items_ItemsViewController_1_GetCell", 150);
		rv = callback_151_Microsoft_Maui_Controls_Handlers_Items_ItemsViewController_1_GetCell (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef void * (*callback_152_Microsoft_Maui_Controls_Handlers_Items_ItemsViewController_1_GetItemsCount_function) (id self, SEL sel, UICollectionView * p0, void * p1, GCHandle* exception_gchandle);
	-(void *) collectionView:(UICollectionView *)p0 numberOfItemsInSection:(void *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		void * rv = { 0 };
		static callback_152_Microsoft_Maui_Controls_Handlers_Items_ItemsViewController_1_GetItemsCount_function callback_152_Microsoft_Maui_Controls_Handlers_Items_ItemsViewController_1_GetItemsCount;
		xamarin_registrar_dlsym ((void **) &callback_152_Microsoft_Maui_Controls_Handlers_Items_ItemsViewController_1_GetItemsCount, "Microsoft.Maui.Controls", "callback_152_Microsoft_Maui_Controls_Handlers_Items_ItemsViewController_1_GetItemsCount", 151);
		rv = callback_152_Microsoft_Maui_Controls_Handlers_Items_ItemsViewController_1_GetItemsCount (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef void (*callback_153_Microsoft_Maui_Controls_Handlers_Items_ItemsViewController_1_ViewDidLoad_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) viewDidLoad
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_153_Microsoft_Maui_Controls_Handlers_Items_ItemsViewController_1_ViewDidLoad_function callback_153_Microsoft_Maui_Controls_Handlers_Items_ItemsViewController_1_ViewDidLoad;
		xamarin_registrar_dlsym ((void **) &callback_153_Microsoft_Maui_Controls_Handlers_Items_ItemsViewController_1_ViewDidLoad, "Microsoft.Maui.Controls", "callback_153_Microsoft_Maui_Controls_Handlers_Items_ItemsViewController_1_ViewDidLoad", 152);
		callback_153_Microsoft_Maui_Controls_Handlers_Items_ItemsViewController_1_ViewDidLoad (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_154_Microsoft_Maui_Controls_Handlers_Items_ItemsViewController_1_LoadView_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) loadView
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_154_Microsoft_Maui_Controls_Handlers_Items_ItemsViewController_1_LoadView_function callback_154_Microsoft_Maui_Controls_Handlers_Items_ItemsViewController_1_LoadView;
		xamarin_registrar_dlsym ((void **) &callback_154_Microsoft_Maui_Controls_Handlers_Items_ItemsViewController_1_LoadView, "Microsoft.Maui.Controls", "callback_154_Microsoft_Maui_Controls_Handlers_Items_ItemsViewController_1_LoadView", 153);
		callback_154_Microsoft_Maui_Controls_Handlers_Items_ItemsViewController_1_LoadView (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_155_Microsoft_Maui_Controls_Handlers_Items_ItemsViewController_1_ViewWillAppear_function) (id self, SEL sel, BOOL p0, GCHandle* exception_gchandle);
	-(void) viewWillAppear:(BOOL)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_155_Microsoft_Maui_Controls_Handlers_Items_ItemsViewController_1_ViewWillAppear_function callback_155_Microsoft_Maui_Controls_Handlers_Items_ItemsViewController_1_ViewWillAppear;
		xamarin_registrar_dlsym ((void **) &callback_155_Microsoft_Maui_Controls_Handlers_Items_ItemsViewController_1_ViewWillAppear, "Microsoft.Maui.Controls", "callback_155_Microsoft_Maui_Controls_Handlers_Items_ItemsViewController_1_ViewWillAppear", 154);
		callback_155_Microsoft_Maui_Controls_Handlers_Items_ItemsViewController_1_ViewWillAppear (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_156_Microsoft_Maui_Controls_Handlers_Items_ItemsViewController_1_ViewWillLayoutSubviews_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) viewWillLayoutSubviews
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_156_Microsoft_Maui_Controls_Handlers_Items_ItemsViewController_1_ViewWillLayoutSubviews_function callback_156_Microsoft_Maui_Controls_Handlers_Items_ItemsViewController_1_ViewWillLayoutSubviews;
		xamarin_registrar_dlsym ((void **) &callback_156_Microsoft_Maui_Controls_Handlers_Items_ItemsViewController_1_ViewWillLayoutSubviews, "Microsoft.Maui.Controls", "callback_156_Microsoft_Maui_Controls_Handlers_Items_ItemsViewController_1_ViewWillLayoutSubviews", 155);
		callback_156_Microsoft_Maui_Controls_Handlers_Items_ItemsViewController_1_ViewWillLayoutSubviews (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void * (*callback_157_Microsoft_Maui_Controls_Handlers_Items_ItemsViewController_1_NumberOfSections_function) (id self, SEL sel, UICollectionView * p0, GCHandle* exception_gchandle);
	-(void *) numberOfSectionsInCollectionView:(UICollectionView *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		void * rv = { 0 };
		static callback_157_Microsoft_Maui_Controls_Handlers_Items_ItemsViewController_1_NumberOfSections_function callback_157_Microsoft_Maui_Controls_Handlers_Items_ItemsViewController_1_NumberOfSections;
		xamarin_registrar_dlsym ((void **) &callback_157_Microsoft_Maui_Controls_Handlers_Items_ItemsViewController_1_NumberOfSections, "Microsoft.Maui.Controls", "callback_157_Microsoft_Maui_Controls_Handlers_Items_ItemsViewController_1_NumberOfSections", 156);
		rv = callback_157_Microsoft_Maui_Controls_Handlers_Items_ItemsViewController_1_NumberOfSections (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
@end

@implementation Microsoft_Maui_Controls_Handlers_Items_CarouselViewController {
}

	typedef UICollectionViewCell * (*callback_122_Microsoft_Maui_Controls_Handlers_Items_CarouselViewController_GetCell_function) (id self, SEL sel, UICollectionView * p0, NSIndexPath * p1, GCHandle* exception_gchandle);
	-(UICollectionViewCell *) collectionView:(UICollectionView *)p0 cellForItemAtIndexPath:(NSIndexPath *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		UICollectionViewCell * rv = { 0 };
		static callback_122_Microsoft_Maui_Controls_Handlers_Items_CarouselViewController_GetCell_function callback_122_Microsoft_Maui_Controls_Handlers_Items_CarouselViewController_GetCell;
		xamarin_registrar_dlsym ((void **) &callback_122_Microsoft_Maui_Controls_Handlers_Items_CarouselViewController_GetCell, "Microsoft.Maui.Controls", "callback_122_Microsoft_Maui_Controls_Handlers_Items_CarouselViewController_GetCell", 121);
		rv = callback_122_Microsoft_Maui_Controls_Handlers_Items_CarouselViewController_GetCell (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef void * (*callback_123_Microsoft_Maui_Controls_Handlers_Items_CarouselViewController_GetItemsCount_function) (id self, SEL sel, UICollectionView * p0, void * p1, GCHandle* exception_gchandle);
	-(void *) collectionView:(UICollectionView *)p0 numberOfItemsInSection:(void *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		void * rv = { 0 };
		static callback_123_Microsoft_Maui_Controls_Handlers_Items_CarouselViewController_GetItemsCount_function callback_123_Microsoft_Maui_Controls_Handlers_Items_CarouselViewController_GetItemsCount;
		xamarin_registrar_dlsym ((void **) &callback_123_Microsoft_Maui_Controls_Handlers_Items_CarouselViewController_GetItemsCount, "Microsoft.Maui.Controls", "callback_123_Microsoft_Maui_Controls_Handlers_Items_CarouselViewController_GetItemsCount", 122);
		rv = callback_123_Microsoft_Maui_Controls_Handlers_Items_CarouselViewController_GetItemsCount (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef void (*callback_124_Microsoft_Maui_Controls_Handlers_Items_CarouselViewController_ViewDidLoad_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) viewDidLoad
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_124_Microsoft_Maui_Controls_Handlers_Items_CarouselViewController_ViewDidLoad_function callback_124_Microsoft_Maui_Controls_Handlers_Items_CarouselViewController_ViewDidLoad;
		xamarin_registrar_dlsym ((void **) &callback_124_Microsoft_Maui_Controls_Handlers_Items_CarouselViewController_ViewDidLoad, "Microsoft.Maui.Controls", "callback_124_Microsoft_Maui_Controls_Handlers_Items_CarouselViewController_ViewDidLoad", 123);
		callback_124_Microsoft_Maui_Controls_Handlers_Items_CarouselViewController_ViewDidLoad (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_125_Microsoft_Maui_Controls_Handlers_Items_CarouselViewController_ViewWillLayoutSubviews_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) viewWillLayoutSubviews
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_125_Microsoft_Maui_Controls_Handlers_Items_CarouselViewController_ViewWillLayoutSubviews_function callback_125_Microsoft_Maui_Controls_Handlers_Items_CarouselViewController_ViewWillLayoutSubviews;
		xamarin_registrar_dlsym ((void **) &callback_125_Microsoft_Maui_Controls_Handlers_Items_CarouselViewController_ViewWillLayoutSubviews, "Microsoft.Maui.Controls", "callback_125_Microsoft_Maui_Controls_Handlers_Items_CarouselViewController_ViewWillLayoutSubviews", 124);
		callback_125_Microsoft_Maui_Controls_Handlers_Items_CarouselViewController_ViewWillLayoutSubviews (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_126_Microsoft_Maui_Controls_Handlers_Items_CarouselViewController_ViewDidLayoutSubviews_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) viewDidLayoutSubviews
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_126_Microsoft_Maui_Controls_Handlers_Items_CarouselViewController_ViewDidLayoutSubviews_function callback_126_Microsoft_Maui_Controls_Handlers_Items_CarouselViewController_ViewDidLayoutSubviews;
		xamarin_registrar_dlsym ((void **) &callback_126_Microsoft_Maui_Controls_Handlers_Items_CarouselViewController_ViewDidLayoutSubviews, "Microsoft.Maui.Controls", "callback_126_Microsoft_Maui_Controls_Handlers_Items_CarouselViewController_ViewDidLayoutSubviews", 125);
		callback_126_Microsoft_Maui_Controls_Handlers_Items_CarouselViewController_ViewDidLayoutSubviews (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_127_Microsoft_Maui_Controls_Handlers_Items_CarouselViewController_DraggingStarted_function) (id self, SEL sel, UIScrollView * p0, GCHandle* exception_gchandle);
	-(void) scrollViewWillBeginDragging:(UIScrollView *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_127_Microsoft_Maui_Controls_Handlers_Items_CarouselViewController_DraggingStarted_function callback_127_Microsoft_Maui_Controls_Handlers_Items_CarouselViewController_DraggingStarted;
		xamarin_registrar_dlsym ((void **) &callback_127_Microsoft_Maui_Controls_Handlers_Items_CarouselViewController_DraggingStarted, "Microsoft.Maui.Controls", "callback_127_Microsoft_Maui_Controls_Handlers_Items_CarouselViewController_DraggingStarted", 126);
		callback_127_Microsoft_Maui_Controls_Handlers_Items_CarouselViewController_DraggingStarted (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_128_Microsoft_Maui_Controls_Handlers_Items_CarouselViewController_DraggingEnded_function) (id self, SEL sel, UIScrollView * p0, BOOL p1, GCHandle* exception_gchandle);
	-(void) scrollViewDidEndDragging:(UIScrollView *)p0 willDecelerate:(BOOL)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_128_Microsoft_Maui_Controls_Handlers_Items_CarouselViewController_DraggingEnded_function callback_128_Microsoft_Maui_Controls_Handlers_Items_CarouselViewController_DraggingEnded;
		xamarin_registrar_dlsym ((void **) &callback_128_Microsoft_Maui_Controls_Handlers_Items_CarouselViewController_DraggingEnded, "Microsoft.Maui.Controls", "callback_128_Microsoft_Maui_Controls_Handlers_Items_CarouselViewController_DraggingEnded", 127);
		callback_128_Microsoft_Maui_Controls_Handlers_Items_CarouselViewController_DraggingEnded (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}
@end

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_MacCatalyst__UIKit_UICollectionViewDelegate {
}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_MacCatalyst__UIKit_UICollectionViewDelegateFlowLayout {
}

	typedef id (*callback_3357_UIKit_UICollectionViewDelegateFlowLayout__ctor_function) (id self, SEL sel, bool* call_super, GCHandle* exception_gchandle);
	-(id) init
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_3357_UIKit_UICollectionViewDelegateFlowLayout__ctor_function callback_3357_UIKit_UICollectionViewDelegateFlowLayout__ctor;
		xamarin_registrar_dlsym ((void **) &callback_3357_UIKit_UICollectionViewDelegateFlowLayout__ctor, "Microsoft.MacCatalyst", "callback_3357_UIKit_UICollectionViewDelegateFlowLayout__ctor", 104);
		rv = callback_3357_UIKit_UICollectionViewDelegateFlowLayout__ctor (self, _cmd, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

@implementation Microsoft_Maui_Controls_Handlers_Items_ItemsViewDelegator_2 {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	typedef void (*callback_158_Microsoft_Maui_Controls_Handlers_Items_ItemsViewDelegator_2_Scrolled_function) (id self, SEL sel, UIScrollView * p0, GCHandle* exception_gchandle);
	-(void) scrollViewDidScroll:(UIScrollView *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_158_Microsoft_Maui_Controls_Handlers_Items_ItemsViewDelegator_2_Scrolled_function callback_158_Microsoft_Maui_Controls_Handlers_Items_ItemsViewDelegator_2_Scrolled;
		xamarin_registrar_dlsym ((void **) &callback_158_Microsoft_Maui_Controls_Handlers_Items_ItemsViewDelegator_2_Scrolled, "Microsoft.Maui.Controls", "callback_158_Microsoft_Maui_Controls_Handlers_Items_ItemsViewDelegator_2_Scrolled", 157);
		callback_158_Microsoft_Maui_Controls_Handlers_Items_ItemsViewDelegator_2_Scrolled (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef UIEdgeInsets (*callback_159_Microsoft_Maui_Controls_Handlers_Items_ItemsViewDelegator_2_GetInsetForSection_function) (id self, SEL sel, UICollectionView * p0, UICollectionViewLayout * p1, void * p2, GCHandle* exception_gchandle);
	-(UIEdgeInsets) collectionView:(UICollectionView *)p0 layout:(UICollectionViewLayout *)p1 insetForSectionAtIndex:(void *)p2
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		UIEdgeInsets rv = { 0 };
		static callback_159_Microsoft_Maui_Controls_Handlers_Items_ItemsViewDelegator_2_GetInsetForSection_function callback_159_Microsoft_Maui_Controls_Handlers_Items_ItemsViewDelegator_2_GetInsetForSection;
		xamarin_registrar_dlsym ((void **) &callback_159_Microsoft_Maui_Controls_Handlers_Items_ItemsViewDelegator_2_GetInsetForSection, "Microsoft.Maui.Controls", "callback_159_Microsoft_Maui_Controls_Handlers_Items_ItemsViewDelegator_2_GetInsetForSection", 158);
		rv = callback_159_Microsoft_Maui_Controls_Handlers_Items_ItemsViewDelegator_2_GetInsetForSection (self, _cmd, p0, p1, p2, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef CGFloat (*callback_160_Microsoft_Maui_Controls_Handlers_Items_ItemsViewDelegator_2_GetMinimumInteritemSpacingForSection_function) (id self, SEL sel, UICollectionView * p0, UICollectionViewLayout * p1, void * p2, GCHandle* exception_gchandle);
	-(CGFloat) collectionView:(UICollectionView *)p0 layout:(UICollectionViewLayout *)p1 minimumInteritemSpacingForSectionAtIndex:(void *)p2
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		CGFloat rv = { 0 };
		static callback_160_Microsoft_Maui_Controls_Handlers_Items_ItemsViewDelegator_2_GetMinimumInteritemSpacingForSection_function callback_160_Microsoft_Maui_Controls_Handlers_Items_ItemsViewDelegator_2_GetMinimumInteritemSpacingForSection;
		xamarin_registrar_dlsym ((void **) &callback_160_Microsoft_Maui_Controls_Handlers_Items_ItemsViewDelegator_2_GetMinimumInteritemSpacingForSection, "Microsoft.Maui.Controls", "callback_160_Microsoft_Maui_Controls_Handlers_Items_ItemsViewDelegator_2_GetMinimumInteritemSpacingForSection", 159);
		rv = callback_160_Microsoft_Maui_Controls_Handlers_Items_ItemsViewDelegator_2_GetMinimumInteritemSpacingForSection (self, _cmd, p0, p1, p2, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef CGFloat (*callback_161_Microsoft_Maui_Controls_Handlers_Items_ItemsViewDelegator_2_GetMinimumLineSpacingForSection_function) (id self, SEL sel, UICollectionView * p0, UICollectionViewLayout * p1, void * p2, GCHandle* exception_gchandle);
	-(CGFloat) collectionView:(UICollectionView *)p0 layout:(UICollectionViewLayout *)p1 minimumLineSpacingForSectionAtIndex:(void *)p2
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		CGFloat rv = { 0 };
		static callback_161_Microsoft_Maui_Controls_Handlers_Items_ItemsViewDelegator_2_GetMinimumLineSpacingForSection_function callback_161_Microsoft_Maui_Controls_Handlers_Items_ItemsViewDelegator_2_GetMinimumLineSpacingForSection;
		xamarin_registrar_dlsym ((void **) &callback_161_Microsoft_Maui_Controls_Handlers_Items_ItemsViewDelegator_2_GetMinimumLineSpacingForSection, "Microsoft.Maui.Controls", "callback_161_Microsoft_Maui_Controls_Handlers_Items_ItemsViewDelegator_2_GetMinimumLineSpacingForSection", 160);
		rv = callback_161_Microsoft_Maui_Controls_Handlers_Items_ItemsViewDelegator_2_GetMinimumLineSpacingForSection (self, _cmd, p0, p1, p2, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef void (*callback_162_Microsoft_Maui_Controls_Handlers_Items_ItemsViewDelegator_2_CellDisplayingEnded_function) (id self, SEL sel, UICollectionView * p0, UICollectionViewCell * p1, NSIndexPath * p2, GCHandle* exception_gchandle);
	-(void) collectionView:(UICollectionView *)p0 didEndDisplayingCell:(UICollectionViewCell *)p1 forItemAtIndexPath:(NSIndexPath *)p2
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_162_Microsoft_Maui_Controls_Handlers_Items_ItemsViewDelegator_2_CellDisplayingEnded_function callback_162_Microsoft_Maui_Controls_Handlers_Items_ItemsViewDelegator_2_CellDisplayingEnded;
		xamarin_registrar_dlsym ((void **) &callback_162_Microsoft_Maui_Controls_Handlers_Items_ItemsViewDelegator_2_CellDisplayingEnded, "Microsoft.Maui.Controls", "callback_162_Microsoft_Maui_Controls_Handlers_Items_ItemsViewDelegator_2_CellDisplayingEnded", 161);
		callback_162_Microsoft_Maui_Controls_Handlers_Items_ItemsViewDelegator_2_CellDisplayingEnded (self, _cmd, p0, p1, p2, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef CGSize (*callback_163_Microsoft_Maui_Controls_Handlers_Items_ItemsViewDelegator_2_GetSizeForItem_function) (id self, SEL sel, UICollectionView * p0, UICollectionViewLayout * p1, NSIndexPath * p2, GCHandle* exception_gchandle);
	-(CGSize) collectionView:(UICollectionView *)p0 layout:(UICollectionViewLayout *)p1 sizeForItemAtIndexPath:(NSIndexPath *)p2
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		CGSize rv = { 0 };
		static callback_163_Microsoft_Maui_Controls_Handlers_Items_ItemsViewDelegator_2_GetSizeForItem_function callback_163_Microsoft_Maui_Controls_Handlers_Items_ItemsViewDelegator_2_GetSizeForItem;
		xamarin_registrar_dlsym ((void **) &callback_163_Microsoft_Maui_Controls_Handlers_Items_ItemsViewDelegator_2_GetSizeForItem, "Microsoft.Maui.Controls", "callback_163_Microsoft_Maui_Controls_Handlers_Items_ItemsViewDelegator_2_GetSizeForItem", 162);
		rv = callback_163_Microsoft_Maui_Controls_Handlers_Items_ItemsViewDelegator_2_GetSizeForItem (self, _cmd, p0, p1, p2, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
@end

@implementation Microsoft_Maui_Controls_Handlers_Items_CarouselViewDelegator {
}

	typedef void (*callback_129_Microsoft_Maui_Controls_Handlers_Items_CarouselViewDelegator_Scrolled_function) (id self, SEL sel, UIScrollView * p0, GCHandle* exception_gchandle);
	-(void) scrollViewDidScroll:(UIScrollView *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_129_Microsoft_Maui_Controls_Handlers_Items_CarouselViewDelegator_Scrolled_function callback_129_Microsoft_Maui_Controls_Handlers_Items_CarouselViewDelegator_Scrolled;
		xamarin_registrar_dlsym ((void **) &callback_129_Microsoft_Maui_Controls_Handlers_Items_CarouselViewDelegator_Scrolled, "Microsoft.Maui.Controls", "callback_129_Microsoft_Maui_Controls_Handlers_Items_CarouselViewDelegator_Scrolled", 128);
		callback_129_Microsoft_Maui_Controls_Handlers_Items_CarouselViewDelegator_Scrolled (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_130_Microsoft_Maui_Controls_Handlers_Items_CarouselViewDelegator_ScrollAnimationEnded_function) (id self, SEL sel, UIScrollView * p0, GCHandle* exception_gchandle);
	-(void) scrollViewDidEndScrollingAnimation:(UIScrollView *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_130_Microsoft_Maui_Controls_Handlers_Items_CarouselViewDelegator_ScrollAnimationEnded_function callback_130_Microsoft_Maui_Controls_Handlers_Items_CarouselViewDelegator_ScrollAnimationEnded;
		xamarin_registrar_dlsym ((void **) &callback_130_Microsoft_Maui_Controls_Handlers_Items_CarouselViewDelegator_ScrollAnimationEnded, "Microsoft.Maui.Controls", "callback_130_Microsoft_Maui_Controls_Handlers_Items_CarouselViewDelegator_ScrollAnimationEnded", 129);
		callback_130_Microsoft_Maui_Controls_Handlers_Items_CarouselViewDelegator_ScrollAnimationEnded (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_131_Microsoft_Maui_Controls_Handlers_Items_CarouselViewDelegator_DecelerationEnded_function) (id self, SEL sel, UIScrollView * p0, GCHandle* exception_gchandle);
	-(void) scrollViewDidEndDecelerating:(UIScrollView *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_131_Microsoft_Maui_Controls_Handlers_Items_CarouselViewDelegator_DecelerationEnded_function callback_131_Microsoft_Maui_Controls_Handlers_Items_CarouselViewDelegator_DecelerationEnded;
		xamarin_registrar_dlsym ((void **) &callback_131_Microsoft_Maui_Controls_Handlers_Items_CarouselViewDelegator_DecelerationEnded, "Microsoft.Maui.Controls", "callback_131_Microsoft_Maui_Controls_Handlers_Items_CarouselViewDelegator_DecelerationEnded", 130);
		callback_131_Microsoft_Maui_Controls_Handlers_Items_CarouselViewDelegator_DecelerationEnded (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_132_Microsoft_Maui_Controls_Handlers_Items_CarouselViewDelegator_DraggingStarted_function) (id self, SEL sel, UIScrollView * p0, GCHandle* exception_gchandle);
	-(void) scrollViewWillBeginDragging:(UIScrollView *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_132_Microsoft_Maui_Controls_Handlers_Items_CarouselViewDelegator_DraggingStarted_function callback_132_Microsoft_Maui_Controls_Handlers_Items_CarouselViewDelegator_DraggingStarted;
		xamarin_registrar_dlsym ((void **) &callback_132_Microsoft_Maui_Controls_Handlers_Items_CarouselViewDelegator_DraggingStarted, "Microsoft.Maui.Controls", "callback_132_Microsoft_Maui_Controls_Handlers_Items_CarouselViewDelegator_DraggingStarted", 131);
		callback_132_Microsoft_Maui_Controls_Handlers_Items_CarouselViewDelegator_DraggingStarted (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_133_Microsoft_Maui_Controls_Handlers_Items_CarouselViewDelegator_DraggingEnded_function) (id self, SEL sel, UIScrollView * p0, BOOL p1, GCHandle* exception_gchandle);
	-(void) scrollViewDidEndDragging:(UIScrollView *)p0 willDecelerate:(BOOL)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_133_Microsoft_Maui_Controls_Handlers_Items_CarouselViewDelegator_DraggingEnded_function callback_133_Microsoft_Maui_Controls_Handlers_Items_CarouselViewDelegator_DraggingEnded;
		xamarin_registrar_dlsym ((void **) &callback_133_Microsoft_Maui_Controls_Handlers_Items_CarouselViewDelegator_DraggingEnded, "Microsoft.Maui.Controls", "callback_133_Microsoft_Maui_Controls_Handlers_Items_CarouselViewDelegator_DraggingEnded", 132);
		callback_133_Microsoft_Maui_Controls_Handlers_Items_CarouselViewDelegator_DraggingEnded (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}
@end

@implementation Microsoft_Maui_Controls_Handlers_Items_ItemsViewLayout {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	typedef BOOL (*callback_164_Microsoft_Maui_Controls_Handlers_Items_ItemsViewLayout_get_FlipsHorizontallyInOppositeLayoutDirection_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(BOOL) flipsHorizontallyInOppositeLayoutDirection
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		BOOL rv = { 0 };
		static callback_164_Microsoft_Maui_Controls_Handlers_Items_ItemsViewLayout_get_FlipsHorizontallyInOppositeLayoutDirection_function callback_164_Microsoft_Maui_Controls_Handlers_Items_ItemsViewLayout_get_FlipsHorizontallyInOppositeLayoutDirection;
		xamarin_registrar_dlsym ((void **) &callback_164_Microsoft_Maui_Controls_Handlers_Items_ItemsViewLayout_get_FlipsHorizontallyInOppositeLayoutDirection, "Microsoft.Maui.Controls", "callback_164_Microsoft_Maui_Controls_Handlers_Items_ItemsViewLayout_get_FlipsHorizontallyInOppositeLayoutDirection", 163);
		rv = callback_164_Microsoft_Maui_Controls_Handlers_Items_ItemsViewLayout_get_FlipsHorizontallyInOppositeLayoutDirection (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef BOOL (*callback_165_Microsoft_Maui_Controls_Handlers_Items_ItemsViewLayout_ShouldInvalidateLayout_function) (id self, SEL sel, UICollectionViewLayoutAttributes * p0, UICollectionViewLayoutAttributes * p1, GCHandle* exception_gchandle);
	-(BOOL) shouldInvalidateLayoutForPreferredLayoutAttributes:(UICollectionViewLayoutAttributes *)p0 withOriginalAttributes:(UICollectionViewLayoutAttributes *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		BOOL rv = { 0 };
		static callback_165_Microsoft_Maui_Controls_Handlers_Items_ItemsViewLayout_ShouldInvalidateLayout_function callback_165_Microsoft_Maui_Controls_Handlers_Items_ItemsViewLayout_ShouldInvalidateLayout;
		xamarin_registrar_dlsym ((void **) &callback_165_Microsoft_Maui_Controls_Handlers_Items_ItemsViewLayout_ShouldInvalidateLayout, "Microsoft.Maui.Controls", "callback_165_Microsoft_Maui_Controls_Handlers_Items_ItemsViewLayout_ShouldInvalidateLayout", 164);
		rv = callback_165_Microsoft_Maui_Controls_Handlers_Items_ItemsViewLayout_ShouldInvalidateLayout (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef CGPoint (*callback_166_Microsoft_Maui_Controls_Handlers_Items_ItemsViewLayout_TargetContentOffset_function) (id self, SEL sel, CGPoint p0, CGPoint p1, GCHandle* exception_gchandle);
	-(CGPoint) targetContentOffsetForProposedContentOffset:(CGPoint)p0 withScrollingVelocity:(CGPoint)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		CGPoint rv = { 0 };
		static callback_166_Microsoft_Maui_Controls_Handlers_Items_ItemsViewLayout_TargetContentOffset_function callback_166_Microsoft_Maui_Controls_Handlers_Items_ItemsViewLayout_TargetContentOffset;
		xamarin_registrar_dlsym ((void **) &callback_166_Microsoft_Maui_Controls_Handlers_Items_ItemsViewLayout_TargetContentOffset, "Microsoft.Maui.Controls", "callback_166_Microsoft_Maui_Controls_Handlers_Items_ItemsViewLayout_TargetContentOffset", 165);
		rv = callback_166_Microsoft_Maui_Controls_Handlers_Items_ItemsViewLayout_TargetContentOffset (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef UICollectionViewLayoutInvalidationContext * (*callback_167_Microsoft_Maui_Controls_Handlers_Items_ItemsViewLayout_GetInvalidationContext_function) (id self, SEL sel, UICollectionViewLayoutAttributes * p0, UICollectionViewLayoutAttributes * p1, GCHandle* exception_gchandle);
	-(UICollectionViewLayoutInvalidationContext *) invalidationContextForPreferredLayoutAttributes:(UICollectionViewLayoutAttributes *)p0 withOriginalAttributes:(UICollectionViewLayoutAttributes *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		UICollectionViewLayoutInvalidationContext * rv = { 0 };
		static callback_167_Microsoft_Maui_Controls_Handlers_Items_ItemsViewLayout_GetInvalidationContext_function callback_167_Microsoft_Maui_Controls_Handlers_Items_ItemsViewLayout_GetInvalidationContext;
		xamarin_registrar_dlsym ((void **) &callback_167_Microsoft_Maui_Controls_Handlers_Items_ItemsViewLayout_GetInvalidationContext, "Microsoft.Maui.Controls", "callback_167_Microsoft_Maui_Controls_Handlers_Items_ItemsViewLayout_GetInvalidationContext", 166);
		rv = callback_167_Microsoft_Maui_Controls_Handlers_Items_ItemsViewLayout_GetInvalidationContext (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef void (*callback_168_Microsoft_Maui_Controls_Handlers_Items_ItemsViewLayout_PrepareLayout_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) prepareLayout
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_168_Microsoft_Maui_Controls_Handlers_Items_ItemsViewLayout_PrepareLayout_function callback_168_Microsoft_Maui_Controls_Handlers_Items_ItemsViewLayout_PrepareLayout;
		xamarin_registrar_dlsym ((void **) &callback_168_Microsoft_Maui_Controls_Handlers_Items_ItemsViewLayout_PrepareLayout, "Microsoft.Maui.Controls", "callback_168_Microsoft_Maui_Controls_Handlers_Items_ItemsViewLayout_PrepareLayout", 167);
		callback_168_Microsoft_Maui_Controls_Handlers_Items_ItemsViewLayout_PrepareLayout (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_169_Microsoft_Maui_Controls_Handlers_Items_ItemsViewLayout_PrepareForCollectionViewUpdates_function) (id self, SEL sel, NSArray * p0, GCHandle* exception_gchandle);
	-(void) prepareForCollectionViewUpdates:(NSArray *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_169_Microsoft_Maui_Controls_Handlers_Items_ItemsViewLayout_PrepareForCollectionViewUpdates_function callback_169_Microsoft_Maui_Controls_Handlers_Items_ItemsViewLayout_PrepareForCollectionViewUpdates;
		xamarin_registrar_dlsym ((void **) &callback_169_Microsoft_Maui_Controls_Handlers_Items_ItemsViewLayout_PrepareForCollectionViewUpdates, "Microsoft.Maui.Controls", "callback_169_Microsoft_Maui_Controls_Handlers_Items_ItemsViewLayout_PrepareForCollectionViewUpdates", 168);
		callback_169_Microsoft_Maui_Controls_Handlers_Items_ItemsViewLayout_PrepareForCollectionViewUpdates (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef CGPoint (*callback_170_Microsoft_Maui_Controls_Handlers_Items_ItemsViewLayout_TargetContentOffsetForProposedContentOffset_function) (id self, SEL sel, CGPoint p0, GCHandle* exception_gchandle);
	-(CGPoint) targetContentOffsetForProposedContentOffset:(CGPoint)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		CGPoint rv = { 0 };
		static callback_170_Microsoft_Maui_Controls_Handlers_Items_ItemsViewLayout_TargetContentOffsetForProposedContentOffset_function callback_170_Microsoft_Maui_Controls_Handlers_Items_ItemsViewLayout_TargetContentOffsetForProposedContentOffset;
		xamarin_registrar_dlsym ((void **) &callback_170_Microsoft_Maui_Controls_Handlers_Items_ItemsViewLayout_TargetContentOffsetForProposedContentOffset, "Microsoft.Maui.Controls", "callback_170_Microsoft_Maui_Controls_Handlers_Items_ItemsViewLayout_TargetContentOffsetForProposedContentOffset", 169);
		rv = callback_170_Microsoft_Maui_Controls_Handlers_Items_ItemsViewLayout_TargetContentOffsetForProposedContentOffset (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef void (*callback_171_Microsoft_Maui_Controls_Handlers_Items_ItemsViewLayout_FinalizeCollectionViewUpdates_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) finalizeCollectionViewUpdates
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_171_Microsoft_Maui_Controls_Handlers_Items_ItemsViewLayout_FinalizeCollectionViewUpdates_function callback_171_Microsoft_Maui_Controls_Handlers_Items_ItemsViewLayout_FinalizeCollectionViewUpdates;
		xamarin_registrar_dlsym ((void **) &callback_171_Microsoft_Maui_Controls_Handlers_Items_ItemsViewLayout_FinalizeCollectionViewUpdates, "Microsoft.Maui.Controls", "callback_171_Microsoft_Maui_Controls_Handlers_Items_ItemsViewLayout_FinalizeCollectionViewUpdates", 170);
		callback_171_Microsoft_Maui_Controls_Handlers_Items_ItemsViewLayout_FinalizeCollectionViewUpdates (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef BOOL (*callback_172_Microsoft_Maui_Controls_Handlers_Items_ItemsViewLayout_ShouldInvalidateLayoutForBoundsChange_function) (id self, SEL sel, CGRect p0, GCHandle* exception_gchandle);
	-(BOOL) shouldInvalidateLayoutForBoundsChange:(CGRect)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		BOOL rv = { 0 };
		static callback_172_Microsoft_Maui_Controls_Handlers_Items_ItemsViewLayout_ShouldInvalidateLayoutForBoundsChange_function callback_172_Microsoft_Maui_Controls_Handlers_Items_ItemsViewLayout_ShouldInvalidateLayoutForBoundsChange;
		xamarin_registrar_dlsym ((void **) &callback_172_Microsoft_Maui_Controls_Handlers_Items_ItemsViewLayout_ShouldInvalidateLayoutForBoundsChange, "Microsoft.Maui.Controls", "callback_172_Microsoft_Maui_Controls_Handlers_Items_ItemsViewLayout_ShouldInvalidateLayoutForBoundsChange", 171);
		rv = callback_172_Microsoft_Maui_Controls_Handlers_Items_ItemsViewLayout_ShouldInvalidateLayoutForBoundsChange (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
@end

@implementation Microsoft_Maui_Controls_Handlers_Items_CarouselViewLayout {
}

	typedef void (*callback_134_Microsoft_Maui_Controls_Handlers_Items_CarouselViewLayout_PrepareForCollectionViewUpdates_function) (id self, SEL sel, NSArray * p0, GCHandle* exception_gchandle);
	-(void) prepareForCollectionViewUpdates:(NSArray *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_134_Microsoft_Maui_Controls_Handlers_Items_CarouselViewLayout_PrepareForCollectionViewUpdates_function callback_134_Microsoft_Maui_Controls_Handlers_Items_CarouselViewLayout_PrepareForCollectionViewUpdates;
		xamarin_registrar_dlsym ((void **) &callback_134_Microsoft_Maui_Controls_Handlers_Items_CarouselViewLayout_PrepareForCollectionViewUpdates, "Microsoft.Maui.Controls", "callback_134_Microsoft_Maui_Controls_Handlers_Items_CarouselViewLayout_PrepareForCollectionViewUpdates", 133);
		callback_134_Microsoft_Maui_Controls_Handlers_Items_CarouselViewLayout_PrepareForCollectionViewUpdates (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_135_Microsoft_Maui_Controls_Handlers_Items_CarouselViewLayout_FinalizeCollectionViewUpdates_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) finalizeCollectionViewUpdates
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_135_Microsoft_Maui_Controls_Handlers_Items_CarouselViewLayout_FinalizeCollectionViewUpdates_function callback_135_Microsoft_Maui_Controls_Handlers_Items_CarouselViewLayout_FinalizeCollectionViewUpdates;
		xamarin_registrar_dlsym ((void **) &callback_135_Microsoft_Maui_Controls_Handlers_Items_CarouselViewLayout_FinalizeCollectionViewUpdates, "Microsoft.Maui.Controls", "callback_135_Microsoft_Maui_Controls_Handlers_Items_CarouselViewLayout_FinalizeCollectionViewUpdates", 134);
		callback_135_Microsoft_Maui_Controls_Handlers_Items_CarouselViewLayout_FinalizeCollectionViewUpdates (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}
@end

@implementation Microsoft_Maui_Controls_Handlers_Items_DefaultCell {
}

	typedef id (*callback_136_Microsoft_Maui_Controls_Handlers_Items_DefaultCell__ctor_function) (id self, SEL sel, CGRect p0, bool* call_super, GCHandle* exception_gchandle);
	-(id) initWithFrame:(CGRect)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_136_Microsoft_Maui_Controls_Handlers_Items_DefaultCell__ctor_function callback_136_Microsoft_Maui_Controls_Handlers_Items_DefaultCell__ctor;
		xamarin_registrar_dlsym ((void **) &callback_136_Microsoft_Maui_Controls_Handlers_Items_DefaultCell__ctor, "Microsoft.Maui.Controls", "callback_136_Microsoft_Maui_Controls_Handlers_Items_DefaultCell__ctor", 135);
		rv = callback_136_Microsoft_Maui_Controls_Handlers_Items_DefaultCell__ctor (self, _cmd, p0, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [Microsoft_Maui_Controls_Handlers_Items_ItemsViewCell class] };
			rv = ((id (*)(objc_super*, SEL, CGRect)) objc_msgSendSuper) (&super, @selector (initWithFrame:), p0);
		}
		return rv;
	}
@end

@implementation Microsoft_Maui_Controls_Handlers_Items_GridViewLayout {
}

	typedef CGSize (*callback_137_Microsoft_Maui_Controls_Handlers_Items_GridViewLayout_get_CollectionViewContentSize_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(CGSize) collectionViewContentSize
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		CGSize rv = { 0 };
		static callback_137_Microsoft_Maui_Controls_Handlers_Items_GridViewLayout_get_CollectionViewContentSize_function callback_137_Microsoft_Maui_Controls_Handlers_Items_GridViewLayout_get_CollectionViewContentSize;
		xamarin_registrar_dlsym ((void **) &callback_137_Microsoft_Maui_Controls_Handlers_Items_GridViewLayout_get_CollectionViewContentSize, "Microsoft.Maui.Controls", "callback_137_Microsoft_Maui_Controls_Handlers_Items_GridViewLayout_get_CollectionViewContentSize", 136);
		rv = callback_137_Microsoft_Maui_Controls_Handlers_Items_GridViewLayout_get_CollectionViewContentSize (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef NSArray * (*callback_138_Microsoft_Maui_Controls_Handlers_Items_GridViewLayout_LayoutAttributesForElementsInRect_function) (id self, SEL sel, CGRect p0, GCHandle* exception_gchandle);
	-(NSArray *) layoutAttributesForElementsInRect:(CGRect)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		NSArray * rv = { 0 };
		static callback_138_Microsoft_Maui_Controls_Handlers_Items_GridViewLayout_LayoutAttributesForElementsInRect_function callback_138_Microsoft_Maui_Controls_Handlers_Items_GridViewLayout_LayoutAttributesForElementsInRect;
		xamarin_registrar_dlsym ((void **) &callback_138_Microsoft_Maui_Controls_Handlers_Items_GridViewLayout_LayoutAttributesForElementsInRect, "Microsoft.Maui.Controls", "callback_138_Microsoft_Maui_Controls_Handlers_Items_GridViewLayout_LayoutAttributesForElementsInRect", 137);
		rv = callback_138_Microsoft_Maui_Controls_Handlers_Items_GridViewLayout_LayoutAttributesForElementsInRect (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef UICollectionViewLayoutInvalidationContext * (*callback_139_Microsoft_Maui_Controls_Handlers_Items_GridViewLayout_GetInvalidationContext_function) (id self, SEL sel, UICollectionViewLayoutAttributes * p0, UICollectionViewLayoutAttributes * p1, GCHandle* exception_gchandle);
	-(UICollectionViewLayoutInvalidationContext *) invalidationContextForPreferredLayoutAttributes:(UICollectionViewLayoutAttributes *)p0 withOriginalAttributes:(UICollectionViewLayoutAttributes *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		UICollectionViewLayoutInvalidationContext * rv = { 0 };
		static callback_139_Microsoft_Maui_Controls_Handlers_Items_GridViewLayout_GetInvalidationContext_function callback_139_Microsoft_Maui_Controls_Handlers_Items_GridViewLayout_GetInvalidationContext;
		xamarin_registrar_dlsym ((void **) &callback_139_Microsoft_Maui_Controls_Handlers_Items_GridViewLayout_GetInvalidationContext, "Microsoft.Maui.Controls", "callback_139_Microsoft_Maui_Controls_Handlers_Items_GridViewLayout_GetInvalidationContext", 138);
		rv = callback_139_Microsoft_Maui_Controls_Handlers_Items_GridViewLayout_GetInvalidationContext (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
@end

@implementation Microsoft_Maui_Controls_Handlers_Items_StructuredItemsViewController_1 {
}

	typedef void (*callback_182_Microsoft_Maui_Controls_Handlers_Items_StructuredItemsViewController_1_ViewWillLayoutSubviews_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) viewWillLayoutSubviews
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_182_Microsoft_Maui_Controls_Handlers_Items_StructuredItemsViewController_1_ViewWillLayoutSubviews_function callback_182_Microsoft_Maui_Controls_Handlers_Items_StructuredItemsViewController_1_ViewWillLayoutSubviews;
		xamarin_registrar_dlsym ((void **) &callback_182_Microsoft_Maui_Controls_Handlers_Items_StructuredItemsViewController_1_ViewWillLayoutSubviews, "Microsoft.Maui.Controls", "callback_182_Microsoft_Maui_Controls_Handlers_Items_StructuredItemsViewController_1_ViewWillLayoutSubviews", 181);
		callback_182_Microsoft_Maui_Controls_Handlers_Items_StructuredItemsViewController_1_ViewWillLayoutSubviews (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}
@end

@implementation Microsoft_Maui_Controls_Handlers_Items_SelectableItemsViewController_1 {
}

	typedef void (*callback_178_Microsoft_Maui_Controls_Handlers_Items_SelectableItemsViewController_1_ItemSelected_function) (id self, SEL sel, UICollectionView * p0, NSIndexPath * p1, GCHandle* exception_gchandle);
	-(void) collectionView:(UICollectionView *)p0 didSelectItemAtIndexPath:(NSIndexPath *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_178_Microsoft_Maui_Controls_Handlers_Items_SelectableItemsViewController_1_ItemSelected_function callback_178_Microsoft_Maui_Controls_Handlers_Items_SelectableItemsViewController_1_ItemSelected;
		xamarin_registrar_dlsym ((void **) &callback_178_Microsoft_Maui_Controls_Handlers_Items_SelectableItemsViewController_1_ItemSelected, "Microsoft.Maui.Controls", "callback_178_Microsoft_Maui_Controls_Handlers_Items_SelectableItemsViewController_1_ItemSelected", 177);
		callback_178_Microsoft_Maui_Controls_Handlers_Items_SelectableItemsViewController_1_ItemSelected (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_179_Microsoft_Maui_Controls_Handlers_Items_SelectableItemsViewController_1_ItemDeselected_function) (id self, SEL sel, UICollectionView * p0, NSIndexPath * p1, GCHandle* exception_gchandle);
	-(void) collectionView:(UICollectionView *)p0 didDeselectItemAtIndexPath:(NSIndexPath *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_179_Microsoft_Maui_Controls_Handlers_Items_SelectableItemsViewController_1_ItemDeselected_function callback_179_Microsoft_Maui_Controls_Handlers_Items_SelectableItemsViewController_1_ItemDeselected;
		xamarin_registrar_dlsym ((void **) &callback_179_Microsoft_Maui_Controls_Handlers_Items_SelectableItemsViewController_1_ItemDeselected, "Microsoft.Maui.Controls", "callback_179_Microsoft_Maui_Controls_Handlers_Items_SelectableItemsViewController_1_ItemDeselected", 178);
		callback_179_Microsoft_Maui_Controls_Handlers_Items_SelectableItemsViewController_1_ItemDeselected (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}
@end

@implementation Microsoft_Maui_Controls_Handlers_Items_GroupableItemsViewController_1 {
}

	typedef UICollectionReusableView * (*callback_140_Microsoft_Maui_Controls_Handlers_Items_GroupableItemsViewController_1_GetViewForSupplementaryElement_function) (id self, SEL sel, UICollectionView * p0, NSString * p1, NSIndexPath * p2, GCHandle* exception_gchandle);
	-(UICollectionReusableView *) collectionView:(UICollectionView *)p0 viewForSupplementaryElementOfKind:(NSString *)p1 atIndexPath:(NSIndexPath *)p2
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		UICollectionReusableView * rv = { 0 };
		static callback_140_Microsoft_Maui_Controls_Handlers_Items_GroupableItemsViewController_1_GetViewForSupplementaryElement_function callback_140_Microsoft_Maui_Controls_Handlers_Items_GroupableItemsViewController_1_GetViewForSupplementaryElement;
		xamarin_registrar_dlsym ((void **) &callback_140_Microsoft_Maui_Controls_Handlers_Items_GroupableItemsViewController_1_GetViewForSupplementaryElement, "Microsoft.Maui.Controls", "callback_140_Microsoft_Maui_Controls_Handlers_Items_GroupableItemsViewController_1_GetViewForSupplementaryElement", 139);
		rv = callback_140_Microsoft_Maui_Controls_Handlers_Items_GroupableItemsViewController_1_GetViewForSupplementaryElement (self, _cmd, p0, p1, p2, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
@end

@implementation Microsoft_Maui_Controls_Handlers_Items_SelectableItemsViewDelegator_2 {
}

	typedef void (*callback_180_Microsoft_Maui_Controls_Handlers_Items_SelectableItemsViewDelegator_2_ItemSelected_function) (id self, SEL sel, UICollectionView * p0, NSIndexPath * p1, GCHandle* exception_gchandle);
	-(void) collectionView:(UICollectionView *)p0 didSelectItemAtIndexPath:(NSIndexPath *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_180_Microsoft_Maui_Controls_Handlers_Items_SelectableItemsViewDelegator_2_ItemSelected_function callback_180_Microsoft_Maui_Controls_Handlers_Items_SelectableItemsViewDelegator_2_ItemSelected;
		xamarin_registrar_dlsym ((void **) &callback_180_Microsoft_Maui_Controls_Handlers_Items_SelectableItemsViewDelegator_2_ItemSelected, "Microsoft.Maui.Controls", "callback_180_Microsoft_Maui_Controls_Handlers_Items_SelectableItemsViewDelegator_2_ItemSelected", 179);
		callback_180_Microsoft_Maui_Controls_Handlers_Items_SelectableItemsViewDelegator_2_ItemSelected (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_181_Microsoft_Maui_Controls_Handlers_Items_SelectableItemsViewDelegator_2_ItemDeselected_function) (id self, SEL sel, UICollectionView * p0, NSIndexPath * p1, GCHandle* exception_gchandle);
	-(void) collectionView:(UICollectionView *)p0 didDeselectItemAtIndexPath:(NSIndexPath *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_181_Microsoft_Maui_Controls_Handlers_Items_SelectableItemsViewDelegator_2_ItemDeselected_function callback_181_Microsoft_Maui_Controls_Handlers_Items_SelectableItemsViewDelegator_2_ItemDeselected;
		xamarin_registrar_dlsym ((void **) &callback_181_Microsoft_Maui_Controls_Handlers_Items_SelectableItemsViewDelegator_2_ItemDeselected, "Microsoft.Maui.Controls", "callback_181_Microsoft_Maui_Controls_Handlers_Items_SelectableItemsViewDelegator_2_ItemDeselected", 180);
		callback_181_Microsoft_Maui_Controls_Handlers_Items_SelectableItemsViewDelegator_2_ItemDeselected (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}
@end

@implementation Microsoft_Maui_Controls_Handlers_Items_GroupableItemsViewDelegator_2 {
}

	typedef CGSize (*callback_141_Microsoft_Maui_Controls_Handlers_Items_GroupableItemsViewDelegator_2_GetReferenceSizeForHeader_function) (id self, SEL sel, UICollectionView * p0, UICollectionViewLayout * p1, void * p2, GCHandle* exception_gchandle);
	-(CGSize) collectionView:(UICollectionView *)p0 layout:(UICollectionViewLayout *)p1 referenceSizeForHeaderInSection:(void *)p2
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		CGSize rv = { 0 };
		static callback_141_Microsoft_Maui_Controls_Handlers_Items_GroupableItemsViewDelegator_2_GetReferenceSizeForHeader_function callback_141_Microsoft_Maui_Controls_Handlers_Items_GroupableItemsViewDelegator_2_GetReferenceSizeForHeader;
		xamarin_registrar_dlsym ((void **) &callback_141_Microsoft_Maui_Controls_Handlers_Items_GroupableItemsViewDelegator_2_GetReferenceSizeForHeader, "Microsoft.Maui.Controls", "callback_141_Microsoft_Maui_Controls_Handlers_Items_GroupableItemsViewDelegator_2_GetReferenceSizeForHeader", 140);
		rv = callback_141_Microsoft_Maui_Controls_Handlers_Items_GroupableItemsViewDelegator_2_GetReferenceSizeForHeader (self, _cmd, p0, p1, p2, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef CGSize (*callback_142_Microsoft_Maui_Controls_Handlers_Items_GroupableItemsViewDelegator_2_GetReferenceSizeForFooter_function) (id self, SEL sel, UICollectionView * p0, UICollectionViewLayout * p1, void * p2, GCHandle* exception_gchandle);
	-(CGSize) collectionView:(UICollectionView *)p0 layout:(UICollectionViewLayout *)p1 referenceSizeForFooterInSection:(void *)p2
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		CGSize rv = { 0 };
		static callback_142_Microsoft_Maui_Controls_Handlers_Items_GroupableItemsViewDelegator_2_GetReferenceSizeForFooter_function callback_142_Microsoft_Maui_Controls_Handlers_Items_GroupableItemsViewDelegator_2_GetReferenceSizeForFooter;
		xamarin_registrar_dlsym ((void **) &callback_142_Microsoft_Maui_Controls_Handlers_Items_GroupableItemsViewDelegator_2_GetReferenceSizeForFooter, "Microsoft.Maui.Controls", "callback_142_Microsoft_Maui_Controls_Handlers_Items_GroupableItemsViewDelegator_2_GetReferenceSizeForFooter", 141);
		rv = callback_142_Microsoft_Maui_Controls_Handlers_Items_GroupableItemsViewDelegator_2_GetReferenceSizeForFooter (self, _cmd, p0, p1, p2, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef void (*callback_143_Microsoft_Maui_Controls_Handlers_Items_GroupableItemsViewDelegator_2_ScrollAnimationEnded_function) (id self, SEL sel, UIScrollView * p0, GCHandle* exception_gchandle);
	-(void) scrollViewDidEndScrollingAnimation:(UIScrollView *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_143_Microsoft_Maui_Controls_Handlers_Items_GroupableItemsViewDelegator_2_ScrollAnimationEnded_function callback_143_Microsoft_Maui_Controls_Handlers_Items_GroupableItemsViewDelegator_2_ScrollAnimationEnded;
		xamarin_registrar_dlsym ((void **) &callback_143_Microsoft_Maui_Controls_Handlers_Items_GroupableItemsViewDelegator_2_ScrollAnimationEnded, "Microsoft.Maui.Controls", "callback_143_Microsoft_Maui_Controls_Handlers_Items_GroupableItemsViewDelegator_2_ScrollAnimationEnded", 142);
		callback_143_Microsoft_Maui_Controls_Handlers_Items_GroupableItemsViewDelegator_2_ScrollAnimationEnded (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef UIEdgeInsets (*callback_144_Microsoft_Maui_Controls_Handlers_Items_GroupableItemsViewDelegator_2_GetInsetForSection_function) (id self, SEL sel, UICollectionView * p0, UICollectionViewLayout * p1, void * p2, GCHandle* exception_gchandle);
	-(UIEdgeInsets) collectionView:(UICollectionView *)p0 layout:(UICollectionViewLayout *)p1 insetForSectionAtIndex:(void *)p2
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		UIEdgeInsets rv = { 0 };
		static callback_144_Microsoft_Maui_Controls_Handlers_Items_GroupableItemsViewDelegator_2_GetInsetForSection_function callback_144_Microsoft_Maui_Controls_Handlers_Items_GroupableItemsViewDelegator_2_GetInsetForSection;
		xamarin_registrar_dlsym ((void **) &callback_144_Microsoft_Maui_Controls_Handlers_Items_GroupableItemsViewDelegator_2_GetInsetForSection, "Microsoft.Maui.Controls", "callback_144_Microsoft_Maui_Controls_Handlers_Items_GroupableItemsViewDelegator_2_GetInsetForSection", 143);
		rv = callback_144_Microsoft_Maui_Controls_Handlers_Items_GroupableItemsViewDelegator_2_GetInsetForSection (self, _cmd, p0, p1, p2, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
@end

@interface Microsoft_Maui_Controls_Handlers_Items_HeightConstrainedTemplatedCell : Microsoft_Maui_Controls_Handlers_Items_TemplatedCell {
}
	-(id) initWithFrame:(CGRect)p0;
@end

@implementation Microsoft_Maui_Controls_Handlers_Items_HeightConstrainedTemplatedCell {
}

	typedef id (*callback_145_Microsoft_Maui_Controls_Handlers_Items_HeightConstrainedTemplatedCell__ctor_function) (id self, SEL sel, CGRect p0, bool* call_super, GCHandle* exception_gchandle);
	-(id) initWithFrame:(CGRect)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_145_Microsoft_Maui_Controls_Handlers_Items_HeightConstrainedTemplatedCell__ctor_function callback_145_Microsoft_Maui_Controls_Handlers_Items_HeightConstrainedTemplatedCell__ctor;
		xamarin_registrar_dlsym ((void **) &callback_145_Microsoft_Maui_Controls_Handlers_Items_HeightConstrainedTemplatedCell__ctor, "Microsoft.Maui.Controls", "callback_145_Microsoft_Maui_Controls_Handlers_Items_HeightConstrainedTemplatedCell__ctor", 144);
		rv = callback_145_Microsoft_Maui_Controls_Handlers_Items_HeightConstrainedTemplatedCell__ctor (self, _cmd, p0, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [Microsoft_Maui_Controls_Handlers_Items_TemplatedCell class] };
			rv = ((id (*)(objc_super*, SEL, CGRect)) objc_msgSendSuper) (&super, @selector (initWithFrame:), p0);
		}
		return rv;
	}
@end

@interface Microsoft_Maui_Controls_Handlers_Items_HorizontalCell : Microsoft_Maui_Controls_Handlers_Items_HeightConstrainedTemplatedCell {
}
	-(id) initWithFrame:(CGRect)p0;
@end

@implementation Microsoft_Maui_Controls_Handlers_Items_HorizontalCell {
}

	typedef id (*callback_146_Microsoft_Maui_Controls_Handlers_Items_HorizontalCell__ctor_function) (id self, SEL sel, CGRect p0, bool* call_super, GCHandle* exception_gchandle);
	-(id) initWithFrame:(CGRect)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_146_Microsoft_Maui_Controls_Handlers_Items_HorizontalCell__ctor_function callback_146_Microsoft_Maui_Controls_Handlers_Items_HorizontalCell__ctor;
		xamarin_registrar_dlsym ((void **) &callback_146_Microsoft_Maui_Controls_Handlers_Items_HorizontalCell__ctor, "Microsoft.Maui.Controls", "callback_146_Microsoft_Maui_Controls_Handlers_Items_HorizontalCell__ctor", 145);
		rv = callback_146_Microsoft_Maui_Controls_Handlers_Items_HorizontalCell__ctor (self, _cmd, p0, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [Microsoft_Maui_Controls_Handlers_Items_HeightConstrainedTemplatedCell class] };
			rv = ((id (*)(objc_super*, SEL, CGRect)) objc_msgSendSuper) (&super, @selector (initWithFrame:), p0);
		}
		return rv;
	}
@end

@interface Microsoft_Maui_Controls_Handlers_Items_HorizontalDefaultCell : Microsoft_Maui_Controls_Handlers_Items_DefaultCell {
}
	-(id) initWithFrame:(CGRect)p0;
@end

@implementation Microsoft_Maui_Controls_Handlers_Items_HorizontalDefaultCell {
}

	typedef id (*callback_147_Microsoft_Maui_Controls_Handlers_Items_HorizontalDefaultCell__ctor_function) (id self, SEL sel, CGRect p0, bool* call_super, GCHandle* exception_gchandle);
	-(id) initWithFrame:(CGRect)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_147_Microsoft_Maui_Controls_Handlers_Items_HorizontalDefaultCell__ctor_function callback_147_Microsoft_Maui_Controls_Handlers_Items_HorizontalDefaultCell__ctor;
		xamarin_registrar_dlsym ((void **) &callback_147_Microsoft_Maui_Controls_Handlers_Items_HorizontalDefaultCell__ctor, "Microsoft.Maui.Controls", "callback_147_Microsoft_Maui_Controls_Handlers_Items_HorizontalDefaultCell__ctor", 146);
		rv = callback_147_Microsoft_Maui_Controls_Handlers_Items_HorizontalDefaultCell__ctor (self, _cmd, p0, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [Microsoft_Maui_Controls_Handlers_Items_DefaultCell class] };
			rv = ((id (*)(objc_super*, SEL, CGRect)) objc_msgSendSuper) (&super, @selector (initWithFrame:), p0);
		}
		return rv;
	}
@end

@interface Microsoft_Maui_Controls_Handlers_Items_HorizontalDefaultSupplementalView : Microsoft_Maui_Controls_Handlers_Items_DefaultCell {
}
	-(id) initWithFrame:(CGRect)p0;
@end

@implementation Microsoft_Maui_Controls_Handlers_Items_HorizontalDefaultSupplementalView {
}

	typedef id (*callback_148_Microsoft_Maui_Controls_Handlers_Items_HorizontalDefaultSupplementalView__ctor_function) (id self, SEL sel, CGRect p0, bool* call_super, GCHandle* exception_gchandle);
	-(id) initWithFrame:(CGRect)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_148_Microsoft_Maui_Controls_Handlers_Items_HorizontalDefaultSupplementalView__ctor_function callback_148_Microsoft_Maui_Controls_Handlers_Items_HorizontalDefaultSupplementalView__ctor;
		xamarin_registrar_dlsym ((void **) &callback_148_Microsoft_Maui_Controls_Handlers_Items_HorizontalDefaultSupplementalView__ctor, "Microsoft.Maui.Controls", "callback_148_Microsoft_Maui_Controls_Handlers_Items_HorizontalDefaultSupplementalView__ctor", 147);
		rv = callback_148_Microsoft_Maui_Controls_Handlers_Items_HorizontalDefaultSupplementalView__ctor (self, _cmd, p0, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [Microsoft_Maui_Controls_Handlers_Items_DefaultCell class] };
			rv = ((id (*)(objc_super*, SEL, CGRect)) objc_msgSendSuper) (&super, @selector (initWithFrame:), p0);
		}
		return rv;
	}
@end

@interface Microsoft_Maui_Controls_Handlers_Items_HorizontalSupplementaryView : Microsoft_Maui_Controls_Handlers_Items_HeightConstrainedTemplatedCell {
}
	-(id) initWithFrame:(CGRect)p0;
@end

@implementation Microsoft_Maui_Controls_Handlers_Items_HorizontalSupplementaryView {
}

	typedef id (*callback_149_Microsoft_Maui_Controls_Handlers_Items_HorizontalSupplementaryView__ctor_function) (id self, SEL sel, CGRect p0, bool* call_super, GCHandle* exception_gchandle);
	-(id) initWithFrame:(CGRect)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_149_Microsoft_Maui_Controls_Handlers_Items_HorizontalSupplementaryView__ctor_function callback_149_Microsoft_Maui_Controls_Handlers_Items_HorizontalSupplementaryView__ctor;
		xamarin_registrar_dlsym ((void **) &callback_149_Microsoft_Maui_Controls_Handlers_Items_HorizontalSupplementaryView__ctor, "Microsoft.Maui.Controls", "callback_149_Microsoft_Maui_Controls_Handlers_Items_HorizontalSupplementaryView__ctor", 148);
		rv = callback_149_Microsoft_Maui_Controls_Handlers_Items_HorizontalSupplementaryView__ctor (self, _cmd, p0, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [Microsoft_Maui_Controls_Handlers_Items_HeightConstrainedTemplatedCell class] };
			rv = ((id (*)(objc_super*, SEL, CGRect)) objc_msgSendSuper) (&super, @selector (initWithFrame:), p0);
		}
		return rv;
	}
@end

@implementation Microsoft_Maui_Controls_Handlers_Items_ListViewLayout {
}
@end

@implementation Microsoft_Maui_Controls_Handlers_Items_ReorderableItemsViewController_1 {
}

	typedef BOOL (*callback_175_Microsoft_Maui_Controls_Handlers_Items_ReorderableItemsViewController_1_CanMoveItem_function) (id self, SEL sel, UICollectionView * p0, NSIndexPath * p1, GCHandle* exception_gchandle);
	-(BOOL) collectionView:(UICollectionView *)p0 canMoveItemAtIndexPath:(NSIndexPath *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		BOOL rv = { 0 };
		static callback_175_Microsoft_Maui_Controls_Handlers_Items_ReorderableItemsViewController_1_CanMoveItem_function callback_175_Microsoft_Maui_Controls_Handlers_Items_ReorderableItemsViewController_1_CanMoveItem;
		xamarin_registrar_dlsym ((void **) &callback_175_Microsoft_Maui_Controls_Handlers_Items_ReorderableItemsViewController_1_CanMoveItem, "Microsoft.Maui.Controls", "callback_175_Microsoft_Maui_Controls_Handlers_Items_ReorderableItemsViewController_1_CanMoveItem", 174);
		rv = callback_175_Microsoft_Maui_Controls_Handlers_Items_ReorderableItemsViewController_1_CanMoveItem (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef void (*callback_176_Microsoft_Maui_Controls_Handlers_Items_ReorderableItemsViewController_1_MoveItem_function) (id self, SEL sel, UICollectionView * p0, NSIndexPath * p1, NSIndexPath * p2, GCHandle* exception_gchandle);
	-(void) collectionView:(UICollectionView *)p0 moveItemAtIndexPath:(NSIndexPath *)p1 toIndexPath:(NSIndexPath *)p2
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_176_Microsoft_Maui_Controls_Handlers_Items_ReorderableItemsViewController_1_MoveItem_function callback_176_Microsoft_Maui_Controls_Handlers_Items_ReorderableItemsViewController_1_MoveItem;
		xamarin_registrar_dlsym ((void **) &callback_176_Microsoft_Maui_Controls_Handlers_Items_ReorderableItemsViewController_1_MoveItem, "Microsoft.Maui.Controls", "callback_176_Microsoft_Maui_Controls_Handlers_Items_ReorderableItemsViewController_1_MoveItem", 175);
		callback_176_Microsoft_Maui_Controls_Handlers_Items_ReorderableItemsViewController_1_MoveItem (self, _cmd, p0, p1, p2, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}
@end

@implementation Microsoft_Maui_Controls_Handlers_Items_ReorderableItemsViewDelegator_2 {
}

	typedef NSIndexPath * (*callback_177_Microsoft_Maui_Controls_Handlers_Items_ReorderableItemsViewDelegator_2_GetTargetIndexPathForMove_function) (id self, SEL sel, UICollectionView * p0, NSIndexPath * p1, NSIndexPath * p2, GCHandle* exception_gchandle);
	-(NSIndexPath *) collectionView:(UICollectionView *)p0 targetIndexPathForMoveFromItemAtIndexPath:(NSIndexPath *)p1 toProposedIndexPath:(NSIndexPath *)p2
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		NSIndexPath * rv = { 0 };
		static callback_177_Microsoft_Maui_Controls_Handlers_Items_ReorderableItemsViewDelegator_2_GetTargetIndexPathForMove_function callback_177_Microsoft_Maui_Controls_Handlers_Items_ReorderableItemsViewDelegator_2_GetTargetIndexPathForMove;
		xamarin_registrar_dlsym ((void **) &callback_177_Microsoft_Maui_Controls_Handlers_Items_ReorderableItemsViewDelegator_2_GetTargetIndexPathForMove, "Microsoft.Maui.Controls", "callback_177_Microsoft_Maui_Controls_Handlers_Items_ReorderableItemsViewDelegator_2_GetTargetIndexPathForMove", 176);
		rv = callback_177_Microsoft_Maui_Controls_Handlers_Items_ReorderableItemsViewDelegator_2_GetTargetIndexPathForMove (self, _cmd, p0, p1, p2, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
@end

@interface Microsoft_Maui_Controls_Handlers_Items_WidthConstrainedTemplatedCell : Microsoft_Maui_Controls_Handlers_Items_TemplatedCell {
}
	-(id) initWithFrame:(CGRect)p0;
@end

@implementation Microsoft_Maui_Controls_Handlers_Items_WidthConstrainedTemplatedCell {
}

	typedef id (*callback_192_Microsoft_Maui_Controls_Handlers_Items_WidthConstrainedTemplatedCell__ctor_function) (id self, SEL sel, CGRect p0, bool* call_super, GCHandle* exception_gchandle);
	-(id) initWithFrame:(CGRect)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_192_Microsoft_Maui_Controls_Handlers_Items_WidthConstrainedTemplatedCell__ctor_function callback_192_Microsoft_Maui_Controls_Handlers_Items_WidthConstrainedTemplatedCell__ctor;
		xamarin_registrar_dlsym ((void **) &callback_192_Microsoft_Maui_Controls_Handlers_Items_WidthConstrainedTemplatedCell__ctor, "Microsoft.Maui.Controls", "callback_192_Microsoft_Maui_Controls_Handlers_Items_WidthConstrainedTemplatedCell__ctor", 191);
		rv = callback_192_Microsoft_Maui_Controls_Handlers_Items_WidthConstrainedTemplatedCell__ctor (self, _cmd, p0, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [Microsoft_Maui_Controls_Handlers_Items_TemplatedCell class] };
			rv = ((id (*)(objc_super*, SEL, CGRect)) objc_msgSendSuper) (&super, @selector (initWithFrame:), p0);
		}
		return rv;
	}
@end

@interface Microsoft_Maui_Controls_Handlers_Items_VerticalCell : Microsoft_Maui_Controls_Handlers_Items_WidthConstrainedTemplatedCell {
}
	-(id) initWithFrame:(CGRect)p0;
@end

@implementation Microsoft_Maui_Controls_Handlers_Items_VerticalCell {
}

	typedef id (*callback_188_Microsoft_Maui_Controls_Handlers_Items_VerticalCell__ctor_function) (id self, SEL sel, CGRect p0, bool* call_super, GCHandle* exception_gchandle);
	-(id) initWithFrame:(CGRect)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_188_Microsoft_Maui_Controls_Handlers_Items_VerticalCell__ctor_function callback_188_Microsoft_Maui_Controls_Handlers_Items_VerticalCell__ctor;
		xamarin_registrar_dlsym ((void **) &callback_188_Microsoft_Maui_Controls_Handlers_Items_VerticalCell__ctor, "Microsoft.Maui.Controls", "callback_188_Microsoft_Maui_Controls_Handlers_Items_VerticalCell__ctor", 187);
		rv = callback_188_Microsoft_Maui_Controls_Handlers_Items_VerticalCell__ctor (self, _cmd, p0, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [Microsoft_Maui_Controls_Handlers_Items_WidthConstrainedTemplatedCell class] };
			rv = ((id (*)(objc_super*, SEL, CGRect)) objc_msgSendSuper) (&super, @selector (initWithFrame:), p0);
		}
		return rv;
	}
@end

@interface Microsoft_Maui_Controls_Handlers_Items_VerticalDefaultCell : Microsoft_Maui_Controls_Handlers_Items_DefaultCell {
}
	-(id) initWithFrame:(CGRect)p0;
@end

@implementation Microsoft_Maui_Controls_Handlers_Items_VerticalDefaultCell {
}

	typedef id (*callback_189_Microsoft_Maui_Controls_Handlers_Items_VerticalDefaultCell__ctor_function) (id self, SEL sel, CGRect p0, bool* call_super, GCHandle* exception_gchandle);
	-(id) initWithFrame:(CGRect)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_189_Microsoft_Maui_Controls_Handlers_Items_VerticalDefaultCell__ctor_function callback_189_Microsoft_Maui_Controls_Handlers_Items_VerticalDefaultCell__ctor;
		xamarin_registrar_dlsym ((void **) &callback_189_Microsoft_Maui_Controls_Handlers_Items_VerticalDefaultCell__ctor, "Microsoft.Maui.Controls", "callback_189_Microsoft_Maui_Controls_Handlers_Items_VerticalDefaultCell__ctor", 188);
		rv = callback_189_Microsoft_Maui_Controls_Handlers_Items_VerticalDefaultCell__ctor (self, _cmd, p0, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [Microsoft_Maui_Controls_Handlers_Items_DefaultCell class] };
			rv = ((id (*)(objc_super*, SEL, CGRect)) objc_msgSendSuper) (&super, @selector (initWithFrame:), p0);
		}
		return rv;
	}
@end

@interface Microsoft_Maui_Controls_Handlers_Items_VerticalDefaultSupplementalView : Microsoft_Maui_Controls_Handlers_Items_DefaultCell {
}
	-(id) initWithFrame:(CGRect)p0;
@end

@implementation Microsoft_Maui_Controls_Handlers_Items_VerticalDefaultSupplementalView {
}

	typedef id (*callback_190_Microsoft_Maui_Controls_Handlers_Items_VerticalDefaultSupplementalView__ctor_function) (id self, SEL sel, CGRect p0, bool* call_super, GCHandle* exception_gchandle);
	-(id) initWithFrame:(CGRect)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_190_Microsoft_Maui_Controls_Handlers_Items_VerticalDefaultSupplementalView__ctor_function callback_190_Microsoft_Maui_Controls_Handlers_Items_VerticalDefaultSupplementalView__ctor;
		xamarin_registrar_dlsym ((void **) &callback_190_Microsoft_Maui_Controls_Handlers_Items_VerticalDefaultSupplementalView__ctor, "Microsoft.Maui.Controls", "callback_190_Microsoft_Maui_Controls_Handlers_Items_VerticalDefaultSupplementalView__ctor", 189);
		rv = callback_190_Microsoft_Maui_Controls_Handlers_Items_VerticalDefaultSupplementalView__ctor (self, _cmd, p0, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [Microsoft_Maui_Controls_Handlers_Items_DefaultCell class] };
			rv = ((id (*)(objc_super*, SEL, CGRect)) objc_msgSendSuper) (&super, @selector (initWithFrame:), p0);
		}
		return rv;
	}
@end

@interface Microsoft_Maui_Controls_Handlers_Items_VerticalSupplementaryView : Microsoft_Maui_Controls_Handlers_Items_WidthConstrainedTemplatedCell {
}
	-(id) initWithFrame:(CGRect)p0;
@end

@implementation Microsoft_Maui_Controls_Handlers_Items_VerticalSupplementaryView {
}

	typedef id (*callback_191_Microsoft_Maui_Controls_Handlers_Items_VerticalSupplementaryView__ctor_function) (id self, SEL sel, CGRect p0, bool* call_super, GCHandle* exception_gchandle);
	-(id) initWithFrame:(CGRect)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_191_Microsoft_Maui_Controls_Handlers_Items_VerticalSupplementaryView__ctor_function callback_191_Microsoft_Maui_Controls_Handlers_Items_VerticalSupplementaryView__ctor;
		xamarin_registrar_dlsym ((void **) &callback_191_Microsoft_Maui_Controls_Handlers_Items_VerticalSupplementaryView__ctor, "Microsoft.Maui.Controls", "callback_191_Microsoft_Maui_Controls_Handlers_Items_VerticalSupplementaryView__ctor", 190);
		rv = callback_191_Microsoft_Maui_Controls_Handlers_Items_VerticalSupplementaryView__ctor (self, _cmd, p0, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [Microsoft_Maui_Controls_Handlers_Items_WidthConstrainedTemplatedCell class] };
			rv = ((id (*)(objc_super*, SEL, CGRect)) objc_msgSendSuper) (&super, @selector (initWithFrame:), p0);
		}
		return rv;
	}
@end

@implementation Microsoft_Maui_Controls_Handlers_Items2_ItemsViewDelegator2_2 {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	typedef void (*callback_220_Microsoft_Maui_Controls_Handlers_Items2_ItemsViewDelegator2_2_Scrolled_function) (id self, SEL sel, UIScrollView * p0, GCHandle* exception_gchandle);
	-(void) scrollViewDidScroll:(UIScrollView *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_220_Microsoft_Maui_Controls_Handlers_Items2_ItemsViewDelegator2_2_Scrolled_function callback_220_Microsoft_Maui_Controls_Handlers_Items2_ItemsViewDelegator2_2_Scrolled;
		xamarin_registrar_dlsym ((void **) &callback_220_Microsoft_Maui_Controls_Handlers_Items2_ItemsViewDelegator2_2_Scrolled, "Microsoft.Maui.Controls", "callback_220_Microsoft_Maui_Controls_Handlers_Items2_ItemsViewDelegator2_2_Scrolled", 219);
		callback_220_Microsoft_Maui_Controls_Handlers_Items2_ItemsViewDelegator2_2_Scrolled (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef UIEdgeInsets (*callback_221_Microsoft_Maui_Controls_Handlers_Items2_ItemsViewDelegator2_2_GetInsetForSection_function) (id self, SEL sel, UICollectionView * p0, UICollectionViewLayout * p1, void * p2, GCHandle* exception_gchandle);
	-(UIEdgeInsets) collectionView:(UICollectionView *)p0 layout:(UICollectionViewLayout *)p1 insetForSectionAtIndex:(void *)p2
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		UIEdgeInsets rv = { 0 };
		static callback_221_Microsoft_Maui_Controls_Handlers_Items2_ItemsViewDelegator2_2_GetInsetForSection_function callback_221_Microsoft_Maui_Controls_Handlers_Items2_ItemsViewDelegator2_2_GetInsetForSection;
		xamarin_registrar_dlsym ((void **) &callback_221_Microsoft_Maui_Controls_Handlers_Items2_ItemsViewDelegator2_2_GetInsetForSection, "Microsoft.Maui.Controls", "callback_221_Microsoft_Maui_Controls_Handlers_Items2_ItemsViewDelegator2_2_GetInsetForSection", 220);
		rv = callback_221_Microsoft_Maui_Controls_Handlers_Items2_ItemsViewDelegator2_2_GetInsetForSection (self, _cmd, p0, p1, p2, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef CGFloat (*callback_222_Microsoft_Maui_Controls_Handlers_Items2_ItemsViewDelegator2_2_GetMinimumInteritemSpacingForSection_function) (id self, SEL sel, UICollectionView * p0, UICollectionViewLayout * p1, void * p2, GCHandle* exception_gchandle);
	-(CGFloat) collectionView:(UICollectionView *)p0 layout:(UICollectionViewLayout *)p1 minimumInteritemSpacingForSectionAtIndex:(void *)p2
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		CGFloat rv = { 0 };
		static callback_222_Microsoft_Maui_Controls_Handlers_Items2_ItemsViewDelegator2_2_GetMinimumInteritemSpacingForSection_function callback_222_Microsoft_Maui_Controls_Handlers_Items2_ItemsViewDelegator2_2_GetMinimumInteritemSpacingForSection;
		xamarin_registrar_dlsym ((void **) &callback_222_Microsoft_Maui_Controls_Handlers_Items2_ItemsViewDelegator2_2_GetMinimumInteritemSpacingForSection, "Microsoft.Maui.Controls", "callback_222_Microsoft_Maui_Controls_Handlers_Items2_ItemsViewDelegator2_2_GetMinimumInteritemSpacingForSection", 221);
		rv = callback_222_Microsoft_Maui_Controls_Handlers_Items2_ItemsViewDelegator2_2_GetMinimumInteritemSpacingForSection (self, _cmd, p0, p1, p2, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef CGFloat (*callback_223_Microsoft_Maui_Controls_Handlers_Items2_ItemsViewDelegator2_2_GetMinimumLineSpacingForSection_function) (id self, SEL sel, UICollectionView * p0, UICollectionViewLayout * p1, void * p2, GCHandle* exception_gchandle);
	-(CGFloat) collectionView:(UICollectionView *)p0 layout:(UICollectionViewLayout *)p1 minimumLineSpacingForSectionAtIndex:(void *)p2
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		CGFloat rv = { 0 };
		static callback_223_Microsoft_Maui_Controls_Handlers_Items2_ItemsViewDelegator2_2_GetMinimumLineSpacingForSection_function callback_223_Microsoft_Maui_Controls_Handlers_Items2_ItemsViewDelegator2_2_GetMinimumLineSpacingForSection;
		xamarin_registrar_dlsym ((void **) &callback_223_Microsoft_Maui_Controls_Handlers_Items2_ItemsViewDelegator2_2_GetMinimumLineSpacingForSection, "Microsoft.Maui.Controls", "callback_223_Microsoft_Maui_Controls_Handlers_Items2_ItemsViewDelegator2_2_GetMinimumLineSpacingForSection", 222);
		rv = callback_223_Microsoft_Maui_Controls_Handlers_Items2_ItemsViewDelegator2_2_GetMinimumLineSpacingForSection (self, _cmd, p0, p1, p2, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef void (*callback_224_Microsoft_Maui_Controls_Handlers_Items2_ItemsViewDelegator2_2_CellDisplayingEnded_function) (id self, SEL sel, UICollectionView * p0, UICollectionViewCell * p1, NSIndexPath * p2, GCHandle* exception_gchandle);
	-(void) collectionView:(UICollectionView *)p0 didEndDisplayingCell:(UICollectionViewCell *)p1 forItemAtIndexPath:(NSIndexPath *)p2
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_224_Microsoft_Maui_Controls_Handlers_Items2_ItemsViewDelegator2_2_CellDisplayingEnded_function callback_224_Microsoft_Maui_Controls_Handlers_Items2_ItemsViewDelegator2_2_CellDisplayingEnded;
		xamarin_registrar_dlsym ((void **) &callback_224_Microsoft_Maui_Controls_Handlers_Items2_ItemsViewDelegator2_2_CellDisplayingEnded, "Microsoft.Maui.Controls", "callback_224_Microsoft_Maui_Controls_Handlers_Items2_ItemsViewDelegator2_2_CellDisplayingEnded", 223);
		callback_224_Microsoft_Maui_Controls_Handlers_Items2_ItemsViewDelegator2_2_CellDisplayingEnded (self, _cmd, p0, p1, p2, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
@end

@implementation Microsoft_Maui_Controls_Handlers_Items2_CarouselViewDelegator2 {
}

	typedef void (*callback_200_Microsoft_Maui_Controls_Handlers_Items2_CarouselViewDelegator2_Scrolled_function) (id self, SEL sel, UIScrollView * p0, GCHandle* exception_gchandle);
	-(void) scrollViewDidScroll:(UIScrollView *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_200_Microsoft_Maui_Controls_Handlers_Items2_CarouselViewDelegator2_Scrolled_function callback_200_Microsoft_Maui_Controls_Handlers_Items2_CarouselViewDelegator2_Scrolled;
		xamarin_registrar_dlsym ((void **) &callback_200_Microsoft_Maui_Controls_Handlers_Items2_CarouselViewDelegator2_Scrolled, "Microsoft.Maui.Controls", "callback_200_Microsoft_Maui_Controls_Handlers_Items2_CarouselViewDelegator2_Scrolled", 199);
		callback_200_Microsoft_Maui_Controls_Handlers_Items2_CarouselViewDelegator2_Scrolled (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_201_Microsoft_Maui_Controls_Handlers_Items2_CarouselViewDelegator2_ScrollAnimationEnded_function) (id self, SEL sel, UIScrollView * p0, GCHandle* exception_gchandle);
	-(void) scrollViewDidEndScrollingAnimation:(UIScrollView *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_201_Microsoft_Maui_Controls_Handlers_Items2_CarouselViewDelegator2_ScrollAnimationEnded_function callback_201_Microsoft_Maui_Controls_Handlers_Items2_CarouselViewDelegator2_ScrollAnimationEnded;
		xamarin_registrar_dlsym ((void **) &callback_201_Microsoft_Maui_Controls_Handlers_Items2_CarouselViewDelegator2_ScrollAnimationEnded, "Microsoft.Maui.Controls", "callback_201_Microsoft_Maui_Controls_Handlers_Items2_CarouselViewDelegator2_ScrollAnimationEnded", 200);
		callback_201_Microsoft_Maui_Controls_Handlers_Items2_CarouselViewDelegator2_ScrollAnimationEnded (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_202_Microsoft_Maui_Controls_Handlers_Items2_CarouselViewDelegator2_DecelerationEnded_function) (id self, SEL sel, UIScrollView * p0, GCHandle* exception_gchandle);
	-(void) scrollViewDidEndDecelerating:(UIScrollView *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_202_Microsoft_Maui_Controls_Handlers_Items2_CarouselViewDelegator2_DecelerationEnded_function callback_202_Microsoft_Maui_Controls_Handlers_Items2_CarouselViewDelegator2_DecelerationEnded;
		xamarin_registrar_dlsym ((void **) &callback_202_Microsoft_Maui_Controls_Handlers_Items2_CarouselViewDelegator2_DecelerationEnded, "Microsoft.Maui.Controls", "callback_202_Microsoft_Maui_Controls_Handlers_Items2_CarouselViewDelegator2_DecelerationEnded", 201);
		callback_202_Microsoft_Maui_Controls_Handlers_Items2_CarouselViewDelegator2_DecelerationEnded (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_203_Microsoft_Maui_Controls_Handlers_Items2_CarouselViewDelegator2_DraggingStarted_function) (id self, SEL sel, UIScrollView * p0, GCHandle* exception_gchandle);
	-(void) scrollViewWillBeginDragging:(UIScrollView *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_203_Microsoft_Maui_Controls_Handlers_Items2_CarouselViewDelegator2_DraggingStarted_function callback_203_Microsoft_Maui_Controls_Handlers_Items2_CarouselViewDelegator2_DraggingStarted;
		xamarin_registrar_dlsym ((void **) &callback_203_Microsoft_Maui_Controls_Handlers_Items2_CarouselViewDelegator2_DraggingStarted, "Microsoft.Maui.Controls", "callback_203_Microsoft_Maui_Controls_Handlers_Items2_CarouselViewDelegator2_DraggingStarted", 202);
		callback_203_Microsoft_Maui_Controls_Handlers_Items2_CarouselViewDelegator2_DraggingStarted (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_204_Microsoft_Maui_Controls_Handlers_Items2_CarouselViewDelegator2_DraggingEnded_function) (id self, SEL sel, UIScrollView * p0, BOOL p1, GCHandle* exception_gchandle);
	-(void) scrollViewDidEndDragging:(UIScrollView *)p0 willDecelerate:(BOOL)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_204_Microsoft_Maui_Controls_Handlers_Items2_CarouselViewDelegator2_DraggingEnded_function callback_204_Microsoft_Maui_Controls_Handlers_Items2_CarouselViewDelegator2_DraggingEnded;
		xamarin_registrar_dlsym ((void **) &callback_204_Microsoft_Maui_Controls_Handlers_Items2_CarouselViewDelegator2_DraggingEnded, "Microsoft.Maui.Controls", "callback_204_Microsoft_Maui_Controls_Handlers_Items2_CarouselViewDelegator2_DraggingEnded", 203);
		callback_204_Microsoft_Maui_Controls_Handlers_Items2_CarouselViewDelegator2_DraggingEnded (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}
@end

@implementation Microsoft_Maui_Controls_Handlers_Items2_ItemsViewCell2 {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}

	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef id (*callback_213_Microsoft_Maui_Controls_Handlers_Items2_ItemsViewCell2__ctor_function) (id self, SEL sel, CGRect p0, bool* call_super, GCHandle* exception_gchandle);
	-(id) initWithFrame:(CGRect)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_213_Microsoft_Maui_Controls_Handlers_Items2_ItemsViewCell2__ctor_function callback_213_Microsoft_Maui_Controls_Handlers_Items2_ItemsViewCell2__ctor;
		xamarin_registrar_dlsym ((void **) &callback_213_Microsoft_Maui_Controls_Handlers_Items2_ItemsViewCell2__ctor, "Microsoft.Maui.Controls", "callback_213_Microsoft_Maui_Controls_Handlers_Items2_ItemsViewCell2__ctor", 212);
		rv = callback_213_Microsoft_Maui_Controls_Handlers_Items2_ItemsViewCell2__ctor (self, _cmd, p0, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [UICollectionViewCell class] };
			rv = ((id (*)(objc_super*, SEL, CGRect)) objc_msgSendSuper) (&super, @selector (initWithFrame:), p0);
		}
		return rv;
	}
@end

@implementation Microsoft_Maui_Controls_Handlers_Items2_DefaultCell2 {
}

	typedef id (*callback_205_Microsoft_Maui_Controls_Handlers_Items2_DefaultCell2__ctor_function) (id self, SEL sel, CGRect p0, bool* call_super, GCHandle* exception_gchandle);
	-(id) initWithFrame:(CGRect)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_205_Microsoft_Maui_Controls_Handlers_Items2_DefaultCell2__ctor_function callback_205_Microsoft_Maui_Controls_Handlers_Items2_DefaultCell2__ctor;
		xamarin_registrar_dlsym ((void **) &callback_205_Microsoft_Maui_Controls_Handlers_Items2_DefaultCell2__ctor, "Microsoft.Maui.Controls", "callback_205_Microsoft_Maui_Controls_Handlers_Items2_DefaultCell2__ctor", 204);
		rv = callback_205_Microsoft_Maui_Controls_Handlers_Items2_DefaultCell2__ctor (self, _cmd, p0, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [Microsoft_Maui_Controls_Handlers_Items2_ItemsViewCell2 class] };
			rv = ((id (*)(objc_super*, SEL, CGRect)) objc_msgSendSuper) (&super, @selector (initWithFrame:), p0);
		}
		return rv;
	}
@end

@implementation Microsoft_Maui_Controls_Handlers_Items2_ItemsViewController2_1 {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	typedef UICollectionViewCell * (*callback_214_Microsoft_Maui_Controls_Handlers_Items2_ItemsViewController2_1_GetCell_function) (id self, SEL sel, UICollectionView * p0, NSIndexPath * p1, GCHandle* exception_gchandle);
	-(UICollectionViewCell *) collectionView:(UICollectionView *)p0 cellForItemAtIndexPath:(NSIndexPath *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		UICollectionViewCell * rv = { 0 };
		static callback_214_Microsoft_Maui_Controls_Handlers_Items2_ItemsViewController2_1_GetCell_function callback_214_Microsoft_Maui_Controls_Handlers_Items2_ItemsViewController2_1_GetCell;
		xamarin_registrar_dlsym ((void **) &callback_214_Microsoft_Maui_Controls_Handlers_Items2_ItemsViewController2_1_GetCell, "Microsoft.Maui.Controls", "callback_214_Microsoft_Maui_Controls_Handlers_Items2_ItemsViewController2_1_GetCell", 213);
		rv = callback_214_Microsoft_Maui_Controls_Handlers_Items2_ItemsViewController2_1_GetCell (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef void * (*callback_215_Microsoft_Maui_Controls_Handlers_Items2_ItemsViewController2_1_GetItemsCount_function) (id self, SEL sel, UICollectionView * p0, void * p1, GCHandle* exception_gchandle);
	-(void *) collectionView:(UICollectionView *)p0 numberOfItemsInSection:(void *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		void * rv = { 0 };
		static callback_215_Microsoft_Maui_Controls_Handlers_Items2_ItemsViewController2_1_GetItemsCount_function callback_215_Microsoft_Maui_Controls_Handlers_Items2_ItemsViewController2_1_GetItemsCount;
		xamarin_registrar_dlsym ((void **) &callback_215_Microsoft_Maui_Controls_Handlers_Items2_ItemsViewController2_1_GetItemsCount, "Microsoft.Maui.Controls", "callback_215_Microsoft_Maui_Controls_Handlers_Items2_ItemsViewController2_1_GetItemsCount", 214);
		rv = callback_215_Microsoft_Maui_Controls_Handlers_Items2_ItemsViewController2_1_GetItemsCount (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef void (*callback_216_Microsoft_Maui_Controls_Handlers_Items2_ItemsViewController2_1_ViewDidLoad_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) viewDidLoad
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_216_Microsoft_Maui_Controls_Handlers_Items2_ItemsViewController2_1_ViewDidLoad_function callback_216_Microsoft_Maui_Controls_Handlers_Items2_ItemsViewController2_1_ViewDidLoad;
		xamarin_registrar_dlsym ((void **) &callback_216_Microsoft_Maui_Controls_Handlers_Items2_ItemsViewController2_1_ViewDidLoad, "Microsoft.Maui.Controls", "callback_216_Microsoft_Maui_Controls_Handlers_Items2_ItemsViewController2_1_ViewDidLoad", 215);
		callback_216_Microsoft_Maui_Controls_Handlers_Items2_ItemsViewController2_1_ViewDidLoad (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_217_Microsoft_Maui_Controls_Handlers_Items2_ItemsViewController2_1_LoadView_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) loadView
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_217_Microsoft_Maui_Controls_Handlers_Items2_ItemsViewController2_1_LoadView_function callback_217_Microsoft_Maui_Controls_Handlers_Items2_ItemsViewController2_1_LoadView;
		xamarin_registrar_dlsym ((void **) &callback_217_Microsoft_Maui_Controls_Handlers_Items2_ItemsViewController2_1_LoadView, "Microsoft.Maui.Controls", "callback_217_Microsoft_Maui_Controls_Handlers_Items2_ItemsViewController2_1_LoadView", 216);
		callback_217_Microsoft_Maui_Controls_Handlers_Items2_ItemsViewController2_1_LoadView (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_218_Microsoft_Maui_Controls_Handlers_Items2_ItemsViewController2_1_ViewWillLayoutSubviews_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) viewWillLayoutSubviews
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_218_Microsoft_Maui_Controls_Handlers_Items2_ItemsViewController2_1_ViewWillLayoutSubviews_function callback_218_Microsoft_Maui_Controls_Handlers_Items2_ItemsViewController2_1_ViewWillLayoutSubviews;
		xamarin_registrar_dlsym ((void **) &callback_218_Microsoft_Maui_Controls_Handlers_Items2_ItemsViewController2_1_ViewWillLayoutSubviews, "Microsoft.Maui.Controls", "callback_218_Microsoft_Maui_Controls_Handlers_Items2_ItemsViewController2_1_ViewWillLayoutSubviews", 217);
		callback_218_Microsoft_Maui_Controls_Handlers_Items2_ItemsViewController2_1_ViewWillLayoutSubviews (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void * (*callback_219_Microsoft_Maui_Controls_Handlers_Items2_ItemsViewController2_1_NumberOfSections_function) (id self, SEL sel, UICollectionView * p0, GCHandle* exception_gchandle);
	-(void *) numberOfSectionsInCollectionView:(UICollectionView *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		void * rv = { 0 };
		static callback_219_Microsoft_Maui_Controls_Handlers_Items2_ItemsViewController2_1_NumberOfSections_function callback_219_Microsoft_Maui_Controls_Handlers_Items2_ItemsViewController2_1_NumberOfSections;
		xamarin_registrar_dlsym ((void **) &callback_219_Microsoft_Maui_Controls_Handlers_Items2_ItemsViewController2_1_NumberOfSections, "Microsoft.Maui.Controls", "callback_219_Microsoft_Maui_Controls_Handlers_Items2_ItemsViewController2_1_NumberOfSections", 218);
		rv = callback_219_Microsoft_Maui_Controls_Handlers_Items2_ItemsViewController2_1_NumberOfSections (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
@end

@implementation Microsoft_Maui_Controls_Handlers_Items2_StructuredItemsViewController2_1 {
}

	typedef UICollectionReusableView * (*callback_233_Microsoft_Maui_Controls_Handlers_Items2_StructuredItemsViewController2_1_GetViewForSupplementaryElement_function) (id self, SEL sel, UICollectionView * p0, NSString * p1, NSIndexPath * p2, GCHandle* exception_gchandle);
	-(UICollectionReusableView *) collectionView:(UICollectionView *)p0 viewForSupplementaryElementOfKind:(NSString *)p1 atIndexPath:(NSIndexPath *)p2
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		UICollectionReusableView * rv = { 0 };
		static callback_233_Microsoft_Maui_Controls_Handlers_Items2_StructuredItemsViewController2_1_GetViewForSupplementaryElement_function callback_233_Microsoft_Maui_Controls_Handlers_Items2_StructuredItemsViewController2_1_GetViewForSupplementaryElement;
		xamarin_registrar_dlsym ((void **) &callback_233_Microsoft_Maui_Controls_Handlers_Items2_StructuredItemsViewController2_1_GetViewForSupplementaryElement, "Microsoft.Maui.Controls", "callback_233_Microsoft_Maui_Controls_Handlers_Items2_StructuredItemsViewController2_1_GetViewForSupplementaryElement", 232);
		rv = callback_233_Microsoft_Maui_Controls_Handlers_Items2_StructuredItemsViewController2_1_GetViewForSupplementaryElement (self, _cmd, p0, p1, p2, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef void (*callback_234_Microsoft_Maui_Controls_Handlers_Items2_StructuredItemsViewController2_1_ViewWillLayoutSubviews_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) viewWillLayoutSubviews
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_234_Microsoft_Maui_Controls_Handlers_Items2_StructuredItemsViewController2_1_ViewWillLayoutSubviews_function callback_234_Microsoft_Maui_Controls_Handlers_Items2_StructuredItemsViewController2_1_ViewWillLayoutSubviews;
		xamarin_registrar_dlsym ((void **) &callback_234_Microsoft_Maui_Controls_Handlers_Items2_StructuredItemsViewController2_1_ViewWillLayoutSubviews, "Microsoft.Maui.Controls", "callback_234_Microsoft_Maui_Controls_Handlers_Items2_StructuredItemsViewController2_1_ViewWillLayoutSubviews", 233);
		callback_234_Microsoft_Maui_Controls_Handlers_Items2_StructuredItemsViewController2_1_ViewWillLayoutSubviews (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}
@end

@implementation Microsoft_Maui_Controls_Handlers_Items2_SelectableItemsViewController2_1 {
}

	typedef void (*callback_229_Microsoft_Maui_Controls_Handlers_Items2_SelectableItemsViewController2_1_ItemSelected_function) (id self, SEL sel, UICollectionView * p0, NSIndexPath * p1, GCHandle* exception_gchandle);
	-(void) collectionView:(UICollectionView *)p0 didSelectItemAtIndexPath:(NSIndexPath *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_229_Microsoft_Maui_Controls_Handlers_Items2_SelectableItemsViewController2_1_ItemSelected_function callback_229_Microsoft_Maui_Controls_Handlers_Items2_SelectableItemsViewController2_1_ItemSelected;
		xamarin_registrar_dlsym ((void **) &callback_229_Microsoft_Maui_Controls_Handlers_Items2_SelectableItemsViewController2_1_ItemSelected, "Microsoft.Maui.Controls", "callback_229_Microsoft_Maui_Controls_Handlers_Items2_SelectableItemsViewController2_1_ItemSelected", 228);
		callback_229_Microsoft_Maui_Controls_Handlers_Items2_SelectableItemsViewController2_1_ItemSelected (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_230_Microsoft_Maui_Controls_Handlers_Items2_SelectableItemsViewController2_1_ItemDeselected_function) (id self, SEL sel, UICollectionView * p0, NSIndexPath * p1, GCHandle* exception_gchandle);
	-(void) collectionView:(UICollectionView *)p0 didDeselectItemAtIndexPath:(NSIndexPath *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_230_Microsoft_Maui_Controls_Handlers_Items2_SelectableItemsViewController2_1_ItemDeselected_function callback_230_Microsoft_Maui_Controls_Handlers_Items2_SelectableItemsViewController2_1_ItemDeselected;
		xamarin_registrar_dlsym ((void **) &callback_230_Microsoft_Maui_Controls_Handlers_Items2_SelectableItemsViewController2_1_ItemDeselected, "Microsoft.Maui.Controls", "callback_230_Microsoft_Maui_Controls_Handlers_Items2_SelectableItemsViewController2_1_ItemDeselected", 229);
		callback_230_Microsoft_Maui_Controls_Handlers_Items2_SelectableItemsViewController2_1_ItemDeselected (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}
@end

@implementation Microsoft_Maui_Controls_Handlers_Items2_GroupableItemsViewController2_1 {
}

	typedef UICollectionReusableView * (*callback_206_Microsoft_Maui_Controls_Handlers_Items2_GroupableItemsViewController2_1_GetViewForSupplementaryElement_function) (id self, SEL sel, UICollectionView * p0, NSString * p1, NSIndexPath * p2, GCHandle* exception_gchandle);
	-(UICollectionReusableView *) collectionView:(UICollectionView *)p0 viewForSupplementaryElementOfKind:(NSString *)p1 atIndexPath:(NSIndexPath *)p2
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		UICollectionReusableView * rv = { 0 };
		static callback_206_Microsoft_Maui_Controls_Handlers_Items2_GroupableItemsViewController2_1_GetViewForSupplementaryElement_function callback_206_Microsoft_Maui_Controls_Handlers_Items2_GroupableItemsViewController2_1_GetViewForSupplementaryElement;
		xamarin_registrar_dlsym ((void **) &callback_206_Microsoft_Maui_Controls_Handlers_Items2_GroupableItemsViewController2_1_GetViewForSupplementaryElement, "Microsoft.Maui.Controls", "callback_206_Microsoft_Maui_Controls_Handlers_Items2_GroupableItemsViewController2_1_GetViewForSupplementaryElement", 205);
		rv = callback_206_Microsoft_Maui_Controls_Handlers_Items2_GroupableItemsViewController2_1_GetViewForSupplementaryElement (self, _cmd, p0, p1, p2, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
@end

@implementation Microsoft_Maui_Controls_Handlers_Items2_SelectableItemsViewDelegator2_2 {
}

	typedef void (*callback_231_Microsoft_Maui_Controls_Handlers_Items2_SelectableItemsViewDelegator2_2_ItemSelected_function) (id self, SEL sel, UICollectionView * p0, NSIndexPath * p1, GCHandle* exception_gchandle);
	-(void) collectionView:(UICollectionView *)p0 didSelectItemAtIndexPath:(NSIndexPath *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_231_Microsoft_Maui_Controls_Handlers_Items2_SelectableItemsViewDelegator2_2_ItemSelected_function callback_231_Microsoft_Maui_Controls_Handlers_Items2_SelectableItemsViewDelegator2_2_ItemSelected;
		xamarin_registrar_dlsym ((void **) &callback_231_Microsoft_Maui_Controls_Handlers_Items2_SelectableItemsViewDelegator2_2_ItemSelected, "Microsoft.Maui.Controls", "callback_231_Microsoft_Maui_Controls_Handlers_Items2_SelectableItemsViewDelegator2_2_ItemSelected", 230);
		callback_231_Microsoft_Maui_Controls_Handlers_Items2_SelectableItemsViewDelegator2_2_ItemSelected (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_232_Microsoft_Maui_Controls_Handlers_Items2_SelectableItemsViewDelegator2_2_ItemDeselected_function) (id self, SEL sel, UICollectionView * p0, NSIndexPath * p1, GCHandle* exception_gchandle);
	-(void) collectionView:(UICollectionView *)p0 didDeselectItemAtIndexPath:(NSIndexPath *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_232_Microsoft_Maui_Controls_Handlers_Items2_SelectableItemsViewDelegator2_2_ItemDeselected_function callback_232_Microsoft_Maui_Controls_Handlers_Items2_SelectableItemsViewDelegator2_2_ItemDeselected;
		xamarin_registrar_dlsym ((void **) &callback_232_Microsoft_Maui_Controls_Handlers_Items2_SelectableItemsViewDelegator2_2_ItemDeselected, "Microsoft.Maui.Controls", "callback_232_Microsoft_Maui_Controls_Handlers_Items2_SelectableItemsViewDelegator2_2_ItemDeselected", 231);
		callback_232_Microsoft_Maui_Controls_Handlers_Items2_SelectableItemsViewDelegator2_2_ItemDeselected (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}
@end

@implementation Microsoft_Maui_Controls_Handlers_Items2_GroupableItemsViewDelegator2_2 {
}

	typedef void (*callback_207_Microsoft_Maui_Controls_Handlers_Items2_GroupableItemsViewDelegator2_2_ScrollAnimationEnded_function) (id self, SEL sel, UIScrollView * p0, GCHandle* exception_gchandle);
	-(void) scrollViewDidEndScrollingAnimation:(UIScrollView *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_207_Microsoft_Maui_Controls_Handlers_Items2_GroupableItemsViewDelegator2_2_ScrollAnimationEnded_function callback_207_Microsoft_Maui_Controls_Handlers_Items2_GroupableItemsViewDelegator2_2_ScrollAnimationEnded;
		xamarin_registrar_dlsym ((void **) &callback_207_Microsoft_Maui_Controls_Handlers_Items2_GroupableItemsViewDelegator2_2_ScrollAnimationEnded, "Microsoft.Maui.Controls", "callback_207_Microsoft_Maui_Controls_Handlers_Items2_GroupableItemsViewDelegator2_2_ScrollAnimationEnded", 206);
		callback_207_Microsoft_Maui_Controls_Handlers_Items2_GroupableItemsViewDelegator2_2_ScrollAnimationEnded (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}
@end

@implementation Microsoft_Maui_Controls_Handlers_Items2_TemplatedCell2 {
}

	typedef UICollectionViewLayoutAttributes * (*callback_236_Microsoft_Maui_Controls_Handlers_Items2_TemplatedCell2_PreferredLayoutAttributesFittingAttributes_function) (id self, SEL sel, UICollectionViewLayoutAttributes * p0, GCHandle* exception_gchandle);
	-(UICollectionViewLayoutAttributes *) preferredLayoutAttributesFittingAttributes:(UICollectionViewLayoutAttributes *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		UICollectionViewLayoutAttributes * rv = { 0 };
		static callback_236_Microsoft_Maui_Controls_Handlers_Items2_TemplatedCell2_PreferredLayoutAttributesFittingAttributes_function callback_236_Microsoft_Maui_Controls_Handlers_Items2_TemplatedCell2_PreferredLayoutAttributesFittingAttributes;
		xamarin_registrar_dlsym ((void **) &callback_236_Microsoft_Maui_Controls_Handlers_Items2_TemplatedCell2_PreferredLayoutAttributesFittingAttributes, "Microsoft.Maui.Controls", "callback_236_Microsoft_Maui_Controls_Handlers_Items2_TemplatedCell2_PreferredLayoutAttributesFittingAttributes", 235);
		rv = callback_236_Microsoft_Maui_Controls_Handlers_Items2_TemplatedCell2_PreferredLayoutAttributesFittingAttributes (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef void (*callback_237_Microsoft_Maui_Controls_Handlers_Items2_TemplatedCell2_PrepareForReuse_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) prepareForReuse
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_237_Microsoft_Maui_Controls_Handlers_Items2_TemplatedCell2_PrepareForReuse_function callback_237_Microsoft_Maui_Controls_Handlers_Items2_TemplatedCell2_PrepareForReuse;
		xamarin_registrar_dlsym ((void **) &callback_237_Microsoft_Maui_Controls_Handlers_Items2_TemplatedCell2_PrepareForReuse, "Microsoft.Maui.Controls", "callback_237_Microsoft_Maui_Controls_Handlers_Items2_TemplatedCell2_PrepareForReuse", 236);
		callback_237_Microsoft_Maui_Controls_Handlers_Items2_TemplatedCell2_PrepareForReuse (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef BOOL (*callback_238_Microsoft_Maui_Controls_Handlers_Items2_TemplatedCell2_get_Selected_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(BOOL) isSelected
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		BOOL rv = { 0 };
		static callback_238_Microsoft_Maui_Controls_Handlers_Items2_TemplatedCell2_get_Selected_function callback_238_Microsoft_Maui_Controls_Handlers_Items2_TemplatedCell2_get_Selected;
		xamarin_registrar_dlsym ((void **) &callback_238_Microsoft_Maui_Controls_Handlers_Items2_TemplatedCell2_get_Selected, "Microsoft.Maui.Controls", "callback_238_Microsoft_Maui_Controls_Handlers_Items2_TemplatedCell2_get_Selected", 237);
		rv = callback_238_Microsoft_Maui_Controls_Handlers_Items2_TemplatedCell2_get_Selected (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef void (*callback_239_Microsoft_Maui_Controls_Handlers_Items2_TemplatedCell2_set_Selected_function) (id self, SEL sel, BOOL p0, GCHandle* exception_gchandle);
	-(void) setSelected:(BOOL)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_239_Microsoft_Maui_Controls_Handlers_Items2_TemplatedCell2_set_Selected_function callback_239_Microsoft_Maui_Controls_Handlers_Items2_TemplatedCell2_set_Selected;
		xamarin_registrar_dlsym ((void **) &callback_239_Microsoft_Maui_Controls_Handlers_Items2_TemplatedCell2_set_Selected, "Microsoft.Maui.Controls", "callback_239_Microsoft_Maui_Controls_Handlers_Items2_TemplatedCell2_set_Selected", 238);
		callback_239_Microsoft_Maui_Controls_Handlers_Items2_TemplatedCell2_set_Selected (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef id (*callback_235_Microsoft_Maui_Controls_Handlers_Items2_TemplatedCell2__ctor_function) (id self, SEL sel, CGRect p0, bool* call_super, GCHandle* exception_gchandle);
	-(id) initWithFrame:(CGRect)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_235_Microsoft_Maui_Controls_Handlers_Items2_TemplatedCell2__ctor_function callback_235_Microsoft_Maui_Controls_Handlers_Items2_TemplatedCell2__ctor;
		xamarin_registrar_dlsym ((void **) &callback_235_Microsoft_Maui_Controls_Handlers_Items2_TemplatedCell2__ctor, "Microsoft.Maui.Controls", "callback_235_Microsoft_Maui_Controls_Handlers_Items2_TemplatedCell2__ctor", 234);
		rv = callback_235_Microsoft_Maui_Controls_Handlers_Items2_TemplatedCell2__ctor (self, _cmd, p0, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [Microsoft_Maui_Controls_Handlers_Items2_ItemsViewCell2 class] };
			rv = ((id (*)(objc_super*, SEL, CGRect)) objc_msgSendSuper) (&super, @selector (initWithFrame:), p0);
		}
		return rv;
	}
@end

@interface Microsoft_Maui_Controls_Handlers_Items2_HeightConstrainedTemplatedCell2 : Microsoft_Maui_Controls_Handlers_Items2_TemplatedCell2 {
}
	-(id) initWithFrame:(CGRect)p0;
@end

@implementation Microsoft_Maui_Controls_Handlers_Items2_HeightConstrainedTemplatedCell2 {
}

	typedef id (*callback_208_Microsoft_Maui_Controls_Handlers_Items2_HeightConstrainedTemplatedCell2__ctor_function) (id self, SEL sel, CGRect p0, bool* call_super, GCHandle* exception_gchandle);
	-(id) initWithFrame:(CGRect)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_208_Microsoft_Maui_Controls_Handlers_Items2_HeightConstrainedTemplatedCell2__ctor_function callback_208_Microsoft_Maui_Controls_Handlers_Items2_HeightConstrainedTemplatedCell2__ctor;
		xamarin_registrar_dlsym ((void **) &callback_208_Microsoft_Maui_Controls_Handlers_Items2_HeightConstrainedTemplatedCell2__ctor, "Microsoft.Maui.Controls", "callback_208_Microsoft_Maui_Controls_Handlers_Items2_HeightConstrainedTemplatedCell2__ctor", 207);
		rv = callback_208_Microsoft_Maui_Controls_Handlers_Items2_HeightConstrainedTemplatedCell2__ctor (self, _cmd, p0, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [Microsoft_Maui_Controls_Handlers_Items2_TemplatedCell2 class] };
			rv = ((id (*)(objc_super*, SEL, CGRect)) objc_msgSendSuper) (&super, @selector (initWithFrame:), p0);
		}
		return rv;
	}
@end

@interface Microsoft_Maui_Controls_Handlers_Items2_HorizontalCell2 : Microsoft_Maui_Controls_Handlers_Items2_HeightConstrainedTemplatedCell2 {
}
	-(id) initWithFrame:(CGRect)p0;
@end

@implementation Microsoft_Maui_Controls_Handlers_Items2_HorizontalCell2 {
}

	typedef id (*callback_209_Microsoft_Maui_Controls_Handlers_Items2_HorizontalCell2__ctor_function) (id self, SEL sel, CGRect p0, bool* call_super, GCHandle* exception_gchandle);
	-(id) initWithFrame:(CGRect)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_209_Microsoft_Maui_Controls_Handlers_Items2_HorizontalCell2__ctor_function callback_209_Microsoft_Maui_Controls_Handlers_Items2_HorizontalCell2__ctor;
		xamarin_registrar_dlsym ((void **) &callback_209_Microsoft_Maui_Controls_Handlers_Items2_HorizontalCell2__ctor, "Microsoft.Maui.Controls", "callback_209_Microsoft_Maui_Controls_Handlers_Items2_HorizontalCell2__ctor", 208);
		rv = callback_209_Microsoft_Maui_Controls_Handlers_Items2_HorizontalCell2__ctor (self, _cmd, p0, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [Microsoft_Maui_Controls_Handlers_Items2_HeightConstrainedTemplatedCell2 class] };
			rv = ((id (*)(objc_super*, SEL, CGRect)) objc_msgSendSuper) (&super, @selector (initWithFrame:), p0);
		}
		return rv;
	}
@end

@interface Microsoft_Maui_Controls_Handlers_Items2_HorizontalDefaultCell2 : Microsoft_Maui_Controls_Handlers_Items2_DefaultCell2 {
}
	-(id) initWithFrame:(CGRect)p0;
@end

@implementation Microsoft_Maui_Controls_Handlers_Items2_HorizontalDefaultCell2 {
}

	typedef id (*callback_210_Microsoft_Maui_Controls_Handlers_Items2_HorizontalDefaultCell2__ctor_function) (id self, SEL sel, CGRect p0, bool* call_super, GCHandle* exception_gchandle);
	-(id) initWithFrame:(CGRect)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_210_Microsoft_Maui_Controls_Handlers_Items2_HorizontalDefaultCell2__ctor_function callback_210_Microsoft_Maui_Controls_Handlers_Items2_HorizontalDefaultCell2__ctor;
		xamarin_registrar_dlsym ((void **) &callback_210_Microsoft_Maui_Controls_Handlers_Items2_HorizontalDefaultCell2__ctor, "Microsoft.Maui.Controls", "callback_210_Microsoft_Maui_Controls_Handlers_Items2_HorizontalDefaultCell2__ctor", 209);
		rv = callback_210_Microsoft_Maui_Controls_Handlers_Items2_HorizontalDefaultCell2__ctor (self, _cmd, p0, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [Microsoft_Maui_Controls_Handlers_Items2_DefaultCell2 class] };
			rv = ((id (*)(objc_super*, SEL, CGRect)) objc_msgSendSuper) (&super, @selector (initWithFrame:), p0);
		}
		return rv;
	}
@end

@interface Microsoft_Maui_Controls_Handlers_Items2_HorizontalDefaultSupplementalView2 : Microsoft_Maui_Controls_Handlers_Items2_DefaultCell2 {
}
	-(id) initWithFrame:(CGRect)p0;
@end

@implementation Microsoft_Maui_Controls_Handlers_Items2_HorizontalDefaultSupplementalView2 {
}

	typedef id (*callback_211_Microsoft_Maui_Controls_Handlers_Items2_HorizontalDefaultSupplementalView2__ctor_function) (id self, SEL sel, CGRect p0, bool* call_super, GCHandle* exception_gchandle);
	-(id) initWithFrame:(CGRect)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_211_Microsoft_Maui_Controls_Handlers_Items2_HorizontalDefaultSupplementalView2__ctor_function callback_211_Microsoft_Maui_Controls_Handlers_Items2_HorizontalDefaultSupplementalView2__ctor;
		xamarin_registrar_dlsym ((void **) &callback_211_Microsoft_Maui_Controls_Handlers_Items2_HorizontalDefaultSupplementalView2__ctor, "Microsoft.Maui.Controls", "callback_211_Microsoft_Maui_Controls_Handlers_Items2_HorizontalDefaultSupplementalView2__ctor", 210);
		rv = callback_211_Microsoft_Maui_Controls_Handlers_Items2_HorizontalDefaultSupplementalView2__ctor (self, _cmd, p0, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [Microsoft_Maui_Controls_Handlers_Items2_DefaultCell2 class] };
			rv = ((id (*)(objc_super*, SEL, CGRect)) objc_msgSendSuper) (&super, @selector (initWithFrame:), p0);
		}
		return rv;
	}
@end

@interface Microsoft_Maui_Controls_Handlers_Items2_HorizontalSupplementaryView2 : Microsoft_Maui_Controls_Handlers_Items2_HeightConstrainedTemplatedCell2 {
}
	-(id) initWithFrame:(CGRect)p0;
@end

@implementation Microsoft_Maui_Controls_Handlers_Items2_HorizontalSupplementaryView2 {
}

	typedef id (*callback_212_Microsoft_Maui_Controls_Handlers_Items2_HorizontalSupplementaryView2__ctor_function) (id self, SEL sel, CGRect p0, bool* call_super, GCHandle* exception_gchandle);
	-(id) initWithFrame:(CGRect)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_212_Microsoft_Maui_Controls_Handlers_Items2_HorizontalSupplementaryView2__ctor_function callback_212_Microsoft_Maui_Controls_Handlers_Items2_HorizontalSupplementaryView2__ctor;
		xamarin_registrar_dlsym ((void **) &callback_212_Microsoft_Maui_Controls_Handlers_Items2_HorizontalSupplementaryView2__ctor, "Microsoft.Maui.Controls", "callback_212_Microsoft_Maui_Controls_Handlers_Items2_HorizontalSupplementaryView2__ctor", 211);
		rv = callback_212_Microsoft_Maui_Controls_Handlers_Items2_HorizontalSupplementaryView2__ctor (self, _cmd, p0, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [Microsoft_Maui_Controls_Handlers_Items2_HeightConstrainedTemplatedCell2 class] };
			rv = ((id (*)(objc_super*, SEL, CGRect)) objc_msgSendSuper) (&super, @selector (initWithFrame:), p0);
		}
		return rv;
	}
@end

@implementation Microsoft_Maui_Controls_Handlers_Items2_ReorderableItemsViewController2_1 {
}

	typedef BOOL (*callback_226_Microsoft_Maui_Controls_Handlers_Items2_ReorderableItemsViewController2_1_CanMoveItem_function) (id self, SEL sel, UICollectionView * p0, NSIndexPath * p1, GCHandle* exception_gchandle);
	-(BOOL) collectionView:(UICollectionView *)p0 canMoveItemAtIndexPath:(NSIndexPath *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		BOOL rv = { 0 };
		static callback_226_Microsoft_Maui_Controls_Handlers_Items2_ReorderableItemsViewController2_1_CanMoveItem_function callback_226_Microsoft_Maui_Controls_Handlers_Items2_ReorderableItemsViewController2_1_CanMoveItem;
		xamarin_registrar_dlsym ((void **) &callback_226_Microsoft_Maui_Controls_Handlers_Items2_ReorderableItemsViewController2_1_CanMoveItem, "Microsoft.Maui.Controls", "callback_226_Microsoft_Maui_Controls_Handlers_Items2_ReorderableItemsViewController2_1_CanMoveItem", 225);
		rv = callback_226_Microsoft_Maui_Controls_Handlers_Items2_ReorderableItemsViewController2_1_CanMoveItem (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef void (*callback_227_Microsoft_Maui_Controls_Handlers_Items2_ReorderableItemsViewController2_1_MoveItem_function) (id self, SEL sel, UICollectionView * p0, NSIndexPath * p1, NSIndexPath * p2, GCHandle* exception_gchandle);
	-(void) collectionView:(UICollectionView *)p0 moveItemAtIndexPath:(NSIndexPath *)p1 toIndexPath:(NSIndexPath *)p2
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_227_Microsoft_Maui_Controls_Handlers_Items2_ReorderableItemsViewController2_1_MoveItem_function callback_227_Microsoft_Maui_Controls_Handlers_Items2_ReorderableItemsViewController2_1_MoveItem;
		xamarin_registrar_dlsym ((void **) &callback_227_Microsoft_Maui_Controls_Handlers_Items2_ReorderableItemsViewController2_1_MoveItem, "Microsoft.Maui.Controls", "callback_227_Microsoft_Maui_Controls_Handlers_Items2_ReorderableItemsViewController2_1_MoveItem", 226);
		callback_227_Microsoft_Maui_Controls_Handlers_Items2_ReorderableItemsViewController2_1_MoveItem (self, _cmd, p0, p1, p2, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}
@end

@implementation Microsoft_Maui_Controls_Handlers_Items2_ReorderableItemsViewDelegator2_2 {
}

	typedef NSIndexPath * (*callback_228_Microsoft_Maui_Controls_Handlers_Items2_ReorderableItemsViewDelegator2_2_GetTargetIndexPathForMove_function) (id self, SEL sel, UICollectionView * p0, NSIndexPath * p1, NSIndexPath * p2, GCHandle* exception_gchandle);
	-(NSIndexPath *) collectionView:(UICollectionView *)p0 targetIndexPathForMoveFromItemAtIndexPath:(NSIndexPath *)p1 toProposedIndexPath:(NSIndexPath *)p2
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		NSIndexPath * rv = { 0 };
		static callback_228_Microsoft_Maui_Controls_Handlers_Items2_ReorderableItemsViewDelegator2_2_GetTargetIndexPathForMove_function callback_228_Microsoft_Maui_Controls_Handlers_Items2_ReorderableItemsViewDelegator2_2_GetTargetIndexPathForMove;
		xamarin_registrar_dlsym ((void **) &callback_228_Microsoft_Maui_Controls_Handlers_Items2_ReorderableItemsViewDelegator2_2_GetTargetIndexPathForMove, "Microsoft.Maui.Controls", "callback_228_Microsoft_Maui_Controls_Handlers_Items2_ReorderableItemsViewDelegator2_2_GetTargetIndexPathForMove", 227);
		rv = callback_228_Microsoft_Maui_Controls_Handlers_Items2_ReorderableItemsViewDelegator2_2_GetTargetIndexPathForMove (self, _cmd, p0, p1, p2, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
@end

@interface Microsoft_Maui_Controls_Handlers_Items2_UIContainerView2 : UIView {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(void) layoutSubviews;
	-(CGSize) sizeThatFits:(CGSize)p0;
	-(BOOL) conformsToProtocol:(void *)p0;
@end

@implementation Microsoft_Maui_Controls_Handlers_Items2_UIContainerView2 {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	typedef void (*callback_240_Microsoft_Maui_Controls_Handlers_Items2_UIContainerView2_LayoutSubviews_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) layoutSubviews
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_240_Microsoft_Maui_Controls_Handlers_Items2_UIContainerView2_LayoutSubviews_function callback_240_Microsoft_Maui_Controls_Handlers_Items2_UIContainerView2_LayoutSubviews;
		xamarin_registrar_dlsym ((void **) &callback_240_Microsoft_Maui_Controls_Handlers_Items2_UIContainerView2_LayoutSubviews, "Microsoft.Maui.Controls", "callback_240_Microsoft_Maui_Controls_Handlers_Items2_UIContainerView2_LayoutSubviews", 239);
		callback_240_Microsoft_Maui_Controls_Handlers_Items2_UIContainerView2_LayoutSubviews (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef CGSize (*callback_241_Microsoft_Maui_Controls_Handlers_Items2_UIContainerView2_SizeThatFits_function) (id self, SEL sel, CGSize p0, GCHandle* exception_gchandle);
	-(CGSize) sizeThatFits:(CGSize)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		CGSize rv = { 0 };
		static callback_241_Microsoft_Maui_Controls_Handlers_Items2_UIContainerView2_SizeThatFits_function callback_241_Microsoft_Maui_Controls_Handlers_Items2_UIContainerView2_SizeThatFits;
		xamarin_registrar_dlsym ((void **) &callback_241_Microsoft_Maui_Controls_Handlers_Items2_UIContainerView2_SizeThatFits, "Microsoft.Maui.Controls", "callback_241_Microsoft_Maui_Controls_Handlers_Items2_UIContainerView2_SizeThatFits", 240);
		rv = callback_241_Microsoft_Maui_Controls_Handlers_Items2_UIContainerView2_SizeThatFits (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
@end

@interface Microsoft_Maui_Controls_Handlers_Items2_WidthConstrainedTemplatedCell2 : Microsoft_Maui_Controls_Handlers_Items2_TemplatedCell2 {
}
	-(id) initWithFrame:(CGRect)p0;
@end

@implementation Microsoft_Maui_Controls_Handlers_Items2_WidthConstrainedTemplatedCell2 {
}

	typedef id (*callback_246_Microsoft_Maui_Controls_Handlers_Items2_WidthConstrainedTemplatedCell2__ctor_function) (id self, SEL sel, CGRect p0, bool* call_super, GCHandle* exception_gchandle);
	-(id) initWithFrame:(CGRect)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_246_Microsoft_Maui_Controls_Handlers_Items2_WidthConstrainedTemplatedCell2__ctor_function callback_246_Microsoft_Maui_Controls_Handlers_Items2_WidthConstrainedTemplatedCell2__ctor;
		xamarin_registrar_dlsym ((void **) &callback_246_Microsoft_Maui_Controls_Handlers_Items2_WidthConstrainedTemplatedCell2__ctor, "Microsoft.Maui.Controls", "callback_246_Microsoft_Maui_Controls_Handlers_Items2_WidthConstrainedTemplatedCell2__ctor", 245);
		rv = callback_246_Microsoft_Maui_Controls_Handlers_Items2_WidthConstrainedTemplatedCell2__ctor (self, _cmd, p0, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [Microsoft_Maui_Controls_Handlers_Items2_TemplatedCell2 class] };
			rv = ((id (*)(objc_super*, SEL, CGRect)) objc_msgSendSuper) (&super, @selector (initWithFrame:), p0);
		}
		return rv;
	}
@end

@interface Microsoft_Maui_Controls_Handlers_Items2_VerticalCell2 : Microsoft_Maui_Controls_Handlers_Items2_WidthConstrainedTemplatedCell2 {
}
	-(id) initWithFrame:(CGRect)p0;
@end

@implementation Microsoft_Maui_Controls_Handlers_Items2_VerticalCell2 {
}

	typedef id (*callback_242_Microsoft_Maui_Controls_Handlers_Items2_VerticalCell2__ctor_function) (id self, SEL sel, CGRect p0, bool* call_super, GCHandle* exception_gchandle);
	-(id) initWithFrame:(CGRect)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_242_Microsoft_Maui_Controls_Handlers_Items2_VerticalCell2__ctor_function callback_242_Microsoft_Maui_Controls_Handlers_Items2_VerticalCell2__ctor;
		xamarin_registrar_dlsym ((void **) &callback_242_Microsoft_Maui_Controls_Handlers_Items2_VerticalCell2__ctor, "Microsoft.Maui.Controls", "callback_242_Microsoft_Maui_Controls_Handlers_Items2_VerticalCell2__ctor", 241);
		rv = callback_242_Microsoft_Maui_Controls_Handlers_Items2_VerticalCell2__ctor (self, _cmd, p0, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [Microsoft_Maui_Controls_Handlers_Items2_WidthConstrainedTemplatedCell2 class] };
			rv = ((id (*)(objc_super*, SEL, CGRect)) objc_msgSendSuper) (&super, @selector (initWithFrame:), p0);
		}
		return rv;
	}
@end

@interface Microsoft_Maui_Controls_Handlers_Items2_VerticalDefaultCell2 : Microsoft_Maui_Controls_Handlers_Items2_DefaultCell2 {
}
	-(id) initWithFrame:(CGRect)p0;
@end

@implementation Microsoft_Maui_Controls_Handlers_Items2_VerticalDefaultCell2 {
}

	typedef id (*callback_243_Microsoft_Maui_Controls_Handlers_Items2_VerticalDefaultCell2__ctor_function) (id self, SEL sel, CGRect p0, bool* call_super, GCHandle* exception_gchandle);
	-(id) initWithFrame:(CGRect)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_243_Microsoft_Maui_Controls_Handlers_Items2_VerticalDefaultCell2__ctor_function callback_243_Microsoft_Maui_Controls_Handlers_Items2_VerticalDefaultCell2__ctor;
		xamarin_registrar_dlsym ((void **) &callback_243_Microsoft_Maui_Controls_Handlers_Items2_VerticalDefaultCell2__ctor, "Microsoft.Maui.Controls", "callback_243_Microsoft_Maui_Controls_Handlers_Items2_VerticalDefaultCell2__ctor", 242);
		rv = callback_243_Microsoft_Maui_Controls_Handlers_Items2_VerticalDefaultCell2__ctor (self, _cmd, p0, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [Microsoft_Maui_Controls_Handlers_Items2_DefaultCell2 class] };
			rv = ((id (*)(objc_super*, SEL, CGRect)) objc_msgSendSuper) (&super, @selector (initWithFrame:), p0);
		}
		return rv;
	}
@end

@interface Microsoft_Maui_Controls_Handlers_Items2_VerticalDefaultSupplementalView2 : Microsoft_Maui_Controls_Handlers_Items2_DefaultCell2 {
}
	-(id) initWithFrame:(CGRect)p0;
@end

@implementation Microsoft_Maui_Controls_Handlers_Items2_VerticalDefaultSupplementalView2 {
}

	typedef id (*callback_244_Microsoft_Maui_Controls_Handlers_Items2_VerticalDefaultSupplementalView2__ctor_function) (id self, SEL sel, CGRect p0, bool* call_super, GCHandle* exception_gchandle);
	-(id) initWithFrame:(CGRect)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_244_Microsoft_Maui_Controls_Handlers_Items2_VerticalDefaultSupplementalView2__ctor_function callback_244_Microsoft_Maui_Controls_Handlers_Items2_VerticalDefaultSupplementalView2__ctor;
		xamarin_registrar_dlsym ((void **) &callback_244_Microsoft_Maui_Controls_Handlers_Items2_VerticalDefaultSupplementalView2__ctor, "Microsoft.Maui.Controls", "callback_244_Microsoft_Maui_Controls_Handlers_Items2_VerticalDefaultSupplementalView2__ctor", 243);
		rv = callback_244_Microsoft_Maui_Controls_Handlers_Items2_VerticalDefaultSupplementalView2__ctor (self, _cmd, p0, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [Microsoft_Maui_Controls_Handlers_Items2_DefaultCell2 class] };
			rv = ((id (*)(objc_super*, SEL, CGRect)) objc_msgSendSuper) (&super, @selector (initWithFrame:), p0);
		}
		return rv;
	}
@end

@interface Microsoft_Maui_Controls_Handlers_Items2_VerticalSupplementaryView2 : Microsoft_Maui_Controls_Handlers_Items2_WidthConstrainedTemplatedCell2 {
}
	-(id) initWithFrame:(CGRect)p0;
@end

@implementation Microsoft_Maui_Controls_Handlers_Items2_VerticalSupplementaryView2 {
}

	typedef id (*callback_245_Microsoft_Maui_Controls_Handlers_Items2_VerticalSupplementaryView2__ctor_function) (id self, SEL sel, CGRect p0, bool* call_super, GCHandle* exception_gchandle);
	-(id) initWithFrame:(CGRect)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_245_Microsoft_Maui_Controls_Handlers_Items2_VerticalSupplementaryView2__ctor_function callback_245_Microsoft_Maui_Controls_Handlers_Items2_VerticalSupplementaryView2__ctor;
		xamarin_registrar_dlsym ((void **) &callback_245_Microsoft_Maui_Controls_Handlers_Items2_VerticalSupplementaryView2__ctor, "Microsoft.Maui.Controls", "callback_245_Microsoft_Maui_Controls_Handlers_Items2_VerticalSupplementaryView2__ctor", 244);
		rv = callback_245_Microsoft_Maui_Controls_Handlers_Items2_VerticalSupplementaryView2__ctor (self, _cmd, p0, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [Microsoft_Maui_Controls_Handlers_Items2_WidthConstrainedTemplatedCell2 class] };
			rv = ((id (*)(objc_super*, SEL, CGRect)) objc_msgSendSuper) (&super, @selector (initWithFrame:), p0);
		}
		return rv;
	}
@end

@implementation Microsoft_Maui_Controls_Handlers_Compatibility_VisualElementRenderer_1 {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}

	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
	-(id) init
	{
		xamarin_throw_product_exception (4126, "Cannot construct an instance of the type 'Microsoft.Maui.Controls.Handlers.Compatibility.VisualElementRenderer`1' from Objective-C because the type is generic.");

		return self;
	}
@end

@implementation Microsoft_Maui_Controls_Handlers_Compatibility_ViewRenderer_2 {
}

	typedef void (*callback_271_Microsoft_Maui_Controls_Handlers_Compatibility_ViewRenderer_2_LayoutSubviews_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) layoutSubviews
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_271_Microsoft_Maui_Controls_Handlers_Compatibility_ViewRenderer_2_LayoutSubviews_function callback_271_Microsoft_Maui_Controls_Handlers_Compatibility_ViewRenderer_2_LayoutSubviews;
		xamarin_registrar_dlsym ((void **) &callback_271_Microsoft_Maui_Controls_Handlers_Compatibility_ViewRenderer_2_LayoutSubviews, "Microsoft.Maui.Controls", "callback_271_Microsoft_Maui_Controls_Handlers_Compatibility_ViewRenderer_2_LayoutSubviews", 270);
		callback_271_Microsoft_Maui_Controls_Handlers_Compatibility_ViewRenderer_2_LayoutSubviews (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_272_Microsoft_Maui_Controls_Handlers_Compatibility_ViewRenderer_2_SizeToFit_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) sizeToFit
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_272_Microsoft_Maui_Controls_Handlers_Compatibility_ViewRenderer_2_SizeToFit_function callback_272_Microsoft_Maui_Controls_Handlers_Compatibility_ViewRenderer_2_SizeToFit;
		xamarin_registrar_dlsym ((void **) &callback_272_Microsoft_Maui_Controls_Handlers_Compatibility_ViewRenderer_2_SizeToFit, "Microsoft.Maui.Controls", "callback_272_Microsoft_Maui_Controls_Handlers_Compatibility_ViewRenderer_2_SizeToFit", 271);
		callback_272_Microsoft_Maui_Controls_Handlers_Compatibility_ViewRenderer_2_SizeToFit (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef CGSize (*callback_273_Microsoft_Maui_Controls_Handlers_Compatibility_ViewRenderer_2_SizeThatFits_function) (id self, SEL sel, CGSize p0, GCHandle* exception_gchandle);
	-(CGSize) sizeThatFits:(CGSize)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		CGSize rv = { 0 };
		static callback_273_Microsoft_Maui_Controls_Handlers_Compatibility_ViewRenderer_2_SizeThatFits_function callback_273_Microsoft_Maui_Controls_Handlers_Compatibility_ViewRenderer_2_SizeThatFits;
		xamarin_registrar_dlsym ((void **) &callback_273_Microsoft_Maui_Controls_Handlers_Compatibility_ViewRenderer_2_SizeThatFits, "Microsoft.Maui.Controls", "callback_273_Microsoft_Maui_Controls_Handlers_Compatibility_ViewRenderer_2_SizeThatFits", 272);
		rv = callback_273_Microsoft_Maui_Controls_Handlers_Compatibility_ViewRenderer_2_SizeThatFits (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
	-(id) init
	{
		xamarin_throw_product_exception (4126, "Cannot construct an instance of the type 'Microsoft.Maui.Controls.Handlers.Compatibility.ViewRenderer`2' from Objective-C because the type is generic.");

		return self;
	}
@end

@implementation Microsoft_Maui_Controls_Handlers_Compatibility_ViewRenderer {
}

	typedef id (*callback_269_Microsoft_Maui_Controls_Handlers_Compatibility_ViewRenderer__ctor_function) (id self, SEL sel, bool* call_super, GCHandle* exception_gchandle);
	-(id) init
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_269_Microsoft_Maui_Controls_Handlers_Compatibility_ViewRenderer__ctor_function callback_269_Microsoft_Maui_Controls_Handlers_Compatibility_ViewRenderer__ctor;
		xamarin_registrar_dlsym ((void **) &callback_269_Microsoft_Maui_Controls_Handlers_Compatibility_ViewRenderer__ctor, "Microsoft.Maui.Controls", "callback_269_Microsoft_Maui_Controls_Handlers_Compatibility_ViewRenderer__ctor", 268);
		rv = callback_269_Microsoft_Maui_Controls_Handlers_Compatibility_ViewRenderer__ctor (self, _cmd, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [Microsoft_Maui_Controls_Handlers_Compatibility_ViewRenderer_2 class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@implementation Microsoft_Maui_Controls_Handlers_Compatibility_CellTableViewCell {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}

	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
@end

@interface Microsoft_Maui_Controls_Handlers_Compatibility_iOS7ButtonContainer : UIView {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(void) layoutSubviews;
	-(BOOL) conformsToProtocol:(void *)p0;
@end

@implementation Microsoft_Maui_Controls_Handlers_Compatibility_iOS7ButtonContainer {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	typedef void (*callback_283_Microsoft_Maui_Controls_Handlers_Compatibility_iOS7ButtonContainer_LayoutSubviews_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) layoutSubviews
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_283_Microsoft_Maui_Controls_Handlers_Compatibility_iOS7ButtonContainer_LayoutSubviews_function callback_283_Microsoft_Maui_Controls_Handlers_Compatibility_iOS7ButtonContainer_LayoutSubviews;
		xamarin_registrar_dlsym ((void **) &callback_283_Microsoft_Maui_Controls_Handlers_Compatibility_iOS7ButtonContainer_LayoutSubviews, "Microsoft.Maui.Controls", "callback_283_Microsoft_Maui_Controls_Handlers_Compatibility_iOS7ButtonContainer_LayoutSubviews", 282);
		callback_283_Microsoft_Maui_Controls_Handlers_Compatibility_iOS7ButtonContainer_LayoutSubviews (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
@end

@interface Microsoft_Maui_Controls_Handlers_Compatibility_HeaderWrapperView : UITableViewHeaderFooterView {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(void) layoutSubviews;
	-(BOOL) conformsToProtocol:(void *)p0;
@end

@implementation Microsoft_Maui_Controls_Handlers_Compatibility_HeaderWrapperView {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	typedef void (*callback_304_Microsoft_Maui_Controls_Handlers_Compatibility_HeaderWrapperView_LayoutSubviews_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) layoutSubviews
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_304_Microsoft_Maui_Controls_Handlers_Compatibility_HeaderWrapperView_LayoutSubviews_function callback_304_Microsoft_Maui_Controls_Handlers_Compatibility_HeaderWrapperView_LayoutSubviews;
		xamarin_registrar_dlsym ((void **) &callback_304_Microsoft_Maui_Controls_Handlers_Compatibility_HeaderWrapperView_LayoutSubviews, "Microsoft.Maui.Controls", "callback_304_Microsoft_Maui_Controls_Handlers_Compatibility_HeaderWrapperView_LayoutSubviews", 303);
		callback_304_Microsoft_Maui_Controls_Handlers_Compatibility_HeaderWrapperView_LayoutSubviews (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
@end

@implementation Microsoft_Maui_Controls_Handlers_Compatibility_FormsRefreshControl {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	typedef BOOL (*callback_307_Microsoft_Maui_Controls_Handlers_Compatibility_FormsRefreshControl_get_Hidden_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(BOOL) isHidden
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		BOOL rv = { 0 };
		static callback_307_Microsoft_Maui_Controls_Handlers_Compatibility_FormsRefreshControl_get_Hidden_function callback_307_Microsoft_Maui_Controls_Handlers_Compatibility_FormsRefreshControl_get_Hidden;
		xamarin_registrar_dlsym ((void **) &callback_307_Microsoft_Maui_Controls_Handlers_Compatibility_FormsRefreshControl_get_Hidden, "Microsoft.Maui.Controls", "callback_307_Microsoft_Maui_Controls_Handlers_Compatibility_FormsRefreshControl_get_Hidden", 306);
		rv = callback_307_Microsoft_Maui_Controls_Handlers_Compatibility_FormsRefreshControl_get_Hidden (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef void (*callback_308_Microsoft_Maui_Controls_Handlers_Compatibility_FormsRefreshControl_set_Hidden_function) (id self, SEL sel, BOOL p0, GCHandle* exception_gchandle);
	-(void) setHidden:(BOOL)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_308_Microsoft_Maui_Controls_Handlers_Compatibility_FormsRefreshControl_set_Hidden_function callback_308_Microsoft_Maui_Controls_Handlers_Compatibility_FormsRefreshControl_set_Hidden;
		xamarin_registrar_dlsym ((void **) &callback_308_Microsoft_Maui_Controls_Handlers_Compatibility_FormsRefreshControl_set_Hidden, "Microsoft.Maui.Controls", "callback_308_Microsoft_Maui_Controls_Handlers_Compatibility_FormsRefreshControl_set_Hidden", 307);
		callback_308_Microsoft_Maui_Controls_Handlers_Compatibility_FormsRefreshControl_set_Hidden (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_309_Microsoft_Maui_Controls_Handlers_Compatibility_FormsRefreshControl_BeginRefreshing_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) beginRefreshing
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_309_Microsoft_Maui_Controls_Handlers_Compatibility_FormsRefreshControl_BeginRefreshing_function callback_309_Microsoft_Maui_Controls_Handlers_Compatibility_FormsRefreshControl_BeginRefreshing;
		xamarin_registrar_dlsym ((void **) &callback_309_Microsoft_Maui_Controls_Handlers_Compatibility_FormsRefreshControl_BeginRefreshing, "Microsoft.Maui.Controls", "callback_309_Microsoft_Maui_Controls_Handlers_Compatibility_FormsRefreshControl_BeginRefreshing", 308);
		callback_309_Microsoft_Maui_Controls_Handlers_Compatibility_FormsRefreshControl_BeginRefreshing (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
@end

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_MacCatalyst__UIKit_UIScrollViewDelegate {
}

	typedef id (*callback_3492_UIKit_UIScrollViewDelegate__ctor_function) (id self, SEL sel, bool* call_super, GCHandle* exception_gchandle);
	-(id) init
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_3492_UIKit_UIScrollViewDelegate__ctor_function callback_3492_UIKit_UIScrollViewDelegate__ctor;
		xamarin_registrar_dlsym ((void **) &callback_3492_UIKit_UIScrollViewDelegate__ctor, "Microsoft.MacCatalyst", "callback_3492_UIKit_UIScrollViewDelegate__ctor", 126);
		rv = callback_3492_UIKit_UIScrollViewDelegate__ctor (self, _cmd, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_MacCatalyst__UIKit_UITableViewSource {
}

	typedef id (*callback_3623_UIKit_UITableViewSource__ctor_function) (id self, SEL sel, bool* call_super, GCHandle* exception_gchandle);
	-(id) init
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_3623_UIKit_UITableViewSource__ctor_function callback_3623_UIKit_UITableViewSource__ctor;
		xamarin_registrar_dlsym ((void **) &callback_3623_UIKit_UITableViewSource__ctor, "Microsoft.MacCatalyst", "callback_3623_UIKit_UITableViewSource__ctor", 149);
		rv = callback_3623_UIKit_UITableViewSource__ctor (self, _cmd, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

@implementation Microsoft_Maui_Controls_Handlers_Compatibility_TableViewModelRenderer {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	typedef UITableViewCell * (*callback_368_Microsoft_Maui_Controls_Handlers_Compatibility_TableViewModelRenderer_GetCell_function) (id self, SEL sel, UITableView * p0, NSIndexPath * p1, GCHandle* exception_gchandle);
	-(UITableViewCell *) tableView:(UITableView *)p0 cellForRowAtIndexPath:(NSIndexPath *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		UITableViewCell * rv = { 0 };
		static callback_368_Microsoft_Maui_Controls_Handlers_Compatibility_TableViewModelRenderer_GetCell_function callback_368_Microsoft_Maui_Controls_Handlers_Compatibility_TableViewModelRenderer_GetCell;
		xamarin_registrar_dlsym ((void **) &callback_368_Microsoft_Maui_Controls_Handlers_Compatibility_TableViewModelRenderer_GetCell, "Microsoft.Maui.Controls", "callback_368_Microsoft_Maui_Controls_Handlers_Compatibility_TableViewModelRenderer_GetCell", 367);
		rv = callback_368_Microsoft_Maui_Controls_Handlers_Compatibility_TableViewModelRenderer_GetCell (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef CGFloat (*callback_369_Microsoft_Maui_Controls_Handlers_Compatibility_TableViewModelRenderer_GetHeightForHeader_function) (id self, SEL sel, UITableView * p0, void * p1, GCHandle* exception_gchandle);
	-(CGFloat) tableView:(UITableView *)p0 heightForHeaderInSection:(void *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		CGFloat rv = { 0 };
		static callback_369_Microsoft_Maui_Controls_Handlers_Compatibility_TableViewModelRenderer_GetHeightForHeader_function callback_369_Microsoft_Maui_Controls_Handlers_Compatibility_TableViewModelRenderer_GetHeightForHeader;
		xamarin_registrar_dlsym ((void **) &callback_369_Microsoft_Maui_Controls_Handlers_Compatibility_TableViewModelRenderer_GetHeightForHeader, "Microsoft.Maui.Controls", "callback_369_Microsoft_Maui_Controls_Handlers_Compatibility_TableViewModelRenderer_GetHeightForHeader", 368);
		rv = callback_369_Microsoft_Maui_Controls_Handlers_Compatibility_TableViewModelRenderer_GetHeightForHeader (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef UIView * (*callback_370_Microsoft_Maui_Controls_Handlers_Compatibility_TableViewModelRenderer_GetViewForHeader_function) (id self, SEL sel, UITableView * p0, void * p1, GCHandle* exception_gchandle);
	-(UIView *) tableView:(UITableView *)p0 viewForHeaderInSection:(void *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		UIView * rv = { 0 };
		static callback_370_Microsoft_Maui_Controls_Handlers_Compatibility_TableViewModelRenderer_GetViewForHeader_function callback_370_Microsoft_Maui_Controls_Handlers_Compatibility_TableViewModelRenderer_GetViewForHeader;
		xamarin_registrar_dlsym ((void **) &callback_370_Microsoft_Maui_Controls_Handlers_Compatibility_TableViewModelRenderer_GetViewForHeader, "Microsoft.Maui.Controls", "callback_370_Microsoft_Maui_Controls_Handlers_Compatibility_TableViewModelRenderer_GetViewForHeader", 369);
		rv = callback_370_Microsoft_Maui_Controls_Handlers_Compatibility_TableViewModelRenderer_GetViewForHeader (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef void (*callback_371_Microsoft_Maui_Controls_Handlers_Compatibility_TableViewModelRenderer_WillDisplayHeaderView_function) (id self, SEL sel, UITableView * p0, UIView * p1, void * p2, GCHandle* exception_gchandle);
	-(void) tableView:(UITableView *)p0 willDisplayHeaderView:(UIView *)p1 forSection:(void *)p2
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_371_Microsoft_Maui_Controls_Handlers_Compatibility_TableViewModelRenderer_WillDisplayHeaderView_function callback_371_Microsoft_Maui_Controls_Handlers_Compatibility_TableViewModelRenderer_WillDisplayHeaderView;
		xamarin_registrar_dlsym ((void **) &callback_371_Microsoft_Maui_Controls_Handlers_Compatibility_TableViewModelRenderer_WillDisplayHeaderView, "Microsoft.Maui.Controls", "callback_371_Microsoft_Maui_Controls_Handlers_Compatibility_TableViewModelRenderer_WillDisplayHeaderView", 370);
		callback_371_Microsoft_Maui_Controls_Handlers_Compatibility_TableViewModelRenderer_WillDisplayHeaderView (self, _cmd, p0, p1, p2, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void * (*callback_372_Microsoft_Maui_Controls_Handlers_Compatibility_TableViewModelRenderer_NumberOfSections_function) (id self, SEL sel, UITableView * p0, GCHandle* exception_gchandle);
	-(void *) numberOfSectionsInTableView:(UITableView *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		void * rv = { 0 };
		static callback_372_Microsoft_Maui_Controls_Handlers_Compatibility_TableViewModelRenderer_NumberOfSections_function callback_372_Microsoft_Maui_Controls_Handlers_Compatibility_TableViewModelRenderer_NumberOfSections;
		xamarin_registrar_dlsym ((void **) &callback_372_Microsoft_Maui_Controls_Handlers_Compatibility_TableViewModelRenderer_NumberOfSections, "Microsoft.Maui.Controls", "callback_372_Microsoft_Maui_Controls_Handlers_Compatibility_TableViewModelRenderer_NumberOfSections", 371);
		rv = callback_372_Microsoft_Maui_Controls_Handlers_Compatibility_TableViewModelRenderer_NumberOfSections (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef void (*callback_373_Microsoft_Maui_Controls_Handlers_Compatibility_TableViewModelRenderer_RowSelected_function) (id self, SEL sel, UITableView * p0, NSIndexPath * p1, GCHandle* exception_gchandle);
	-(void) tableView:(UITableView *)p0 didSelectRowAtIndexPath:(NSIndexPath *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_373_Microsoft_Maui_Controls_Handlers_Compatibility_TableViewModelRenderer_RowSelected_function callback_373_Microsoft_Maui_Controls_Handlers_Compatibility_TableViewModelRenderer_RowSelected;
		xamarin_registrar_dlsym ((void **) &callback_373_Microsoft_Maui_Controls_Handlers_Compatibility_TableViewModelRenderer_RowSelected, "Microsoft.Maui.Controls", "callback_373_Microsoft_Maui_Controls_Handlers_Compatibility_TableViewModelRenderer_RowSelected", 372);
		callback_373_Microsoft_Maui_Controls_Handlers_Compatibility_TableViewModelRenderer_RowSelected (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void * (*callback_374_Microsoft_Maui_Controls_Handlers_Compatibility_TableViewModelRenderer_RowsInSection_function) (id self, SEL sel, UITableView * p0, void * p1, GCHandle* exception_gchandle);
	-(void *) tableView:(UITableView *)p0 numberOfRowsInSection:(void *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		void * rv = { 0 };
		static callback_374_Microsoft_Maui_Controls_Handlers_Compatibility_TableViewModelRenderer_RowsInSection_function callback_374_Microsoft_Maui_Controls_Handlers_Compatibility_TableViewModelRenderer_RowsInSection;
		xamarin_registrar_dlsym ((void **) &callback_374_Microsoft_Maui_Controls_Handlers_Compatibility_TableViewModelRenderer_RowsInSection, "Microsoft.Maui.Controls", "callback_374_Microsoft_Maui_Controls_Handlers_Compatibility_TableViewModelRenderer_RowsInSection", 373);
		rv = callback_374_Microsoft_Maui_Controls_Handlers_Compatibility_TableViewModelRenderer_RowsInSection (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef NSArray * (*callback_375_Microsoft_Maui_Controls_Handlers_Compatibility_TableViewModelRenderer_SectionIndexTitles_function) (id self, SEL sel, UITableView * p0, GCHandle* exception_gchandle);
	-(NSArray *) sectionIndexTitlesForTableView:(UITableView *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		NSArray * rv = { 0 };
		static callback_375_Microsoft_Maui_Controls_Handlers_Compatibility_TableViewModelRenderer_SectionIndexTitles_function callback_375_Microsoft_Maui_Controls_Handlers_Compatibility_TableViewModelRenderer_SectionIndexTitles;
		xamarin_registrar_dlsym ((void **) &callback_375_Microsoft_Maui_Controls_Handlers_Compatibility_TableViewModelRenderer_SectionIndexTitles, "Microsoft.Maui.Controls", "callback_375_Microsoft_Maui_Controls_Handlers_Compatibility_TableViewModelRenderer_SectionIndexTitles", 374);
		rv = callback_375_Microsoft_Maui_Controls_Handlers_Compatibility_TableViewModelRenderer_SectionIndexTitles (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef NSString * (*callback_376_Microsoft_Maui_Controls_Handlers_Compatibility_TableViewModelRenderer_TitleForHeader_function) (id self, SEL sel, UITableView * p0, void * p1, GCHandle* exception_gchandle);
	-(NSString *) tableView:(UITableView *)p0 titleForHeaderInSection:(void *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		NSString * rv = { 0 };
		static callback_376_Microsoft_Maui_Controls_Handlers_Compatibility_TableViewModelRenderer_TitleForHeader_function callback_376_Microsoft_Maui_Controls_Handlers_Compatibility_TableViewModelRenderer_TitleForHeader;
		xamarin_registrar_dlsym ((void **) &callback_376_Microsoft_Maui_Controls_Handlers_Compatibility_TableViewModelRenderer_TitleForHeader, "Microsoft.Maui.Controls", "callback_376_Microsoft_Maui_Controls_Handlers_Compatibility_TableViewModelRenderer_TitleForHeader", 375);
		rv = callback_376_Microsoft_Maui_Controls_Handlers_Compatibility_TableViewModelRenderer_TitleForHeader (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
@end

@implementation Microsoft_Maui_Controls_Handlers_Compatibility_UnEvenTableViewModelRenderer {
}

	typedef CGFloat (*callback_377_Microsoft_Maui_Controls_Handlers_Compatibility_UnEvenTableViewModelRenderer_GetHeightForRow_function) (id self, SEL sel, UITableView * p0, NSIndexPath * p1, GCHandle* exception_gchandle);
	-(CGFloat) tableView:(UITableView *)p0 heightForRowAtIndexPath:(NSIndexPath *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		CGFloat rv = { 0 };
		static callback_377_Microsoft_Maui_Controls_Handlers_Compatibility_UnEvenTableViewModelRenderer_GetHeightForRow_function callback_377_Microsoft_Maui_Controls_Handlers_Compatibility_UnEvenTableViewModelRenderer_GetHeightForRow;
		xamarin_registrar_dlsym ((void **) &callback_377_Microsoft_Maui_Controls_Handlers_Compatibility_UnEvenTableViewModelRenderer_GetHeightForRow, "Microsoft.Maui.Controls", "callback_377_Microsoft_Maui_Controls_Handlers_Compatibility_UnEvenTableViewModelRenderer_GetHeightForRow", 376);
		rv = callback_377_Microsoft_Maui_Controls_Handlers_Compatibility_UnEvenTableViewModelRenderer_GetHeightForRow (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
@end

@implementation Microsoft_Maui_Controls_Handlers_Compatibility_TableViewRenderer {
}

	typedef void (*callback_379_Microsoft_Maui_Controls_Handlers_Compatibility_TableViewRenderer_LayoutSubviews_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) layoutSubviews
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_379_Microsoft_Maui_Controls_Handlers_Compatibility_TableViewRenderer_LayoutSubviews_function callback_379_Microsoft_Maui_Controls_Handlers_Compatibility_TableViewRenderer_LayoutSubviews;
		xamarin_registrar_dlsym ((void **) &callback_379_Microsoft_Maui_Controls_Handlers_Compatibility_TableViewRenderer_LayoutSubviews, "Microsoft.Maui.Controls", "callback_379_Microsoft_Maui_Controls_Handlers_Compatibility_TableViewRenderer_LayoutSubviews", 378);
		callback_379_Microsoft_Maui_Controls_Handlers_Compatibility_TableViewRenderer_LayoutSubviews (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_380_Microsoft_Maui_Controls_Handlers_Compatibility_TableViewRenderer_TraitCollectionDidChange_function) (id self, SEL sel, UITraitCollection * p0, GCHandle* exception_gchandle);
	-(void) traitCollectionDidChange:(UITraitCollection *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_380_Microsoft_Maui_Controls_Handlers_Compatibility_TableViewRenderer_TraitCollectionDidChange_function callback_380_Microsoft_Maui_Controls_Handlers_Compatibility_TableViewRenderer_TraitCollectionDidChange;
		xamarin_registrar_dlsym ((void **) &callback_380_Microsoft_Maui_Controls_Handlers_Compatibility_TableViewRenderer_TraitCollectionDidChange, "Microsoft.Maui.Controls", "callback_380_Microsoft_Maui_Controls_Handlers_Compatibility_TableViewRenderer_TraitCollectionDidChange", 379);
		callback_380_Microsoft_Maui_Controls_Handlers_Compatibility_TableViewRenderer_TraitCollectionDidChange (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef id (*callback_378_Microsoft_Maui_Controls_Handlers_Compatibility_TableViewRenderer__ctor_function) (id self, SEL sel, bool* call_super, GCHandle* exception_gchandle);
	-(id) init
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_378_Microsoft_Maui_Controls_Handlers_Compatibility_TableViewRenderer__ctor_function callback_378_Microsoft_Maui_Controls_Handlers_Compatibility_TableViewRenderer__ctor;
		xamarin_registrar_dlsym ((void **) &callback_378_Microsoft_Maui_Controls_Handlers_Compatibility_TableViewRenderer__ctor, "Microsoft.Maui.Controls", "callback_378_Microsoft_Maui_Controls_Handlers_Compatibility_TableViewRenderer__ctor", 377);
		rv = callback_378_Microsoft_Maui_Controls_Handlers_Compatibility_TableViewRenderer__ctor (self, _cmd, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [Microsoft_Maui_Controls_Handlers_Compatibility_ViewRenderer_2 class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@interface Microsoft_Maui_Platform_ResignFirstResponderTouchGestureRecognizer : UITapGestureRecognizer {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(BOOL) conformsToProtocol:(void *)p0;
@end

@implementation Microsoft_Maui_Platform_ResignFirstResponderTouchGestureRecognizer {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}

	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
@end

@interface Microsoft_Maui_Controls_Compatibility_Platform_iOS_ToolbarItemExtensions_PrimaryToolbarItem : UIBarButtonItem {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(BOOL) conformsToProtocol:(void *)p0;
@end

@implementation Microsoft_Maui_Controls_Compatibility_Platform_iOS_ToolbarItemExtensions_PrimaryToolbarItem {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}

	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
@end

@interface Microsoft_Maui_Controls_Platform_DragAndDropDelegate_CustomLocalStateData : NSObject {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(BOOL) conformsToProtocol:(void *)p0;
	-(id) init;
@end

@implementation Microsoft_Maui_Controls_Platform_DragAndDropDelegate_CustomLocalStateData {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}

	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef id (*callback_21_Microsoft_Maui_Controls_Platform_DragAndDropDelegate_CustomLocalStateData__ctor_function) (id self, SEL sel, bool* call_super, GCHandle* exception_gchandle);
	-(id) init
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_21_Microsoft_Maui_Controls_Platform_DragAndDropDelegate_CustomLocalStateData__ctor_function callback_21_Microsoft_Maui_Controls_Platform_DragAndDropDelegate_CustomLocalStateData__ctor;
		xamarin_registrar_dlsym ((void **) &callback_21_Microsoft_Maui_Controls_Platform_DragAndDropDelegate_CustomLocalStateData__ctor, "Microsoft.Maui.Controls", "callback_21_Microsoft_Maui_Controls_Platform_DragAndDropDelegate_CustomLocalStateData__ctor", 20);
		rv = callback_21_Microsoft_Maui_Controls_Platform_DragAndDropDelegate_CustomLocalStateData__ctor (self, _cmd, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@interface Microsoft_Maui_Controls_Platform_DragAndDropDelegate : NSObject<UIDragInteractionDelegate, UIDropInteractionDelegate> {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(BOOL) dragInteraction:(UIDragInteraction *)p0 prefersFullSizePreviewsForSession:(id)p1;
	-(void) dropInteraction:(UIDropInteraction *)p0 sessionDidEnd:(id)p1;
	-(void) dragInteraction:(UIDragInteraction *)p0 session:(id)p1 didEndWithOperation:(NSUInteger)p2;
	-(void) dragInteraction:(UIDragInteraction *)p0 session:(id)p1 willEndWithOperation:(NSUInteger)p2;
	-(NSArray *) dragInteraction:(UIDragInteraction *)p0 itemsForBeginningSession:(id)p1;
	-(BOOL) dropInteraction:(UIDropInteraction *)p0 canHandleSession:(id)p1;
	-(void) dropInteraction:(UIDropInteraction *)p0 sessionDidExit:(id)p1;
	-(UIDropProposal *) dropInteraction:(UIDropInteraction *)p0 sessionDidUpdate:(id)p1;
	-(void) dropInteraction:(UIDropInteraction *)p0 performDrop:(id)p1;
	-(BOOL) conformsToProtocol:(void *)p0;
@end

@implementation Microsoft_Maui_Controls_Platform_DragAndDropDelegate {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	typedef BOOL (*callback_22_Microsoft_Maui_Controls_Platform_DragAndDropDelegate_PrefersFullSizePreviews_function) (id self, SEL sel, UIDragInteraction * p0, id p1, GCHandle* exception_gchandle);
	-(BOOL) dragInteraction:(UIDragInteraction *)p0 prefersFullSizePreviewsForSession:(id)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		BOOL rv = { 0 };
		static callback_22_Microsoft_Maui_Controls_Platform_DragAndDropDelegate_PrefersFullSizePreviews_function callback_22_Microsoft_Maui_Controls_Platform_DragAndDropDelegate_PrefersFullSizePreviews;
		xamarin_registrar_dlsym ((void **) &callback_22_Microsoft_Maui_Controls_Platform_DragAndDropDelegate_PrefersFullSizePreviews, "Microsoft.Maui.Controls", "callback_22_Microsoft_Maui_Controls_Platform_DragAndDropDelegate_PrefersFullSizePreviews", 21);
		rv = callback_22_Microsoft_Maui_Controls_Platform_DragAndDropDelegate_PrefersFullSizePreviews (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef void (*callback_23_Microsoft_Maui_Controls_Platform_DragAndDropDelegate_SessionDidEnd_function) (id self, SEL sel, UIDropInteraction * p0, id p1, GCHandle* exception_gchandle);
	-(void) dropInteraction:(UIDropInteraction *)p0 sessionDidEnd:(id)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_23_Microsoft_Maui_Controls_Platform_DragAndDropDelegate_SessionDidEnd_function callback_23_Microsoft_Maui_Controls_Platform_DragAndDropDelegate_SessionDidEnd;
		xamarin_registrar_dlsym ((void **) &callback_23_Microsoft_Maui_Controls_Platform_DragAndDropDelegate_SessionDidEnd, "Microsoft.Maui.Controls", "callback_23_Microsoft_Maui_Controls_Platform_DragAndDropDelegate_SessionDidEnd", 22);
		callback_23_Microsoft_Maui_Controls_Platform_DragAndDropDelegate_SessionDidEnd (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_24_Microsoft_Maui_Controls_Platform_DragAndDropDelegate_SessionDidEnd_function) (id self, SEL sel, UIDragInteraction * p0, id p1, NSUInteger p2, GCHandle* exception_gchandle);
	-(void) dragInteraction:(UIDragInteraction *)p0 session:(id)p1 didEndWithOperation:(NSUInteger)p2
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_24_Microsoft_Maui_Controls_Platform_DragAndDropDelegate_SessionDidEnd_function callback_24_Microsoft_Maui_Controls_Platform_DragAndDropDelegate_SessionDidEnd;
		xamarin_registrar_dlsym ((void **) &callback_24_Microsoft_Maui_Controls_Platform_DragAndDropDelegate_SessionDidEnd, "Microsoft.Maui.Controls", "callback_24_Microsoft_Maui_Controls_Platform_DragAndDropDelegate_SessionDidEnd", 23);
		callback_24_Microsoft_Maui_Controls_Platform_DragAndDropDelegate_SessionDidEnd (self, _cmd, p0, p1, p2, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_25_Microsoft_Maui_Controls_Platform_DragAndDropDelegate_SessionWillEnd_function) (id self, SEL sel, UIDragInteraction * p0, id p1, NSUInteger p2, GCHandle* exception_gchandle);
	-(void) dragInteraction:(UIDragInteraction *)p0 session:(id)p1 willEndWithOperation:(NSUInteger)p2
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_25_Microsoft_Maui_Controls_Platform_DragAndDropDelegate_SessionWillEnd_function callback_25_Microsoft_Maui_Controls_Platform_DragAndDropDelegate_SessionWillEnd;
		xamarin_registrar_dlsym ((void **) &callback_25_Microsoft_Maui_Controls_Platform_DragAndDropDelegate_SessionWillEnd, "Microsoft.Maui.Controls", "callback_25_Microsoft_Maui_Controls_Platform_DragAndDropDelegate_SessionWillEnd", 24);
		callback_25_Microsoft_Maui_Controls_Platform_DragAndDropDelegate_SessionWillEnd (self, _cmd, p0, p1, p2, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef NSArray * (*callback_26_Microsoft_Maui_Controls_Platform_DragAndDropDelegate_GetItemsForBeginningSession_function) (id self, SEL sel, UIDragInteraction * p0, id p1, GCHandle* exception_gchandle);
	-(NSArray *) dragInteraction:(UIDragInteraction *)p0 itemsForBeginningSession:(id)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		NSArray * rv = { 0 };
		static callback_26_Microsoft_Maui_Controls_Platform_DragAndDropDelegate_GetItemsForBeginningSession_function callback_26_Microsoft_Maui_Controls_Platform_DragAndDropDelegate_GetItemsForBeginningSession;
		xamarin_registrar_dlsym ((void **) &callback_26_Microsoft_Maui_Controls_Platform_DragAndDropDelegate_GetItemsForBeginningSession, "Microsoft.Maui.Controls", "callback_26_Microsoft_Maui_Controls_Platform_DragAndDropDelegate_GetItemsForBeginningSession", 25);
		rv = callback_26_Microsoft_Maui_Controls_Platform_DragAndDropDelegate_GetItemsForBeginningSession (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef BOOL (*callback_27_Microsoft_Maui_Controls_Platform_DragAndDropDelegate_CanHandleSession_function) (id self, SEL sel, UIDropInteraction * p0, id p1, GCHandle* exception_gchandle);
	-(BOOL) dropInteraction:(UIDropInteraction *)p0 canHandleSession:(id)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		BOOL rv = { 0 };
		static callback_27_Microsoft_Maui_Controls_Platform_DragAndDropDelegate_CanHandleSession_function callback_27_Microsoft_Maui_Controls_Platform_DragAndDropDelegate_CanHandleSession;
		xamarin_registrar_dlsym ((void **) &callback_27_Microsoft_Maui_Controls_Platform_DragAndDropDelegate_CanHandleSession, "Microsoft.Maui.Controls", "callback_27_Microsoft_Maui_Controls_Platform_DragAndDropDelegate_CanHandleSession", 26);
		rv = callback_27_Microsoft_Maui_Controls_Platform_DragAndDropDelegate_CanHandleSession (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef void (*callback_28_Microsoft_Maui_Controls_Platform_DragAndDropDelegate_SessionDidExit_function) (id self, SEL sel, UIDropInteraction * p0, id p1, GCHandle* exception_gchandle);
	-(void) dropInteraction:(UIDropInteraction *)p0 sessionDidExit:(id)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_28_Microsoft_Maui_Controls_Platform_DragAndDropDelegate_SessionDidExit_function callback_28_Microsoft_Maui_Controls_Platform_DragAndDropDelegate_SessionDidExit;
		xamarin_registrar_dlsym ((void **) &callback_28_Microsoft_Maui_Controls_Platform_DragAndDropDelegate_SessionDidExit, "Microsoft.Maui.Controls", "callback_28_Microsoft_Maui_Controls_Platform_DragAndDropDelegate_SessionDidExit", 27);
		callback_28_Microsoft_Maui_Controls_Platform_DragAndDropDelegate_SessionDidExit (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef UIDropProposal * (*callback_29_Microsoft_Maui_Controls_Platform_DragAndDropDelegate_SessionDidUpdate_function) (id self, SEL sel, UIDropInteraction * p0, id p1, GCHandle* exception_gchandle);
	-(UIDropProposal *) dropInteraction:(UIDropInteraction *)p0 sessionDidUpdate:(id)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		UIDropProposal * rv = { 0 };
		static callback_29_Microsoft_Maui_Controls_Platform_DragAndDropDelegate_SessionDidUpdate_function callback_29_Microsoft_Maui_Controls_Platform_DragAndDropDelegate_SessionDidUpdate;
		xamarin_registrar_dlsym ((void **) &callback_29_Microsoft_Maui_Controls_Platform_DragAndDropDelegate_SessionDidUpdate, "Microsoft.Maui.Controls", "callback_29_Microsoft_Maui_Controls_Platform_DragAndDropDelegate_SessionDidUpdate", 28);
		rv = callback_29_Microsoft_Maui_Controls_Platform_DragAndDropDelegate_SessionDidUpdate (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef void (*callback_30_Microsoft_Maui_Controls_Platform_DragAndDropDelegate_PerformDrop_function) (id self, SEL sel, UIDropInteraction * p0, id p1, GCHandle* exception_gchandle);
	-(void) dropInteraction:(UIDropInteraction *)p0 performDrop:(id)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_30_Microsoft_Maui_Controls_Platform_DragAndDropDelegate_PerformDrop_function callback_30_Microsoft_Maui_Controls_Platform_DragAndDropDelegate_PerformDrop;
		xamarin_registrar_dlsym ((void **) &callback_30_Microsoft_Maui_Controls_Platform_DragAndDropDelegate_PerformDrop, "Microsoft.Maui.Controls", "callback_30_Microsoft_Maui_Controls_Platform_DragAndDropDelegate_PerformDrop", 29);
		callback_30_Microsoft_Maui_Controls_Platform_DragAndDropDelegate_PerformDrop (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
@end

@implementation __UIGestureRecognizerToken {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}

	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef id (*callback_3142_UIKit_UIGestureRecognizer_Token__ctor_function) (id self, SEL sel, bool* call_super, GCHandle* exception_gchandle);
	-(id) init
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_3142_UIKit_UIGestureRecognizer_Token__ctor_function callback_3142_UIKit_UIGestureRecognizer_Token__ctor;
		xamarin_registrar_dlsym ((void **) &callback_3142_UIKit_UIGestureRecognizer_Token__ctor, "Microsoft.MacCatalyst", "callback_3142_UIKit_UIGestureRecognizer_Token__ctor", 42);
		rv = callback_3142_UIKit_UIGestureRecognizer_Token__ctor (self, _cmd, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@interface __UIGestureRecognizer : __UIGestureRecognizerToken {
}
	-(void) target:(UIGestureRecognizer *)p0;
@end

@implementation __UIGestureRecognizer {
}

	typedef void (*callback_31_Microsoft_Maui_Controls_Platform_iOS_CustomPressGestureRecognizer_Callback_Activated_function) (id self, SEL sel, UIGestureRecognizer * p0, GCHandle* exception_gchandle);
	-(void) target:(UIGestureRecognizer *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_31_Microsoft_Maui_Controls_Platform_iOS_CustomPressGestureRecognizer_Callback_Activated_function callback_31_Microsoft_Maui_Controls_Platform_iOS_CustomPressGestureRecognizer_Callback_Activated;
		xamarin_registrar_dlsym ((void **) &callback_31_Microsoft_Maui_Controls_Platform_iOS_CustomPressGestureRecognizer_Callback_Activated, "Microsoft.Maui.Controls", "callback_31_Microsoft_Maui_Controls_Platform_iOS_CustomPressGestureRecognizer_Callback_Activated", 30);
		callback_31_Microsoft_Maui_Controls_Platform_iOS_CustomPressGestureRecognizer_Callback_Activated (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}
@end

@interface Microsoft_Maui_Controls_Platform_iOS_CustomPressGestureRecognizer : UIGestureRecognizer {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(void) touchesBegan:(NSSet *)p0 withEvent:(UIEvent *)p1;
	-(void) touchesEnded:(NSSet *)p0 withEvent:(UIEvent *)p1;
	-(void) touchesMoved:(NSSet *)p0 withEvent:(UIEvent *)p1;
	-(BOOL) conformsToProtocol:(void *)p0;
@end

@implementation Microsoft_Maui_Controls_Platform_iOS_CustomPressGestureRecognizer {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	typedef void (*callback_32_Microsoft_Maui_Controls_Platform_iOS_CustomPressGestureRecognizer_TouchesBegan_function) (id self, SEL sel, NSSet * p0, UIEvent * p1, GCHandle* exception_gchandle);
	-(void) touchesBegan:(NSSet *)p0 withEvent:(UIEvent *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_32_Microsoft_Maui_Controls_Platform_iOS_CustomPressGestureRecognizer_TouchesBegan_function callback_32_Microsoft_Maui_Controls_Platform_iOS_CustomPressGestureRecognizer_TouchesBegan;
		xamarin_registrar_dlsym ((void **) &callback_32_Microsoft_Maui_Controls_Platform_iOS_CustomPressGestureRecognizer_TouchesBegan, "Microsoft.Maui.Controls", "callback_32_Microsoft_Maui_Controls_Platform_iOS_CustomPressGestureRecognizer_TouchesBegan", 31);
		callback_32_Microsoft_Maui_Controls_Platform_iOS_CustomPressGestureRecognizer_TouchesBegan (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_33_Microsoft_Maui_Controls_Platform_iOS_CustomPressGestureRecognizer_TouchesEnded_function) (id self, SEL sel, NSSet * p0, UIEvent * p1, GCHandle* exception_gchandle);
	-(void) touchesEnded:(NSSet *)p0 withEvent:(UIEvent *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_33_Microsoft_Maui_Controls_Platform_iOS_CustomPressGestureRecognizer_TouchesEnded_function callback_33_Microsoft_Maui_Controls_Platform_iOS_CustomPressGestureRecognizer_TouchesEnded;
		xamarin_registrar_dlsym ((void **) &callback_33_Microsoft_Maui_Controls_Platform_iOS_CustomPressGestureRecognizer_TouchesEnded, "Microsoft.Maui.Controls", "callback_33_Microsoft_Maui_Controls_Platform_iOS_CustomPressGestureRecognizer_TouchesEnded", 32);
		callback_33_Microsoft_Maui_Controls_Platform_iOS_CustomPressGestureRecognizer_TouchesEnded (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_34_Microsoft_Maui_Controls_Platform_iOS_CustomPressGestureRecognizer_TouchesMoved_function) (id self, SEL sel, NSSet * p0, UIEvent * p1, GCHandle* exception_gchandle);
	-(void) touchesMoved:(NSSet *)p0 withEvent:(UIEvent *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_34_Microsoft_Maui_Controls_Platform_iOS_CustomPressGestureRecognizer_TouchesMoved_function callback_34_Microsoft_Maui_Controls_Platform_iOS_CustomPressGestureRecognizer_TouchesMoved;
		xamarin_registrar_dlsym ((void **) &callback_34_Microsoft_Maui_Controls_Platform_iOS_CustomPressGestureRecognizer_TouchesMoved, "Microsoft.Maui.Controls", "callback_34_Microsoft_Maui_Controls_Platform_iOS_CustomPressGestureRecognizer_TouchesMoved", 33);
		callback_34_Microsoft_Maui_Controls_Platform_iOS_CustomPressGestureRecognizer_TouchesMoved (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
@end

@implementation Microsoft_Maui_Controls_Platform_Compatibility_ShellFlyoutContentRenderer {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	typedef void (*callback_35_Microsoft_Maui_Controls_Platform_Compatibility_ShellFlyoutContentRenderer_ViewWillLayoutSubviews_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) viewWillLayoutSubviews
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_35_Microsoft_Maui_Controls_Platform_Compatibility_ShellFlyoutContentRenderer_ViewWillLayoutSubviews_function callback_35_Microsoft_Maui_Controls_Platform_Compatibility_ShellFlyoutContentRenderer_ViewWillLayoutSubviews;
		xamarin_registrar_dlsym ((void **) &callback_35_Microsoft_Maui_Controls_Platform_Compatibility_ShellFlyoutContentRenderer_ViewWillLayoutSubviews, "Microsoft.Maui.Controls", "callback_35_Microsoft_Maui_Controls_Platform_Compatibility_ShellFlyoutContentRenderer_ViewWillLayoutSubviews", 34);
		callback_35_Microsoft_Maui_Controls_Platform_Compatibility_ShellFlyoutContentRenderer_ViewWillLayoutSubviews (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_36_Microsoft_Maui_Controls_Platform_Compatibility_ShellFlyoutContentRenderer_ViewDidLayoutSubviews_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) viewDidLayoutSubviews
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_36_Microsoft_Maui_Controls_Platform_Compatibility_ShellFlyoutContentRenderer_ViewDidLayoutSubviews_function callback_36_Microsoft_Maui_Controls_Platform_Compatibility_ShellFlyoutContentRenderer_ViewDidLayoutSubviews;
		xamarin_registrar_dlsym ((void **) &callback_36_Microsoft_Maui_Controls_Platform_Compatibility_ShellFlyoutContentRenderer_ViewDidLayoutSubviews, "Microsoft.Maui.Controls", "callback_36_Microsoft_Maui_Controls_Platform_Compatibility_ShellFlyoutContentRenderer_ViewDidLayoutSubviews", 35);
		callback_36_Microsoft_Maui_Controls_Platform_Compatibility_ShellFlyoutContentRenderer_ViewDidLayoutSubviews (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_37_Microsoft_Maui_Controls_Platform_Compatibility_ShellFlyoutContentRenderer_ViewDidLoad_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) viewDidLoad
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_37_Microsoft_Maui_Controls_Platform_Compatibility_ShellFlyoutContentRenderer_ViewDidLoad_function callback_37_Microsoft_Maui_Controls_Platform_Compatibility_ShellFlyoutContentRenderer_ViewDidLoad;
		xamarin_registrar_dlsym ((void **) &callback_37_Microsoft_Maui_Controls_Platform_Compatibility_ShellFlyoutContentRenderer_ViewDidLoad, "Microsoft.Maui.Controls", "callback_37_Microsoft_Maui_Controls_Platform_Compatibility_ShellFlyoutContentRenderer_ViewDidLoad", 36);
		callback_37_Microsoft_Maui_Controls_Platform_Compatibility_ShellFlyoutContentRenderer_ViewDidLoad (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_38_Microsoft_Maui_Controls_Platform_Compatibility_ShellFlyoutContentRenderer_ViewWillAppear_function) (id self, SEL sel, BOOL p0, GCHandle* exception_gchandle);
	-(void) viewWillAppear:(BOOL)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_38_Microsoft_Maui_Controls_Platform_Compatibility_ShellFlyoutContentRenderer_ViewWillAppear_function callback_38_Microsoft_Maui_Controls_Platform_Compatibility_ShellFlyoutContentRenderer_ViewWillAppear;
		xamarin_registrar_dlsym ((void **) &callback_38_Microsoft_Maui_Controls_Platform_Compatibility_ShellFlyoutContentRenderer_ViewWillAppear, "Microsoft.Maui.Controls", "callback_38_Microsoft_Maui_Controls_Platform_Compatibility_ShellFlyoutContentRenderer_ViewWillAppear", 37);
		callback_38_Microsoft_Maui_Controls_Platform_Compatibility_ShellFlyoutContentRenderer_ViewWillAppear (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_39_Microsoft_Maui_Controls_Platform_Compatibility_ShellFlyoutContentRenderer_ViewWillDisappear_function) (id self, SEL sel, BOOL p0, GCHandle* exception_gchandle);
	-(void) viewWillDisappear:(BOOL)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_39_Microsoft_Maui_Controls_Platform_Compatibility_ShellFlyoutContentRenderer_ViewWillDisappear_function callback_39_Microsoft_Maui_Controls_Platform_Compatibility_ShellFlyoutContentRenderer_ViewWillDisappear;
		xamarin_registrar_dlsym ((void **) &callback_39_Microsoft_Maui_Controls_Platform_Compatibility_ShellFlyoutContentRenderer_ViewWillDisappear, "Microsoft.Maui.Controls", "callback_39_Microsoft_Maui_Controls_Platform_Compatibility_ShellFlyoutContentRenderer_ViewWillDisappear", 38);
		callback_39_Microsoft_Maui_Controls_Platform_Compatibility_ShellFlyoutContentRenderer_ViewWillDisappear (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
@end

@implementation Microsoft_Maui_Controls_Platform_Compatibility_ShellFlyoutRenderer {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	typedef BOOL (*callback_42_Microsoft_Maui_Controls_Platform_Compatibility_ShellFlyoutRenderer_get_PrefersHomeIndicatorAutoHidden_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(BOOL) prefersHomeIndicatorAutoHidden
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		BOOL rv = { 0 };
		static callback_42_Microsoft_Maui_Controls_Platform_Compatibility_ShellFlyoutRenderer_get_PrefersHomeIndicatorAutoHidden_function callback_42_Microsoft_Maui_Controls_Platform_Compatibility_ShellFlyoutRenderer_get_PrefersHomeIndicatorAutoHidden;
		xamarin_registrar_dlsym ((void **) &callback_42_Microsoft_Maui_Controls_Platform_Compatibility_ShellFlyoutRenderer_get_PrefersHomeIndicatorAutoHidden, "Microsoft.Maui.Controls", "callback_42_Microsoft_Maui_Controls_Platform_Compatibility_ShellFlyoutRenderer_get_PrefersHomeIndicatorAutoHidden", 41);
		rv = callback_42_Microsoft_Maui_Controls_Platform_Compatibility_ShellFlyoutRenderer_get_PrefersHomeIndicatorAutoHidden (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef BOOL (*callback_43_Microsoft_Maui_Controls_Platform_Compatibility_ShellFlyoutRenderer_PrefersStatusBarHidden_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(BOOL) prefersStatusBarHidden
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		BOOL rv = { 0 };
		static callback_43_Microsoft_Maui_Controls_Platform_Compatibility_ShellFlyoutRenderer_PrefersStatusBarHidden_function callback_43_Microsoft_Maui_Controls_Platform_Compatibility_ShellFlyoutRenderer_PrefersStatusBarHidden;
		xamarin_registrar_dlsym ((void **) &callback_43_Microsoft_Maui_Controls_Platform_Compatibility_ShellFlyoutRenderer_PrefersStatusBarHidden, "Microsoft.Maui.Controls", "callback_43_Microsoft_Maui_Controls_Platform_Compatibility_ShellFlyoutRenderer_PrefersStatusBarHidden", 42);
		rv = callback_43_Microsoft_Maui_Controls_Platform_Compatibility_ShellFlyoutRenderer_PrefersStatusBarHidden (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef NSInteger (*callback_44_Microsoft_Maui_Controls_Platform_Compatibility_ShellFlyoutRenderer_get_PreferredStatusBarUpdateAnimation_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(NSInteger) preferredStatusBarUpdateAnimation
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		NSInteger rv = { 0 };
		static callback_44_Microsoft_Maui_Controls_Platform_Compatibility_ShellFlyoutRenderer_get_PreferredStatusBarUpdateAnimation_function callback_44_Microsoft_Maui_Controls_Platform_Compatibility_ShellFlyoutRenderer_get_PreferredStatusBarUpdateAnimation;
		xamarin_registrar_dlsym ((void **) &callback_44_Microsoft_Maui_Controls_Platform_Compatibility_ShellFlyoutRenderer_get_PreferredStatusBarUpdateAnimation, "Microsoft.Maui.Controls", "callback_44_Microsoft_Maui_Controls_Platform_Compatibility_ShellFlyoutRenderer_get_PreferredStatusBarUpdateAnimation", 43);
		rv = callback_44_Microsoft_Maui_Controls_Platform_Compatibility_ShellFlyoutRenderer_get_PreferredStatusBarUpdateAnimation (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef void (*callback_45_Microsoft_Maui_Controls_Platform_Compatibility_ShellFlyoutRenderer_ViewDidLayoutSubviews_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) viewDidLayoutSubviews
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_45_Microsoft_Maui_Controls_Platform_Compatibility_ShellFlyoutRenderer_ViewDidLayoutSubviews_function callback_45_Microsoft_Maui_Controls_Platform_Compatibility_ShellFlyoutRenderer_ViewDidLayoutSubviews;
		xamarin_registrar_dlsym ((void **) &callback_45_Microsoft_Maui_Controls_Platform_Compatibility_ShellFlyoutRenderer_ViewDidLayoutSubviews, "Microsoft.Maui.Controls", "callback_45_Microsoft_Maui_Controls_Platform_Compatibility_ShellFlyoutRenderer_ViewDidLayoutSubviews", 44);
		callback_45_Microsoft_Maui_Controls_Platform_Compatibility_ShellFlyoutRenderer_ViewDidLayoutSubviews (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_46_Microsoft_Maui_Controls_Platform_Compatibility_ShellFlyoutRenderer_ViewWillAppear_function) (id self, SEL sel, BOOL p0, GCHandle* exception_gchandle);
	-(void) viewWillAppear:(BOOL)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_46_Microsoft_Maui_Controls_Platform_Compatibility_ShellFlyoutRenderer_ViewWillAppear_function callback_46_Microsoft_Maui_Controls_Platform_Compatibility_ShellFlyoutRenderer_ViewWillAppear;
		xamarin_registrar_dlsym ((void **) &callback_46_Microsoft_Maui_Controls_Platform_Compatibility_ShellFlyoutRenderer_ViewWillAppear, "Microsoft.Maui.Controls", "callback_46_Microsoft_Maui_Controls_Platform_Compatibility_ShellFlyoutRenderer_ViewWillAppear", 45);
		callback_46_Microsoft_Maui_Controls_Platform_Compatibility_ShellFlyoutRenderer_ViewWillAppear (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_47_Microsoft_Maui_Controls_Platform_Compatibility_ShellFlyoutRenderer_ViewDidLoad_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) viewDidLoad
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_47_Microsoft_Maui_Controls_Platform_Compatibility_ShellFlyoutRenderer_ViewDidLoad_function callback_47_Microsoft_Maui_Controls_Platform_Compatibility_ShellFlyoutRenderer_ViewDidLoad;
		xamarin_registrar_dlsym ((void **) &callback_47_Microsoft_Maui_Controls_Platform_Compatibility_ShellFlyoutRenderer_ViewDidLoad, "Microsoft.Maui.Controls", "callback_47_Microsoft_Maui_Controls_Platform_Compatibility_ShellFlyoutRenderer_ViewDidLoad", 46);
		callback_47_Microsoft_Maui_Controls_Platform_Compatibility_ShellFlyoutRenderer_ViewDidLoad (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef id (*callback_48_Microsoft_Maui_Controls_Platform_Compatibility_ShellFlyoutRenderer__ctor_function) (id self, SEL sel, bool* call_super, GCHandle* exception_gchandle);
	-(id) init
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_48_Microsoft_Maui_Controls_Platform_Compatibility_ShellFlyoutRenderer__ctor_function callback_48_Microsoft_Maui_Controls_Platform_Compatibility_ShellFlyoutRenderer__ctor;
		xamarin_registrar_dlsym ((void **) &callback_48_Microsoft_Maui_Controls_Platform_Compatibility_ShellFlyoutRenderer__ctor, "Microsoft.Maui.Controls", "callback_48_Microsoft_Maui_Controls_Platform_Compatibility_ShellFlyoutRenderer__ctor", 47);
		rv = callback_48_Microsoft_Maui_Controls_Platform_Compatibility_ShellFlyoutRenderer__ctor (self, _cmd, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [UIViewController class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@implementation Microsoft_Maui_Controls_Platform_Compatibility_ShellPageRendererTracker_TitleViewContainer {
}

	typedef CGRect (*callback_55_Microsoft_Maui_Controls_Platform_Compatibility_ShellPageRendererTracker_TitleViewContainer_get_Frame_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(CGRect) frame
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		CGRect rv = { 0 };
		static callback_55_Microsoft_Maui_Controls_Platform_Compatibility_ShellPageRendererTracker_TitleViewContainer_get_Frame_function callback_55_Microsoft_Maui_Controls_Platform_Compatibility_ShellPageRendererTracker_TitleViewContainer_get_Frame;
		xamarin_registrar_dlsym ((void **) &callback_55_Microsoft_Maui_Controls_Platform_Compatibility_ShellPageRendererTracker_TitleViewContainer_get_Frame, "Microsoft.Maui.Controls", "callback_55_Microsoft_Maui_Controls_Platform_Compatibility_ShellPageRendererTracker_TitleViewContainer_get_Frame", 54);
		rv = callback_55_Microsoft_Maui_Controls_Platform_Compatibility_ShellPageRendererTracker_TitleViewContainer_get_Frame (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef void (*callback_56_Microsoft_Maui_Controls_Platform_Compatibility_ShellPageRendererTracker_TitleViewContainer_set_Frame_function) (id self, SEL sel, CGRect p0, GCHandle* exception_gchandle);
	-(void) setFrame:(CGRect)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_56_Microsoft_Maui_Controls_Platform_Compatibility_ShellPageRendererTracker_TitleViewContainer_set_Frame_function callback_56_Microsoft_Maui_Controls_Platform_Compatibility_ShellPageRendererTracker_TitleViewContainer_set_Frame;
		xamarin_registrar_dlsym ((void **) &callback_56_Microsoft_Maui_Controls_Platform_Compatibility_ShellPageRendererTracker_TitleViewContainer_set_Frame, "Microsoft.Maui.Controls", "callback_56_Microsoft_Maui_Controls_Platform_Compatibility_ShellPageRendererTracker_TitleViewContainer_set_Frame", 55);
		callback_56_Microsoft_Maui_Controls_Platform_Compatibility_ShellPageRendererTracker_TitleViewContainer_set_Frame (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_57_Microsoft_Maui_Controls_Platform_Compatibility_ShellPageRendererTracker_TitleViewContainer_LayoutSubviews_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) layoutSubviews
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_57_Microsoft_Maui_Controls_Platform_Compatibility_ShellPageRendererTracker_TitleViewContainer_LayoutSubviews_function callback_57_Microsoft_Maui_Controls_Platform_Compatibility_ShellPageRendererTracker_TitleViewContainer_LayoutSubviews;
		xamarin_registrar_dlsym ((void **) &callback_57_Microsoft_Maui_Controls_Platform_Compatibility_ShellPageRendererTracker_TitleViewContainer_LayoutSubviews, "Microsoft.Maui.Controls", "callback_57_Microsoft_Maui_Controls_Platform_Compatibility_ShellPageRendererTracker_TitleViewContainer_LayoutSubviews", 56);
		callback_57_Microsoft_Maui_Controls_Platform_Compatibility_ShellPageRendererTracker_TitleViewContainer_LayoutSubviews (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_58_Microsoft_Maui_Controls_Platform_Compatibility_ShellPageRendererTracker_TitleViewContainer_WillMoveToSuperview_function) (id self, SEL sel, UIView * p0, GCHandle* exception_gchandle);
	-(void) willMoveToSuperview:(UIView *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_58_Microsoft_Maui_Controls_Platform_Compatibility_ShellPageRendererTracker_TitleViewContainer_WillMoveToSuperview_function callback_58_Microsoft_Maui_Controls_Platform_Compatibility_ShellPageRendererTracker_TitleViewContainer_WillMoveToSuperview;
		xamarin_registrar_dlsym ((void **) &callback_58_Microsoft_Maui_Controls_Platform_Compatibility_ShellPageRendererTracker_TitleViewContainer_WillMoveToSuperview, "Microsoft.Maui.Controls", "callback_58_Microsoft_Maui_Controls_Platform_Compatibility_ShellPageRendererTracker_TitleViewContainer_WillMoveToSuperview", 57);
		callback_58_Microsoft_Maui_Controls_Platform_Compatibility_ShellPageRendererTracker_TitleViewContainer_WillMoveToSuperview (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef CGSize (*callback_59_Microsoft_Maui_Controls_Platform_Compatibility_ShellPageRendererTracker_TitleViewContainer_get_IntrinsicContentSize_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(CGSize) intrinsicContentSize
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		CGSize rv = { 0 };
		static callback_59_Microsoft_Maui_Controls_Platform_Compatibility_ShellPageRendererTracker_TitleViewContainer_get_IntrinsicContentSize_function callback_59_Microsoft_Maui_Controls_Platform_Compatibility_ShellPageRendererTracker_TitleViewContainer_get_IntrinsicContentSize;
		xamarin_registrar_dlsym ((void **) &callback_59_Microsoft_Maui_Controls_Platform_Compatibility_ShellPageRendererTracker_TitleViewContainer_get_IntrinsicContentSize, "Microsoft.Maui.Controls", "callback_59_Microsoft_Maui_Controls_Platform_Compatibility_ShellPageRendererTracker_TitleViewContainer_get_IntrinsicContentSize", 58);
		rv = callback_59_Microsoft_Maui_Controls_Platform_Compatibility_ShellPageRendererTracker_TitleViewContainer_get_IntrinsicContentSize (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef CGSize (*callback_60_Microsoft_Maui_Controls_Platform_Compatibility_ShellPageRendererTracker_TitleViewContainer_SizeThatFits_function) (id self, SEL sel, CGSize p0, GCHandle* exception_gchandle);
	-(CGSize) sizeThatFits:(CGSize)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		CGSize rv = { 0 };
		static callback_60_Microsoft_Maui_Controls_Platform_Compatibility_ShellPageRendererTracker_TitleViewContainer_SizeThatFits_function callback_60_Microsoft_Maui_Controls_Platform_Compatibility_ShellPageRendererTracker_TitleViewContainer_SizeThatFits;
		xamarin_registrar_dlsym ((void **) &callback_60_Microsoft_Maui_Controls_Platform_Compatibility_ShellPageRendererTracker_TitleViewContainer_SizeThatFits, "Microsoft.Maui.Controls", "callback_60_Microsoft_Maui_Controls_Platform_Compatibility_ShellPageRendererTracker_TitleViewContainer_SizeThatFits", 59);
		rv = callback_60_Microsoft_Maui_Controls_Platform_Compatibility_ShellPageRendererTracker_TitleViewContainer_SizeThatFits (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
@end

@implementation Microsoft_Maui_Controls_Platform_Compatibility_ShellSearchResultsRenderer {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	typedef UITableViewCell * (*callback_61_Microsoft_Maui_Controls_Platform_Compatibility_ShellSearchResultsRenderer_GetCell_function) (id self, SEL sel, UITableView * p0, NSIndexPath * p1, GCHandle* exception_gchandle);
	-(UITableViewCell *) tableView:(UITableView *)p0 cellForRowAtIndexPath:(NSIndexPath *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		UITableViewCell * rv = { 0 };
		static callback_61_Microsoft_Maui_Controls_Platform_Compatibility_ShellSearchResultsRenderer_GetCell_function callback_61_Microsoft_Maui_Controls_Platform_Compatibility_ShellSearchResultsRenderer_GetCell;
		xamarin_registrar_dlsym ((void **) &callback_61_Microsoft_Maui_Controls_Platform_Compatibility_ShellSearchResultsRenderer_GetCell, "Microsoft.Maui.Controls", "callback_61_Microsoft_Maui_Controls_Platform_Compatibility_ShellSearchResultsRenderer_GetCell", 60);
		rv = callback_61_Microsoft_Maui_Controls_Platform_Compatibility_ShellSearchResultsRenderer_GetCell (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef void (*callback_62_Microsoft_Maui_Controls_Platform_Compatibility_ShellSearchResultsRenderer_RowSelected_function) (id self, SEL sel, UITableView * p0, NSIndexPath * p1, GCHandle* exception_gchandle);
	-(void) tableView:(UITableView *)p0 didSelectRowAtIndexPath:(NSIndexPath *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_62_Microsoft_Maui_Controls_Platform_Compatibility_ShellSearchResultsRenderer_RowSelected_function callback_62_Microsoft_Maui_Controls_Platform_Compatibility_ShellSearchResultsRenderer_RowSelected;
		xamarin_registrar_dlsym ((void **) &callback_62_Microsoft_Maui_Controls_Platform_Compatibility_ShellSearchResultsRenderer_RowSelected, "Microsoft.Maui.Controls", "callback_62_Microsoft_Maui_Controls_Platform_Compatibility_ShellSearchResultsRenderer_RowSelected", 61);
		callback_62_Microsoft_Maui_Controls_Platform_Compatibility_ShellSearchResultsRenderer_RowSelected (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void * (*callback_63_Microsoft_Maui_Controls_Platform_Compatibility_ShellSearchResultsRenderer_NumberOfSections_function) (id self, SEL sel, UITableView * p0, GCHandle* exception_gchandle);
	-(void *) numberOfSectionsInTableView:(UITableView *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		void * rv = { 0 };
		static callback_63_Microsoft_Maui_Controls_Platform_Compatibility_ShellSearchResultsRenderer_NumberOfSections_function callback_63_Microsoft_Maui_Controls_Platform_Compatibility_ShellSearchResultsRenderer_NumberOfSections;
		xamarin_registrar_dlsym ((void **) &callback_63_Microsoft_Maui_Controls_Platform_Compatibility_ShellSearchResultsRenderer_NumberOfSections, "Microsoft.Maui.Controls", "callback_63_Microsoft_Maui_Controls_Platform_Compatibility_ShellSearchResultsRenderer_NumberOfSections", 62);
		rv = callback_63_Microsoft_Maui_Controls_Platform_Compatibility_ShellSearchResultsRenderer_NumberOfSections (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef void * (*callback_64_Microsoft_Maui_Controls_Platform_Compatibility_ShellSearchResultsRenderer_RowsInSection_function) (id self, SEL sel, UITableView * p0, void * p1, GCHandle* exception_gchandle);
	-(void *) tableView:(UITableView *)p0 numberOfRowsInSection:(void *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		void * rv = { 0 };
		static callback_64_Microsoft_Maui_Controls_Platform_Compatibility_ShellSearchResultsRenderer_RowsInSection_function callback_64_Microsoft_Maui_Controls_Platform_Compatibility_ShellSearchResultsRenderer_RowsInSection;
		xamarin_registrar_dlsym ((void **) &callback_64_Microsoft_Maui_Controls_Platform_Compatibility_ShellSearchResultsRenderer_RowsInSection, "Microsoft.Maui.Controls", "callback_64_Microsoft_Maui_Controls_Platform_Compatibility_ShellSearchResultsRenderer_RowsInSection", 63);
		rv = callback_64_Microsoft_Maui_Controls_Platform_Compatibility_ShellSearchResultsRenderer_RowsInSection (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
@end

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_MacCatalyst__UIKit_UIGestureRecognizerDelegate {
}

	typedef id (*callback_3403_UIKit_UIGestureRecognizerDelegate__ctor_function) (id self, SEL sel, bool* call_super, GCHandle* exception_gchandle);
	-(id) init
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_3403_UIKit_UIGestureRecognizerDelegate__ctor_function callback_3403_UIKit_UIGestureRecognizerDelegate__ctor;
		xamarin_registrar_dlsym ((void **) &callback_3403_UIKit_UIGestureRecognizerDelegate__ctor, "Microsoft.MacCatalyst", "callback_3403_UIKit_UIGestureRecognizerDelegate__ctor", 107);
		rv = callback_3403_UIKit_UIGestureRecognizerDelegate__ctor (self, _cmd, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

@interface Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRenderer_GestureDelegate : NSObject<UIGestureRecognizerDelegate> {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(BOOL) gestureRecognizerShouldBegin:(UIGestureRecognizer *)p0;
	-(BOOL) conformsToProtocol:(void *)p0;
@end

@implementation Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRenderer_GestureDelegate {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	typedef BOOL (*callback_65_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRenderer_GestureDelegate_ShouldBegin_function) (id self, SEL sel, UIGestureRecognizer * p0, GCHandle* exception_gchandle);
	-(BOOL) gestureRecognizerShouldBegin:(UIGestureRecognizer *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		BOOL rv = { 0 };
		static callback_65_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRenderer_GestureDelegate_ShouldBegin_function callback_65_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRenderer_GestureDelegate_ShouldBegin;
		xamarin_registrar_dlsym ((void **) &callback_65_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRenderer_GestureDelegate_ShouldBegin, "Microsoft.Maui.Controls", "callback_65_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRenderer_GestureDelegate_ShouldBegin", 64);
		rv = callback_65_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRenderer_GestureDelegate_ShouldBegin (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
@end

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_MacCatalyst__UIKit_UINavigationControllerDelegate {
}

	typedef id (*callback_3422_UIKit_UINavigationControllerDelegate__ctor_function) (id self, SEL sel, bool* call_super, GCHandle* exception_gchandle);
	-(id) init
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_3422_UIKit_UINavigationControllerDelegate__ctor_function callback_3422_UIKit_UINavigationControllerDelegate__ctor;
		xamarin_registrar_dlsym ((void **) &callback_3422_UIKit_UINavigationControllerDelegate__ctor, "Microsoft.MacCatalyst", "callback_3422_UIKit_UINavigationControllerDelegate__ctor", 109);
		rv = callback_3422_UIKit_UINavigationControllerDelegate__ctor (self, _cmd, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

@interface Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRenderer_NavDelegate : NSObject<UINavigationControllerDelegate> {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(id) navigationController:(UINavigationController *)p0 animationControllerForOperation:(NSInteger)p1 fromViewController:(UIViewController *)p2 toViewController:(UIViewController *)p3;
	-(void) navigationController:(UINavigationController *)p0 didShowViewController:(UIViewController *)p1 animated:(BOOL)p2;
	-(void) navigationController:(UINavigationController *)p0 willShowViewController:(UIViewController *)p1 animated:(BOOL)p2;
	-(BOOL) conformsToProtocol:(void *)p0;
@end

@implementation Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRenderer_NavDelegate {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	typedef id (*callback_66_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRenderer_NavDelegate_GetAnimationControllerForOperation_function) (id self, SEL sel, UINavigationController * p0, NSInteger p1, UIViewController * p2, UIViewController * p3, GCHandle* exception_gchandle);
	-(id) navigationController:(UINavigationController *)p0 animationControllerForOperation:(NSInteger)p1 fromViewController:(UIViewController *)p2 toViewController:(UIViewController *)p3
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		id rv = { 0 };
		static callback_66_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRenderer_NavDelegate_GetAnimationControllerForOperation_function callback_66_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRenderer_NavDelegate_GetAnimationControllerForOperation;
		xamarin_registrar_dlsym ((void **) &callback_66_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRenderer_NavDelegate_GetAnimationControllerForOperation, "Microsoft.Maui.Controls", "callback_66_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRenderer_NavDelegate_GetAnimationControllerForOperation", 65);
		rv = callback_66_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRenderer_NavDelegate_GetAnimationControllerForOperation (self, _cmd, p0, p1, p2, p3, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef void (*callback_67_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRenderer_NavDelegate_DidShowViewController_function) (id self, SEL sel, UINavigationController * p0, UIViewController * p1, BOOL p2, GCHandle* exception_gchandle);
	-(void) navigationController:(UINavigationController *)p0 didShowViewController:(UIViewController *)p1 animated:(BOOL)p2
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_67_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRenderer_NavDelegate_DidShowViewController_function callback_67_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRenderer_NavDelegate_DidShowViewController;
		xamarin_registrar_dlsym ((void **) &callback_67_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRenderer_NavDelegate_DidShowViewController, "Microsoft.Maui.Controls", "callback_67_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRenderer_NavDelegate_DidShowViewController", 66);
		callback_67_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRenderer_NavDelegate_DidShowViewController (self, _cmd, p0, p1, p2, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_68_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRenderer_NavDelegate_WillShowViewController_function) (id self, SEL sel, UINavigationController * p0, UIViewController * p1, BOOL p2, GCHandle* exception_gchandle);
	-(void) navigationController:(UINavigationController *)p0 willShowViewController:(UIViewController *)p1 animated:(BOOL)p2
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_68_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRenderer_NavDelegate_WillShowViewController_function callback_68_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRenderer_NavDelegate_WillShowViewController;
		xamarin_registrar_dlsym ((void **) &callback_68_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRenderer_NavDelegate_WillShowViewController, "Microsoft.Maui.Controls", "callback_68_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRenderer_NavDelegate_WillShowViewController", 67);
		callback_68_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRenderer_NavDelegate_WillShowViewController (self, _cmd, p0, p1, p2, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
@end

@implementation Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRenderer {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	typedef BOOL (*callback_69_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRenderer_ShouldPopItem_function) (id self, SEL sel, UINavigationBar * p0, UINavigationItem * p1, GCHandle* exception_gchandle);
	-(BOOL) navigationBar:(UINavigationBar *)p0 shouldPopItem:(UINavigationItem *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		BOOL rv = { 0 };
		static callback_69_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRenderer_ShouldPopItem_function callback_69_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRenderer_ShouldPopItem;
		xamarin_registrar_dlsym ((void **) &callback_69_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRenderer_ShouldPopItem, "Microsoft.Maui.Controls", "callback_69_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRenderer_ShouldPopItem", 68);
		rv = callback_69_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRenderer_ShouldPopItem (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef void (*callback_70_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRenderer_ViewDidDisappear_function) (id self, SEL sel, BOOL p0, GCHandle* exception_gchandle);
	-(void) viewDidDisappear:(BOOL)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_70_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRenderer_ViewDidDisappear_function callback_70_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRenderer_ViewDidDisappear;
		xamarin_registrar_dlsym ((void **) &callback_70_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRenderer_ViewDidDisappear, "Microsoft.Maui.Controls", "callback_70_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRenderer_ViewDidDisappear", 69);
		callback_70_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRenderer_ViewDidDisappear (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_71_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRenderer_ViewWillAppear_function) (id self, SEL sel, BOOL p0, GCHandle* exception_gchandle);
	-(void) viewWillAppear:(BOOL)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_71_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRenderer_ViewWillAppear_function callback_71_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRenderer_ViewWillAppear;
		xamarin_registrar_dlsym ((void **) &callback_71_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRenderer_ViewWillAppear, "Microsoft.Maui.Controls", "callback_71_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRenderer_ViewWillAppear", 70);
		callback_71_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRenderer_ViewWillAppear (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_72_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRenderer_ViewDidLayoutSubviews_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) viewDidLayoutSubviews
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_72_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRenderer_ViewDidLayoutSubviews_function callback_72_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRenderer_ViewDidLayoutSubviews;
		xamarin_registrar_dlsym ((void **) &callback_72_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRenderer_ViewDidLayoutSubviews, "Microsoft.Maui.Controls", "callback_72_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRenderer_ViewDidLayoutSubviews", 71);
		callback_72_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRenderer_ViewDidLayoutSubviews (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_73_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRenderer_ViewDidLoad_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) viewDidLoad
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_73_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRenderer_ViewDidLoad_function callback_73_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRenderer_ViewDidLoad;
		xamarin_registrar_dlsym ((void **) &callback_73_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRenderer_ViewDidLoad, "Microsoft.Maui.Controls", "callback_73_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRenderer_ViewDidLoad", 72);
		callback_73_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRenderer_ViewDidLoad (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_74_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRenderer_ViewDidAppear_function) (id self, SEL sel, BOOL p0, GCHandle* exception_gchandle);
	-(void) viewDidAppear:(BOOL)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_74_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRenderer_ViewDidAppear_function callback_74_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRenderer_ViewDidAppear;
		xamarin_registrar_dlsym ((void **) &callback_74_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRenderer_ViewDidAppear, "Microsoft.Maui.Controls", "callback_74_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRenderer_ViewDidAppear", 73);
		callback_74_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRenderer_ViewDidAppear (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef NSArray * (*callback_75_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRenderer_PopToRootViewController_function) (id self, SEL sel, BOOL p0, GCHandle* exception_gchandle);
	-(NSArray *) popToRootViewControllerAnimated:(BOOL)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		NSArray * rv = { 0 };
		static callback_75_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRenderer_PopToRootViewController_function callback_75_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRenderer_PopToRootViewController;
		xamarin_registrar_dlsym ((void **) &callback_75_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRenderer_PopToRootViewController, "Microsoft.Maui.Controls", "callback_75_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRenderer_PopToRootViewController", 74);
		rv = callback_75_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRenderer_PopToRootViewController (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef NSArray * (*callback_76_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRenderer_get_ViewControllers_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(NSArray *) viewControllers
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		NSArray * rv = { 0 };
		static callback_76_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRenderer_get_ViewControllers_function callback_76_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRenderer_get_ViewControllers;
		xamarin_registrar_dlsym ((void **) &callback_76_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRenderer_get_ViewControllers, "Microsoft.Maui.Controls", "callback_76_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRenderer_get_ViewControllers", 75);
		rv = callback_76_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRenderer_get_ViewControllers (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef void (*callback_77_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRenderer_set_ViewControllers_function) (id self, SEL sel, NSArray * p0, GCHandle* exception_gchandle);
	-(void) setViewControllers:(NSArray *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_77_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRenderer_set_ViewControllers_function callback_77_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRenderer_set_ViewControllers;
		xamarin_registrar_dlsym ((void **) &callback_77_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRenderer_set_ViewControllers, "Microsoft.Maui.Controls", "callback_77_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRenderer_set_ViewControllers", 76);
		callback_77_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRenderer_set_ViewControllers (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef NSArray * (*callback_78_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRenderer_PopToViewController_function) (id self, SEL sel, UIViewController * p0, BOOL p1, GCHandle* exception_gchandle);
	-(NSArray *) popToViewController:(UIViewController *)p0 animated:(BOOL)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		NSArray * rv = { 0 };
		static callback_78_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRenderer_PopToViewController_function callback_78_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRenderer_PopToViewController;
		xamarin_registrar_dlsym ((void **) &callback_78_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRenderer_PopToViewController, "Microsoft.Maui.Controls", "callback_78_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRenderer_PopToViewController", 77);
		rv = callback_78_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRenderer_PopToViewController (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef void (*callback_79_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRenderer_PushViewController_function) (id self, SEL sel, UIViewController * p0, BOOL p1, GCHandle* exception_gchandle);
	-(void) pushViewController:(UIViewController *)p0 animated:(BOOL)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_79_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRenderer_PushViewController_function callback_79_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRenderer_PushViewController;
		xamarin_registrar_dlsym ((void **) &callback_79_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRenderer_PushViewController, "Microsoft.Maui.Controls", "callback_79_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRenderer_PushViewController", 78);
		callback_79_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRenderer_PushViewController (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef UIViewController * (*callback_80_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRenderer_PopViewController_function) (id self, SEL sel, BOOL p0, GCHandle* exception_gchandle);
	-(UIViewController *) popViewControllerAnimated:(BOOL)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		UIViewController * rv = { 0 };
		static callback_80_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRenderer_PopViewController_function callback_80_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRenderer_PopViewController;
		xamarin_registrar_dlsym ((void **) &callback_80_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRenderer_PopViewController, "Microsoft.Maui.Controls", "callback_80_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRenderer_PopViewController", 79);
		rv = callback_80_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRenderer_PopViewController (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
@end

@implementation Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootHeader_ShellSectionHeaderCell {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	typedef BOOL (*callback_83_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootHeader_ShellSectionHeaderCell_get_Selected_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(BOOL) isSelected
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		BOOL rv = { 0 };
		static callback_83_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootHeader_ShellSectionHeaderCell_get_Selected_function callback_83_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootHeader_ShellSectionHeaderCell_get_Selected;
		xamarin_registrar_dlsym ((void **) &callback_83_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootHeader_ShellSectionHeaderCell_get_Selected, "Microsoft.Maui.Controls", "callback_83_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootHeader_ShellSectionHeaderCell_get_Selected", 82);
		rv = callback_83_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootHeader_ShellSectionHeaderCell_get_Selected (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef void (*callback_84_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootHeader_ShellSectionHeaderCell_set_Selected_function) (id self, SEL sel, BOOL p0, GCHandle* exception_gchandle);
	-(void) setSelected:(BOOL)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_84_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootHeader_ShellSectionHeaderCell_set_Selected_function callback_84_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootHeader_ShellSectionHeaderCell_set_Selected;
		xamarin_registrar_dlsym ((void **) &callback_84_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootHeader_ShellSectionHeaderCell_set_Selected, "Microsoft.Maui.Controls", "callback_84_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootHeader_ShellSectionHeaderCell_set_Selected", 83);
		callback_84_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootHeader_ShellSectionHeaderCell_set_Selected (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_85_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootHeader_ShellSectionHeaderCell_LayoutSubviews_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) layoutSubviews
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_85_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootHeader_ShellSectionHeaderCell_LayoutSubviews_function callback_85_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootHeader_ShellSectionHeaderCell_LayoutSubviews;
		xamarin_registrar_dlsym ((void **) &callback_85_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootHeader_ShellSectionHeaderCell_LayoutSubviews, "Microsoft.Maui.Controls", "callback_85_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootHeader_ShellSectionHeaderCell_LayoutSubviews", 84);
		callback_85_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootHeader_ShellSectionHeaderCell_LayoutSubviews (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef CGSize (*callback_86_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootHeader_ShellSectionHeaderCell_SizeThatFits_function) (id self, SEL sel, CGSize p0, GCHandle* exception_gchandle);
	-(CGSize) sizeThatFits:(CGSize)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		CGSize rv = { 0 };
		static callback_86_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootHeader_ShellSectionHeaderCell_SizeThatFits_function callback_86_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootHeader_ShellSectionHeaderCell_SizeThatFits;
		xamarin_registrar_dlsym ((void **) &callback_86_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootHeader_ShellSectionHeaderCell_SizeThatFits, "Microsoft.Maui.Controls", "callback_86_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootHeader_ShellSectionHeaderCell_SizeThatFits", 85);
		rv = callback_86_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootHeader_ShellSectionHeaderCell_SizeThatFits (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef id (*callback_81_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootHeader_ShellSectionHeaderCell__ctor_function) (id self, SEL sel, bool* call_super, GCHandle* exception_gchandle);
	-(id) init
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_81_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootHeader_ShellSectionHeaderCell__ctor_function callback_81_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootHeader_ShellSectionHeaderCell__ctor;
		xamarin_registrar_dlsym ((void **) &callback_81_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootHeader_ShellSectionHeaderCell__ctor, "Microsoft.Maui.Controls", "callback_81_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootHeader_ShellSectionHeaderCell__ctor", 80);
		rv = callback_81_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootHeader_ShellSectionHeaderCell__ctor (self, _cmd, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [UICollectionViewCell class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	typedef id (*callback_82_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootHeader_ShellSectionHeaderCell__ctor_function) (id self, SEL sel, CGRect p0, bool* call_super, GCHandle* exception_gchandle);
	-(id) initWithFrame:(CGRect)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_82_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootHeader_ShellSectionHeaderCell__ctor_function callback_82_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootHeader_ShellSectionHeaderCell__ctor;
		xamarin_registrar_dlsym ((void **) &callback_82_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootHeader_ShellSectionHeaderCell__ctor, "Microsoft.Maui.Controls", "callback_82_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootHeader_ShellSectionHeaderCell__ctor", 81);
		rv = callback_82_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootHeader_ShellSectionHeaderCell__ctor (self, _cmd, p0, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [UICollectionViewCell class] };
			rv = ((id (*)(objc_super*, SEL, CGRect)) objc_msgSendSuper) (&super, @selector (initWithFrame:), p0);
		}
		return rv;
	}
@end

@implementation Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootHeader {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	typedef BOOL (*callback_88_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootHeader_CanMoveItem_function) (id self, SEL sel, UICollectionView * p0, NSIndexPath * p1, GCHandle* exception_gchandle);
	-(BOOL) collectionView:(UICollectionView *)p0 canMoveItemAtIndexPath:(NSIndexPath *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		BOOL rv = { 0 };
		static callback_88_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootHeader_CanMoveItem_function callback_88_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootHeader_CanMoveItem;
		xamarin_registrar_dlsym ((void **) &callback_88_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootHeader_CanMoveItem, "Microsoft.Maui.Controls", "callback_88_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootHeader_CanMoveItem", 87);
		rv = callback_88_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootHeader_CanMoveItem (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef UICollectionViewCell * (*callback_89_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootHeader_GetCell_function) (id self, SEL sel, UICollectionView * p0, NSIndexPath * p1, GCHandle* exception_gchandle);
	-(UICollectionViewCell *) collectionView:(UICollectionView *)p0 cellForItemAtIndexPath:(NSIndexPath *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		UICollectionViewCell * rv = { 0 };
		static callback_89_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootHeader_GetCell_function callback_89_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootHeader_GetCell;
		xamarin_registrar_dlsym ((void **) &callback_89_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootHeader_GetCell, "Microsoft.Maui.Controls", "callback_89_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootHeader_GetCell", 88);
		rv = callback_89_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootHeader_GetCell (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef void * (*callback_90_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootHeader_GetItemsCount_function) (id self, SEL sel, UICollectionView * p0, void * p1, GCHandle* exception_gchandle);
	-(void *) collectionView:(UICollectionView *)p0 numberOfItemsInSection:(void *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		void * rv = { 0 };
		static callback_90_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootHeader_GetItemsCount_function callback_90_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootHeader_GetItemsCount;
		xamarin_registrar_dlsym ((void **) &callback_90_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootHeader_GetItemsCount, "Microsoft.Maui.Controls", "callback_90_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootHeader_GetItemsCount", 89);
		rv = callback_90_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootHeader_GetItemsCount (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef void (*callback_91_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootHeader_ItemDeselected_function) (id self, SEL sel, UICollectionView * p0, NSIndexPath * p1, GCHandle* exception_gchandle);
	-(void) collectionView:(UICollectionView *)p0 didDeselectItemAtIndexPath:(NSIndexPath *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_91_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootHeader_ItemDeselected_function callback_91_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootHeader_ItemDeselected;
		xamarin_registrar_dlsym ((void **) &callback_91_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootHeader_ItemDeselected, "Microsoft.Maui.Controls", "callback_91_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootHeader_ItemDeselected", 90);
		callback_91_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootHeader_ItemDeselected (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_92_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootHeader_ItemSelected_function) (id self, SEL sel, UICollectionView * p0, NSIndexPath * p1, GCHandle* exception_gchandle);
	-(void) collectionView:(UICollectionView *)p0 didSelectItemAtIndexPath:(NSIndexPath *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_92_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootHeader_ItemSelected_function callback_92_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootHeader_ItemSelected;
		xamarin_registrar_dlsym ((void **) &callback_92_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootHeader_ItemSelected, "Microsoft.Maui.Controls", "callback_92_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootHeader_ItemSelected", 91);
		callback_92_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootHeader_ItemSelected (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void * (*callback_93_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootHeader_NumberOfSections_function) (id self, SEL sel, UICollectionView * p0, GCHandle* exception_gchandle);
	-(void *) numberOfSectionsInCollectionView:(UICollectionView *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		void * rv = { 0 };
		static callback_93_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootHeader_NumberOfSections_function callback_93_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootHeader_NumberOfSections;
		xamarin_registrar_dlsym ((void **) &callback_93_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootHeader_NumberOfSections, "Microsoft.Maui.Controls", "callback_93_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootHeader_NumberOfSections", 92);
		rv = callback_93_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootHeader_NumberOfSections (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef BOOL (*callback_94_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootHeader_ShouldSelectItem_function) (id self, SEL sel, UICollectionView * p0, NSIndexPath * p1, GCHandle* exception_gchandle);
	-(BOOL) collectionView:(UICollectionView *)p0 shouldSelectItemAtIndexPath:(NSIndexPath *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		BOOL rv = { 0 };
		static callback_94_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootHeader_ShouldSelectItem_function callback_94_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootHeader_ShouldSelectItem;
		xamarin_registrar_dlsym ((void **) &callback_94_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootHeader_ShouldSelectItem, "Microsoft.Maui.Controls", "callback_94_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootHeader_ShouldSelectItem", 93);
		rv = callback_94_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootHeader_ShouldSelectItem (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef void (*callback_95_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootHeader_ViewDidLayoutSubviews_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) viewDidLayoutSubviews
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_95_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootHeader_ViewDidLayoutSubviews_function callback_95_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootHeader_ViewDidLayoutSubviews;
		xamarin_registrar_dlsym ((void **) &callback_95_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootHeader_ViewDidLayoutSubviews, "Microsoft.Maui.Controls", "callback_95_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootHeader_ViewDidLayoutSubviews", 94);
		callback_95_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootHeader_ViewDidLayoutSubviews (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_96_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootHeader_ViewDidLoad_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) viewDidLoad
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_96_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootHeader_ViewDidLoad_function callback_96_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootHeader_ViewDidLoad;
		xamarin_registrar_dlsym ((void **) &callback_96_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootHeader_ViewDidLoad, "Microsoft.Maui.Controls", "callback_96_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootHeader_ViewDidLoad", 95);
		callback_96_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootHeader_ViewDidLoad (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef id (*callback_87_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootHeader__ctor_function) (id self, SEL sel, bool* call_super, GCHandle* exception_gchandle);
	-(id) init
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_87_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootHeader__ctor_function callback_87_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootHeader__ctor;
		xamarin_registrar_dlsym ((void **) &callback_87_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootHeader__ctor, "Microsoft.Maui.Controls", "callback_87_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootHeader__ctor", 86);
		rv = callback_87_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootHeader__ctor (self, _cmd, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [UICollectionViewController class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@implementation Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootRenderer {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	typedef void (*callback_97_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootRenderer_ViewDidLayoutSubviews_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) viewDidLayoutSubviews
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_97_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootRenderer_ViewDidLayoutSubviews_function callback_97_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootRenderer_ViewDidLayoutSubviews;
		xamarin_registrar_dlsym ((void **) &callback_97_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootRenderer_ViewDidLayoutSubviews, "Microsoft.Maui.Controls", "callback_97_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootRenderer_ViewDidLayoutSubviews", 96);
		callback_97_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootRenderer_ViewDidLayoutSubviews (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_98_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootRenderer_ViewWillTransitionToSize_function) (id self, SEL sel, CGSize p0, id p1, GCHandle* exception_gchandle);
	-(void) viewWillTransitionToSize:(CGSize)p0 withTransitionCoordinator:(id)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_98_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootRenderer_ViewWillTransitionToSize_function callback_98_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootRenderer_ViewWillTransitionToSize;
		xamarin_registrar_dlsym ((void **) &callback_98_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootRenderer_ViewWillTransitionToSize, "Microsoft.Maui.Controls", "callback_98_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootRenderer_ViewWillTransitionToSize", 97);
		callback_98_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootRenderer_ViewWillTransitionToSize (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_99_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootRenderer_ViewDidLoad_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) viewDidLoad
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_99_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootRenderer_ViewDidLoad_function callback_99_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootRenderer_ViewDidLoad;
		xamarin_registrar_dlsym ((void **) &callback_99_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootRenderer_ViewDidLoad, "Microsoft.Maui.Controls", "callback_99_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootRenderer_ViewDidLoad", 98);
		callback_99_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootRenderer_ViewDidLoad (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_100_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootRenderer_ViewWillAppear_function) (id self, SEL sel, BOOL p0, GCHandle* exception_gchandle);
	-(void) viewWillAppear:(BOOL)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_100_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootRenderer_ViewWillAppear_function callback_100_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootRenderer_ViewWillAppear;
		xamarin_registrar_dlsym ((void **) &callback_100_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootRenderer_ViewWillAppear, "Microsoft.Maui.Controls", "callback_100_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootRenderer_ViewWillAppear", 99);
		callback_100_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootRenderer_ViewWillAppear (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_101_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootRenderer_ViewSafeAreaInsetsDidChange_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) viewSafeAreaInsetsDidChange
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_101_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootRenderer_ViewSafeAreaInsetsDidChange_function callback_101_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootRenderer_ViewSafeAreaInsetsDidChange;
		xamarin_registrar_dlsym ((void **) &callback_101_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootRenderer_ViewSafeAreaInsetsDidChange, "Microsoft.Maui.Controls", "callback_101_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootRenderer_ViewSafeAreaInsetsDidChange", 100);
		callback_101_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootRenderer_ViewSafeAreaInsetsDidChange (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_102_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootRenderer_TraitCollectionDidChange_function) (id self, SEL sel, UITraitCollection * p0, GCHandle* exception_gchandle);
	-(void) traitCollectionDidChange:(UITraitCollection *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_102_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootRenderer_TraitCollectionDidChange_function callback_102_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootRenderer_TraitCollectionDidChange;
		xamarin_registrar_dlsym ((void **) &callback_102_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootRenderer_TraitCollectionDidChange, "Microsoft.Maui.Controls", "callback_102_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootRenderer_TraitCollectionDidChange", 101);
		callback_102_Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootRenderer_TraitCollectionDidChange (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
@end

@interface Microsoft_Maui_Controls_Platform_Compatibility_ShellTableViewSource_SeparatorView : UIView {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(void) layoutSubviews;
	-(BOOL) conformsToProtocol:(void *)p0;
	-(id) init;
@end

@implementation Microsoft_Maui_Controls_Platform_Compatibility_ShellTableViewSource_SeparatorView {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	typedef void (*callback_106_Microsoft_Maui_Controls_Platform_Compatibility_ShellTableViewSource_SeparatorView_LayoutSubviews_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) layoutSubviews
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_106_Microsoft_Maui_Controls_Platform_Compatibility_ShellTableViewSource_SeparatorView_LayoutSubviews_function callback_106_Microsoft_Maui_Controls_Platform_Compatibility_ShellTableViewSource_SeparatorView_LayoutSubviews;
		xamarin_registrar_dlsym ((void **) &callback_106_Microsoft_Maui_Controls_Platform_Compatibility_ShellTableViewSource_SeparatorView_LayoutSubviews, "Microsoft.Maui.Controls", "callback_106_Microsoft_Maui_Controls_Platform_Compatibility_ShellTableViewSource_SeparatorView_LayoutSubviews", 105);
		callback_106_Microsoft_Maui_Controls_Platform_Compatibility_ShellTableViewSource_SeparatorView_LayoutSubviews (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef id (*callback_105_Microsoft_Maui_Controls_Platform_Compatibility_ShellTableViewSource_SeparatorView__ctor_function) (id self, SEL sel, bool* call_super, GCHandle* exception_gchandle);
	-(id) init
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_105_Microsoft_Maui_Controls_Platform_Compatibility_ShellTableViewSource_SeparatorView__ctor_function callback_105_Microsoft_Maui_Controls_Platform_Compatibility_ShellTableViewSource_SeparatorView__ctor;
		xamarin_registrar_dlsym ((void **) &callback_105_Microsoft_Maui_Controls_Platform_Compatibility_ShellTableViewSource_SeparatorView__ctor, "Microsoft.Maui.Controls", "callback_105_Microsoft_Maui_Controls_Platform_Compatibility_ShellTableViewSource_SeparatorView__ctor", 104);
		rv = callback_105_Microsoft_Maui_Controls_Platform_Compatibility_ShellTableViewSource_SeparatorView__ctor (self, _cmd, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [UIView class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@implementation Microsoft_Maui_Controls_Platform_Compatibility_ShellTableViewSource {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	typedef CGFloat (*callback_107_Microsoft_Maui_Controls_Platform_Compatibility_ShellTableViewSource_GetHeightForRow_function) (id self, SEL sel, UITableView * p0, NSIndexPath * p1, GCHandle* exception_gchandle);
	-(CGFloat) tableView:(UITableView *)p0 heightForRowAtIndexPath:(NSIndexPath *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		CGFloat rv = { 0 };
		static callback_107_Microsoft_Maui_Controls_Platform_Compatibility_ShellTableViewSource_GetHeightForRow_function callback_107_Microsoft_Maui_Controls_Platform_Compatibility_ShellTableViewSource_GetHeightForRow;
		xamarin_registrar_dlsym ((void **) &callback_107_Microsoft_Maui_Controls_Platform_Compatibility_ShellTableViewSource_GetHeightForRow, "Microsoft.Maui.Controls", "callback_107_Microsoft_Maui_Controls_Platform_Compatibility_ShellTableViewSource_GetHeightForRow", 106);
		rv = callback_107_Microsoft_Maui_Controls_Platform_Compatibility_ShellTableViewSource_GetHeightForRow (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef UITableViewCell * (*callback_108_Microsoft_Maui_Controls_Platform_Compatibility_ShellTableViewSource_GetCell_function) (id self, SEL sel, UITableView * p0, NSIndexPath * p1, GCHandle* exception_gchandle);
	-(UITableViewCell *) tableView:(UITableView *)p0 cellForRowAtIndexPath:(NSIndexPath *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		UITableViewCell * rv = { 0 };
		static callback_108_Microsoft_Maui_Controls_Platform_Compatibility_ShellTableViewSource_GetCell_function callback_108_Microsoft_Maui_Controls_Platform_Compatibility_ShellTableViewSource_GetCell;
		xamarin_registrar_dlsym ((void **) &callback_108_Microsoft_Maui_Controls_Platform_Compatibility_ShellTableViewSource_GetCell, "Microsoft.Maui.Controls", "callback_108_Microsoft_Maui_Controls_Platform_Compatibility_ShellTableViewSource_GetCell", 107);
		rv = callback_108_Microsoft_Maui_Controls_Platform_Compatibility_ShellTableViewSource_GetCell (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef CGFloat (*callback_109_Microsoft_Maui_Controls_Platform_Compatibility_ShellTableViewSource_GetHeightForFooter_function) (id self, SEL sel, UITableView * p0, void * p1, GCHandle* exception_gchandle);
	-(CGFloat) tableView:(UITableView *)p0 heightForFooterInSection:(void *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		CGFloat rv = { 0 };
		static callback_109_Microsoft_Maui_Controls_Platform_Compatibility_ShellTableViewSource_GetHeightForFooter_function callback_109_Microsoft_Maui_Controls_Platform_Compatibility_ShellTableViewSource_GetHeightForFooter;
		xamarin_registrar_dlsym ((void **) &callback_109_Microsoft_Maui_Controls_Platform_Compatibility_ShellTableViewSource_GetHeightForFooter, "Microsoft.Maui.Controls", "callback_109_Microsoft_Maui_Controls_Platform_Compatibility_ShellTableViewSource_GetHeightForFooter", 108);
		rv = callback_109_Microsoft_Maui_Controls_Platform_Compatibility_ShellTableViewSource_GetHeightForFooter (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef UIView * (*callback_110_Microsoft_Maui_Controls_Platform_Compatibility_ShellTableViewSource_GetViewForFooter_function) (id self, SEL sel, UITableView * p0, void * p1, GCHandle* exception_gchandle);
	-(UIView *) tableView:(UITableView *)p0 viewForFooterInSection:(void *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		UIView * rv = { 0 };
		static callback_110_Microsoft_Maui_Controls_Platform_Compatibility_ShellTableViewSource_GetViewForFooter_function callback_110_Microsoft_Maui_Controls_Platform_Compatibility_ShellTableViewSource_GetViewForFooter;
		xamarin_registrar_dlsym ((void **) &callback_110_Microsoft_Maui_Controls_Platform_Compatibility_ShellTableViewSource_GetViewForFooter, "Microsoft.Maui.Controls", "callback_110_Microsoft_Maui_Controls_Platform_Compatibility_ShellTableViewSource_GetViewForFooter", 109);
		rv = callback_110_Microsoft_Maui_Controls_Platform_Compatibility_ShellTableViewSource_GetViewForFooter (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef void * (*callback_111_Microsoft_Maui_Controls_Platform_Compatibility_ShellTableViewSource_NumberOfSections_function) (id self, SEL sel, UITableView * p0, GCHandle* exception_gchandle);
	-(void *) numberOfSectionsInTableView:(UITableView *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		void * rv = { 0 };
		static callback_111_Microsoft_Maui_Controls_Platform_Compatibility_ShellTableViewSource_NumberOfSections_function callback_111_Microsoft_Maui_Controls_Platform_Compatibility_ShellTableViewSource_NumberOfSections;
		xamarin_registrar_dlsym ((void **) &callback_111_Microsoft_Maui_Controls_Platform_Compatibility_ShellTableViewSource_NumberOfSections, "Microsoft.Maui.Controls", "callback_111_Microsoft_Maui_Controls_Platform_Compatibility_ShellTableViewSource_NumberOfSections", 110);
		rv = callback_111_Microsoft_Maui_Controls_Platform_Compatibility_ShellTableViewSource_NumberOfSections (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef void (*callback_112_Microsoft_Maui_Controls_Platform_Compatibility_ShellTableViewSource_RowSelected_function) (id self, SEL sel, UITableView * p0, NSIndexPath * p1, GCHandle* exception_gchandle);
	-(void) tableView:(UITableView *)p0 didSelectRowAtIndexPath:(NSIndexPath *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_112_Microsoft_Maui_Controls_Platform_Compatibility_ShellTableViewSource_RowSelected_function callback_112_Microsoft_Maui_Controls_Platform_Compatibility_ShellTableViewSource_RowSelected;
		xamarin_registrar_dlsym ((void **) &callback_112_Microsoft_Maui_Controls_Platform_Compatibility_ShellTableViewSource_RowSelected, "Microsoft.Maui.Controls", "callback_112_Microsoft_Maui_Controls_Platform_Compatibility_ShellTableViewSource_RowSelected", 111);
		callback_112_Microsoft_Maui_Controls_Platform_Compatibility_ShellTableViewSource_RowSelected (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void * (*callback_113_Microsoft_Maui_Controls_Platform_Compatibility_ShellTableViewSource_RowsInSection_function) (id self, SEL sel, UITableView * p0, void * p1, GCHandle* exception_gchandle);
	-(void *) tableView:(UITableView *)p0 numberOfRowsInSection:(void *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		void * rv = { 0 };
		static callback_113_Microsoft_Maui_Controls_Platform_Compatibility_ShellTableViewSource_RowsInSection_function callback_113_Microsoft_Maui_Controls_Platform_Compatibility_ShellTableViewSource_RowsInSection;
		xamarin_registrar_dlsym ((void **) &callback_113_Microsoft_Maui_Controls_Platform_Compatibility_ShellTableViewSource_RowsInSection, "Microsoft.Maui.Controls", "callback_113_Microsoft_Maui_Controls_Platform_Compatibility_ShellTableViewSource_RowsInSection", 112);
		rv = callback_113_Microsoft_Maui_Controls_Platform_Compatibility_ShellTableViewSource_RowsInSection (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef void (*callback_114_Microsoft_Maui_Controls_Platform_Compatibility_ShellTableViewSource_Scrolled_function) (id self, SEL sel, UIScrollView * p0, GCHandle* exception_gchandle);
	-(void) scrollViewDidScroll:(UIScrollView *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_114_Microsoft_Maui_Controls_Platform_Compatibility_ShellTableViewSource_Scrolled_function callback_114_Microsoft_Maui_Controls_Platform_Compatibility_ShellTableViewSource_Scrolled;
		xamarin_registrar_dlsym ((void **) &callback_114_Microsoft_Maui_Controls_Platform_Compatibility_ShellTableViewSource_Scrolled, "Microsoft.Maui.Controls", "callback_114_Microsoft_Maui_Controls_Platform_Compatibility_ShellTableViewSource_Scrolled", 113);
		callback_114_Microsoft_Maui_Controls_Platform_Compatibility_ShellTableViewSource_Scrolled (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_115_Microsoft_Maui_Controls_Platform_Compatibility_ShellTableViewSource_WillDisplay_function) (id self, SEL sel, UITableView * p0, UITableViewCell * p1, NSIndexPath * p2, GCHandle* exception_gchandle);
	-(void) tableView:(UITableView *)p0 willDisplayCell:(UITableViewCell *)p1 forRowAtIndexPath:(NSIndexPath *)p2
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_115_Microsoft_Maui_Controls_Platform_Compatibility_ShellTableViewSource_WillDisplay_function callback_115_Microsoft_Maui_Controls_Platform_Compatibility_ShellTableViewSource_WillDisplay;
		xamarin_registrar_dlsym ((void **) &callback_115_Microsoft_Maui_Controls_Platform_Compatibility_ShellTableViewSource_WillDisplay, "Microsoft.Maui.Controls", "callback_115_Microsoft_Maui_Controls_Platform_Compatibility_ShellTableViewSource_WillDisplay", 114);
		callback_115_Microsoft_Maui_Controls_Platform_Compatibility_ShellTableViewSource_WillDisplay (self, _cmd, p0, p1, p2, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
@end

@interface Microsoft_Maui_Controls_Handlers_Items_MauiCollectionView : UICollectionView {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(void) scrollRectToVisible:(CGRect)p0 animated:(BOOL)p1;
	-(void) didMoveToWindow;
	-(BOOL) conformsToProtocol:(void *)p0;
@end

@implementation Microsoft_Maui_Controls_Handlers_Items_MauiCollectionView {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	typedef void (*callback_173_Microsoft_Maui_Controls_Handlers_Items_MauiCollectionView_ScrollRectToVisible_function) (id self, SEL sel, CGRect p0, BOOL p1, GCHandle* exception_gchandle);
	-(void) scrollRectToVisible:(CGRect)p0 animated:(BOOL)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_173_Microsoft_Maui_Controls_Handlers_Items_MauiCollectionView_ScrollRectToVisible_function callback_173_Microsoft_Maui_Controls_Handlers_Items_MauiCollectionView_ScrollRectToVisible;
		xamarin_registrar_dlsym ((void **) &callback_173_Microsoft_Maui_Controls_Handlers_Items_MauiCollectionView_ScrollRectToVisible, "Microsoft.Maui.Controls", "callback_173_Microsoft_Maui_Controls_Handlers_Items_MauiCollectionView_ScrollRectToVisible", 172);
		callback_173_Microsoft_Maui_Controls_Handlers_Items_MauiCollectionView_ScrollRectToVisible (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_174_Microsoft_Maui_Controls_Handlers_Items_MauiCollectionView_MovedToWindow_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) didMoveToWindow
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_174_Microsoft_Maui_Controls_Handlers_Items_MauiCollectionView_MovedToWindow_function callback_174_Microsoft_Maui_Controls_Handlers_Items_MauiCollectionView_MovedToWindow;
		xamarin_registrar_dlsym ((void **) &callback_174_Microsoft_Maui_Controls_Handlers_Items_MauiCollectionView_MovedToWindow, "Microsoft.Maui.Controls", "callback_174_Microsoft_Maui_Controls_Handlers_Items_MauiCollectionView_MovedToWindow", 173);
		callback_174_Microsoft_Maui_Controls_Handlers_Items_MauiCollectionView_MovedToWindow (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
@end

@implementation Microsoft_Maui_Controls_Handlers_Items2_CarouselViewController2 {
}

	typedef UICollectionViewCell * (*callback_193_Microsoft_Maui_Controls_Handlers_Items2_CarouselViewController2_GetCell_function) (id self, SEL sel, UICollectionView * p0, NSIndexPath * p1, GCHandle* exception_gchandle);
	-(UICollectionViewCell *) collectionView:(UICollectionView *)p0 cellForItemAtIndexPath:(NSIndexPath *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		UICollectionViewCell * rv = { 0 };
		static callback_193_Microsoft_Maui_Controls_Handlers_Items2_CarouselViewController2_GetCell_function callback_193_Microsoft_Maui_Controls_Handlers_Items2_CarouselViewController2_GetCell;
		xamarin_registrar_dlsym ((void **) &callback_193_Microsoft_Maui_Controls_Handlers_Items2_CarouselViewController2_GetCell, "Microsoft.Maui.Controls", "callback_193_Microsoft_Maui_Controls_Handlers_Items2_CarouselViewController2_GetCell", 192);
		rv = callback_193_Microsoft_Maui_Controls_Handlers_Items2_CarouselViewController2_GetCell (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef void * (*callback_194_Microsoft_Maui_Controls_Handlers_Items2_CarouselViewController2_GetItemsCount_function) (id self, SEL sel, UICollectionView * p0, void * p1, GCHandle* exception_gchandle);
	-(void *) collectionView:(UICollectionView *)p0 numberOfItemsInSection:(void *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		void * rv = { 0 };
		static callback_194_Microsoft_Maui_Controls_Handlers_Items2_CarouselViewController2_GetItemsCount_function callback_194_Microsoft_Maui_Controls_Handlers_Items2_CarouselViewController2_GetItemsCount;
		xamarin_registrar_dlsym ((void **) &callback_194_Microsoft_Maui_Controls_Handlers_Items2_CarouselViewController2_GetItemsCount, "Microsoft.Maui.Controls", "callback_194_Microsoft_Maui_Controls_Handlers_Items2_CarouselViewController2_GetItemsCount", 193);
		rv = callback_194_Microsoft_Maui_Controls_Handlers_Items2_CarouselViewController2_GetItemsCount (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef void (*callback_195_Microsoft_Maui_Controls_Handlers_Items2_CarouselViewController2_ViewDidLoad_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) viewDidLoad
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_195_Microsoft_Maui_Controls_Handlers_Items2_CarouselViewController2_ViewDidLoad_function callback_195_Microsoft_Maui_Controls_Handlers_Items2_CarouselViewController2_ViewDidLoad;
		xamarin_registrar_dlsym ((void **) &callback_195_Microsoft_Maui_Controls_Handlers_Items2_CarouselViewController2_ViewDidLoad, "Microsoft.Maui.Controls", "callback_195_Microsoft_Maui_Controls_Handlers_Items2_CarouselViewController2_ViewDidLoad", 194);
		callback_195_Microsoft_Maui_Controls_Handlers_Items2_CarouselViewController2_ViewDidLoad (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_196_Microsoft_Maui_Controls_Handlers_Items2_CarouselViewController2_ViewWillLayoutSubviews_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) viewWillLayoutSubviews
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_196_Microsoft_Maui_Controls_Handlers_Items2_CarouselViewController2_ViewWillLayoutSubviews_function callback_196_Microsoft_Maui_Controls_Handlers_Items2_CarouselViewController2_ViewWillLayoutSubviews;
		xamarin_registrar_dlsym ((void **) &callback_196_Microsoft_Maui_Controls_Handlers_Items2_CarouselViewController2_ViewWillLayoutSubviews, "Microsoft.Maui.Controls", "callback_196_Microsoft_Maui_Controls_Handlers_Items2_CarouselViewController2_ViewWillLayoutSubviews", 195);
		callback_196_Microsoft_Maui_Controls_Handlers_Items2_CarouselViewController2_ViewWillLayoutSubviews (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_197_Microsoft_Maui_Controls_Handlers_Items2_CarouselViewController2_ViewDidLayoutSubviews_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) viewDidLayoutSubviews
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_197_Microsoft_Maui_Controls_Handlers_Items2_CarouselViewController2_ViewDidLayoutSubviews_function callback_197_Microsoft_Maui_Controls_Handlers_Items2_CarouselViewController2_ViewDidLayoutSubviews;
		xamarin_registrar_dlsym ((void **) &callback_197_Microsoft_Maui_Controls_Handlers_Items2_CarouselViewController2_ViewDidLayoutSubviews, "Microsoft.Maui.Controls", "callback_197_Microsoft_Maui_Controls_Handlers_Items2_CarouselViewController2_ViewDidLayoutSubviews", 196);
		callback_197_Microsoft_Maui_Controls_Handlers_Items2_CarouselViewController2_ViewDidLayoutSubviews (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_198_Microsoft_Maui_Controls_Handlers_Items2_CarouselViewController2_DraggingStarted_function) (id self, SEL sel, UIScrollView * p0, GCHandle* exception_gchandle);
	-(void) scrollViewWillBeginDragging:(UIScrollView *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_198_Microsoft_Maui_Controls_Handlers_Items2_CarouselViewController2_DraggingStarted_function callback_198_Microsoft_Maui_Controls_Handlers_Items2_CarouselViewController2_DraggingStarted;
		xamarin_registrar_dlsym ((void **) &callback_198_Microsoft_Maui_Controls_Handlers_Items2_CarouselViewController2_DraggingStarted, "Microsoft.Maui.Controls", "callback_198_Microsoft_Maui_Controls_Handlers_Items2_CarouselViewController2_DraggingStarted", 197);
		callback_198_Microsoft_Maui_Controls_Handlers_Items2_CarouselViewController2_DraggingStarted (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_199_Microsoft_Maui_Controls_Handlers_Items2_CarouselViewController2_DraggingEnded_function) (id self, SEL sel, UIScrollView * p0, BOOL p1, GCHandle* exception_gchandle);
	-(void) scrollViewDidEndDragging:(UIScrollView *)p0 willDecelerate:(BOOL)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_199_Microsoft_Maui_Controls_Handlers_Items2_CarouselViewController2_DraggingEnded_function callback_199_Microsoft_Maui_Controls_Handlers_Items2_CarouselViewController2_DraggingEnded;
		xamarin_registrar_dlsym ((void **) &callback_199_Microsoft_Maui_Controls_Handlers_Items2_CarouselViewController2_DraggingEnded, "Microsoft.Maui.Controls", "callback_199_Microsoft_Maui_Controls_Handlers_Items2_CarouselViewController2_DraggingEnded", 198);
		callback_199_Microsoft_Maui_Controls_Handlers_Items2_CarouselViewController2_DraggingEnded (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}
@end

@interface Microsoft_Maui_Controls_Handlers_Items2_LayoutFactory2_CustomUICollectionViewCompositionalLayout : UICollectionViewCompositionalLayout {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(CGPoint) targetContentOffsetForProposedContentOffset:(CGPoint)p0 withScrollingVelocity:(CGPoint)p1;
	-(BOOL) conformsToProtocol:(void *)p0;
@end

@implementation Microsoft_Maui_Controls_Handlers_Items2_LayoutFactory2_CustomUICollectionViewCompositionalLayout {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	typedef CGPoint (*callback_225_Microsoft_Maui_Controls_Handlers_Items2_LayoutFactory2_CustomUICollectionViewCompositionalLayout_TargetContentOffset_function) (id self, SEL sel, CGPoint p0, CGPoint p1, GCHandle* exception_gchandle);
	-(CGPoint) targetContentOffsetForProposedContentOffset:(CGPoint)p0 withScrollingVelocity:(CGPoint)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		CGPoint rv = { 0 };
		static callback_225_Microsoft_Maui_Controls_Handlers_Items2_LayoutFactory2_CustomUICollectionViewCompositionalLayout_TargetContentOffset_function callback_225_Microsoft_Maui_Controls_Handlers_Items2_LayoutFactory2_CustomUICollectionViewCompositionalLayout_TargetContentOffset;
		xamarin_registrar_dlsym ((void **) &callback_225_Microsoft_Maui_Controls_Handlers_Items2_LayoutFactory2_CustomUICollectionViewCompositionalLayout_TargetContentOffset, "Microsoft.Maui.Controls", "callback_225_Microsoft_Maui_Controls_Handlers_Items2_LayoutFactory2_CustomUICollectionViewCompositionalLayout_TargetContentOffset", 224);
		rv = callback_225_Microsoft_Maui_Controls_Handlers_Items2_LayoutFactory2_CustomUICollectionViewCompositionalLayout_TargetContentOffset (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
@end

@interface Microsoft_Maui_Controls_Handlers_Compatibility_PhoneFlyoutPageRenderer_ChildViewController : UIViewController {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(void) viewDidLayoutSubviews;
	-(BOOL) conformsToProtocol:(void *)p0;
	-(id) init;
@end

@implementation Microsoft_Maui_Controls_Handlers_Compatibility_PhoneFlyoutPageRenderer_ChildViewController {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	typedef void (*callback_247_Microsoft_Maui_Controls_Handlers_Compatibility_PhoneFlyoutPageRenderer_ChildViewController_ViewDidLayoutSubviews_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) viewDidLayoutSubviews
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_247_Microsoft_Maui_Controls_Handlers_Compatibility_PhoneFlyoutPageRenderer_ChildViewController_ViewDidLayoutSubviews_function callback_247_Microsoft_Maui_Controls_Handlers_Compatibility_PhoneFlyoutPageRenderer_ChildViewController_ViewDidLayoutSubviews;
		xamarin_registrar_dlsym ((void **) &callback_247_Microsoft_Maui_Controls_Handlers_Compatibility_PhoneFlyoutPageRenderer_ChildViewController_ViewDidLayoutSubviews, "Microsoft.Maui.Controls", "callback_247_Microsoft_Maui_Controls_Handlers_Compatibility_PhoneFlyoutPageRenderer_ChildViewController_ViewDidLayoutSubviews", 246);
		callback_247_Microsoft_Maui_Controls_Handlers_Compatibility_PhoneFlyoutPageRenderer_ChildViewController_ViewDidLayoutSubviews (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef id (*callback_248_Microsoft_Maui_Controls_Handlers_Compatibility_PhoneFlyoutPageRenderer_ChildViewController__ctor_function) (id self, SEL sel, bool* call_super, GCHandle* exception_gchandle);
	-(id) init
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_248_Microsoft_Maui_Controls_Handlers_Compatibility_PhoneFlyoutPageRenderer_ChildViewController__ctor_function callback_248_Microsoft_Maui_Controls_Handlers_Compatibility_PhoneFlyoutPageRenderer_ChildViewController__ctor;
		xamarin_registrar_dlsym ((void **) &callback_248_Microsoft_Maui_Controls_Handlers_Compatibility_PhoneFlyoutPageRenderer_ChildViewController__ctor, "Microsoft.Maui.Controls", "callback_248_Microsoft_Maui_Controls_Handlers_Compatibility_PhoneFlyoutPageRenderer_ChildViewController__ctor", 247);
		rv = callback_248_Microsoft_Maui_Controls_Handlers_Compatibility_PhoneFlyoutPageRenderer_ChildViewController__ctor (self, _cmd, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [UIViewController class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@implementation Microsoft_Maui_Controls_Handlers_Compatibility_PhoneFlyoutPageRenderer {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	typedef void (*callback_250_Microsoft_Maui_Controls_Handlers_Compatibility_PhoneFlyoutPageRenderer_ViewDidAppear_function) (id self, SEL sel, BOOL p0, GCHandle* exception_gchandle);
	-(void) viewDidAppear:(BOOL)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_250_Microsoft_Maui_Controls_Handlers_Compatibility_PhoneFlyoutPageRenderer_ViewDidAppear_function callback_250_Microsoft_Maui_Controls_Handlers_Compatibility_PhoneFlyoutPageRenderer_ViewDidAppear;
		xamarin_registrar_dlsym ((void **) &callback_250_Microsoft_Maui_Controls_Handlers_Compatibility_PhoneFlyoutPageRenderer_ViewDidAppear, "Microsoft.Maui.Controls", "callback_250_Microsoft_Maui_Controls_Handlers_Compatibility_PhoneFlyoutPageRenderer_ViewDidAppear", 249);
		callback_250_Microsoft_Maui_Controls_Handlers_Compatibility_PhoneFlyoutPageRenderer_ViewDidAppear (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_251_Microsoft_Maui_Controls_Handlers_Compatibility_PhoneFlyoutPageRenderer_ViewDidDisappear_function) (id self, SEL sel, BOOL p0, GCHandle* exception_gchandle);
	-(void) viewDidDisappear:(BOOL)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_251_Microsoft_Maui_Controls_Handlers_Compatibility_PhoneFlyoutPageRenderer_ViewDidDisappear_function callback_251_Microsoft_Maui_Controls_Handlers_Compatibility_PhoneFlyoutPageRenderer_ViewDidDisappear;
		xamarin_registrar_dlsym ((void **) &callback_251_Microsoft_Maui_Controls_Handlers_Compatibility_PhoneFlyoutPageRenderer_ViewDidDisappear, "Microsoft.Maui.Controls", "callback_251_Microsoft_Maui_Controls_Handlers_Compatibility_PhoneFlyoutPageRenderer_ViewDidDisappear", 250);
		callback_251_Microsoft_Maui_Controls_Handlers_Compatibility_PhoneFlyoutPageRenderer_ViewDidDisappear (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_252_Microsoft_Maui_Controls_Handlers_Compatibility_PhoneFlyoutPageRenderer_ViewDidLayoutSubviews_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) viewDidLayoutSubviews
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_252_Microsoft_Maui_Controls_Handlers_Compatibility_PhoneFlyoutPageRenderer_ViewDidLayoutSubviews_function callback_252_Microsoft_Maui_Controls_Handlers_Compatibility_PhoneFlyoutPageRenderer_ViewDidLayoutSubviews;
		xamarin_registrar_dlsym ((void **) &callback_252_Microsoft_Maui_Controls_Handlers_Compatibility_PhoneFlyoutPageRenderer_ViewDidLayoutSubviews, "Microsoft.Maui.Controls", "callback_252_Microsoft_Maui_Controls_Handlers_Compatibility_PhoneFlyoutPageRenderer_ViewDidLayoutSubviews", 251);
		callback_252_Microsoft_Maui_Controls_Handlers_Compatibility_PhoneFlyoutPageRenderer_ViewDidLayoutSubviews (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_253_Microsoft_Maui_Controls_Handlers_Compatibility_PhoneFlyoutPageRenderer_ViewWillLayoutSubviews_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) viewWillLayoutSubviews
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_253_Microsoft_Maui_Controls_Handlers_Compatibility_PhoneFlyoutPageRenderer_ViewWillLayoutSubviews_function callback_253_Microsoft_Maui_Controls_Handlers_Compatibility_PhoneFlyoutPageRenderer_ViewWillLayoutSubviews;
		xamarin_registrar_dlsym ((void **) &callback_253_Microsoft_Maui_Controls_Handlers_Compatibility_PhoneFlyoutPageRenderer_ViewWillLayoutSubviews, "Microsoft.Maui.Controls", "callback_253_Microsoft_Maui_Controls_Handlers_Compatibility_PhoneFlyoutPageRenderer_ViewWillLayoutSubviews", 252);
		callback_253_Microsoft_Maui_Controls_Handlers_Compatibility_PhoneFlyoutPageRenderer_ViewWillLayoutSubviews (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_254_Microsoft_Maui_Controls_Handlers_Compatibility_PhoneFlyoutPageRenderer_ViewDidLoad_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) viewDidLoad
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_254_Microsoft_Maui_Controls_Handlers_Compatibility_PhoneFlyoutPageRenderer_ViewDidLoad_function callback_254_Microsoft_Maui_Controls_Handlers_Compatibility_PhoneFlyoutPageRenderer_ViewDidLoad;
		xamarin_registrar_dlsym ((void **) &callback_254_Microsoft_Maui_Controls_Handlers_Compatibility_PhoneFlyoutPageRenderer_ViewDidLoad, "Microsoft.Maui.Controls", "callback_254_Microsoft_Maui_Controls_Handlers_Compatibility_PhoneFlyoutPageRenderer_ViewDidLoad", 253);
		callback_254_Microsoft_Maui_Controls_Handlers_Compatibility_PhoneFlyoutPageRenderer_ViewDidLoad (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_255_Microsoft_Maui_Controls_Handlers_Compatibility_PhoneFlyoutPageRenderer_ViewWillTransitionToSize_function) (id self, SEL sel, CGSize p0, id p1, GCHandle* exception_gchandle);
	-(void) viewWillTransitionToSize:(CGSize)p0 withTransitionCoordinator:(id)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_255_Microsoft_Maui_Controls_Handlers_Compatibility_PhoneFlyoutPageRenderer_ViewWillTransitionToSize_function callback_255_Microsoft_Maui_Controls_Handlers_Compatibility_PhoneFlyoutPageRenderer_ViewWillTransitionToSize;
		xamarin_registrar_dlsym ((void **) &callback_255_Microsoft_Maui_Controls_Handlers_Compatibility_PhoneFlyoutPageRenderer_ViewWillTransitionToSize, "Microsoft.Maui.Controls", "callback_255_Microsoft_Maui_Controls_Handlers_Compatibility_PhoneFlyoutPageRenderer_ViewWillTransitionToSize", 254);
		callback_255_Microsoft_Maui_Controls_Handlers_Compatibility_PhoneFlyoutPageRenderer_ViewWillTransitionToSize (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef UIViewController * (*callback_256_Microsoft_Maui_Controls_Handlers_Compatibility_PhoneFlyoutPageRenderer_ChildViewControllerForStatusBarHidden_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(UIViewController *) childViewControllerForStatusBarHidden
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		UIViewController * rv = { 0 };
		static callback_256_Microsoft_Maui_Controls_Handlers_Compatibility_PhoneFlyoutPageRenderer_ChildViewControllerForStatusBarHidden_function callback_256_Microsoft_Maui_Controls_Handlers_Compatibility_PhoneFlyoutPageRenderer_ChildViewControllerForStatusBarHidden;
		xamarin_registrar_dlsym ((void **) &callback_256_Microsoft_Maui_Controls_Handlers_Compatibility_PhoneFlyoutPageRenderer_ChildViewControllerForStatusBarHidden, "Microsoft.Maui.Controls", "callback_256_Microsoft_Maui_Controls_Handlers_Compatibility_PhoneFlyoutPageRenderer_ChildViewControllerForStatusBarHidden", 255);
		rv = callback_256_Microsoft_Maui_Controls_Handlers_Compatibility_PhoneFlyoutPageRenderer_ChildViewControllerForStatusBarHidden (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef UIViewController * (*callback_257_Microsoft_Maui_Controls_Handlers_Compatibility_PhoneFlyoutPageRenderer_get_ChildViewControllerForHomeIndicatorAutoHidden_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(UIViewController *) childViewControllerForHomeIndicatorAutoHidden
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		UIViewController * rv = { 0 };
		static callback_257_Microsoft_Maui_Controls_Handlers_Compatibility_PhoneFlyoutPageRenderer_get_ChildViewControllerForHomeIndicatorAutoHidden_function callback_257_Microsoft_Maui_Controls_Handlers_Compatibility_PhoneFlyoutPageRenderer_get_ChildViewControllerForHomeIndicatorAutoHidden;
		xamarin_registrar_dlsym ((void **) &callback_257_Microsoft_Maui_Controls_Handlers_Compatibility_PhoneFlyoutPageRenderer_get_ChildViewControllerForHomeIndicatorAutoHidden, "Microsoft.Maui.Controls", "callback_257_Microsoft_Maui_Controls_Handlers_Compatibility_PhoneFlyoutPageRenderer_get_ChildViewControllerForHomeIndicatorAutoHidden", 256);
		rv = callback_257_Microsoft_Maui_Controls_Handlers_Compatibility_PhoneFlyoutPageRenderer_get_ChildViewControllerForHomeIndicatorAutoHidden (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef id (*callback_249_Microsoft_Maui_Controls_Handlers_Compatibility_PhoneFlyoutPageRenderer__ctor_function) (id self, SEL sel, bool* call_super, GCHandle* exception_gchandle);
	-(id) init
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_249_Microsoft_Maui_Controls_Handlers_Compatibility_PhoneFlyoutPageRenderer__ctor_function callback_249_Microsoft_Maui_Controls_Handlers_Compatibility_PhoneFlyoutPageRenderer__ctor;
		xamarin_registrar_dlsym ((void **) &callback_249_Microsoft_Maui_Controls_Handlers_Compatibility_PhoneFlyoutPageRenderer__ctor, "Microsoft.Maui.Controls", "callback_249_Microsoft_Maui_Controls_Handlers_Compatibility_PhoneFlyoutPageRenderer__ctor", 248);
		rv = callback_249_Microsoft_Maui_Controls_Handlers_Compatibility_PhoneFlyoutPageRenderer__ctor (self, _cmd, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [UIViewController class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@implementation Microsoft_Maui_Platform_MauiView {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	typedef void (*callback_504_Microsoft_Maui_Platform_MauiView_SafeAreaInsetsDidChange_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) safeAreaInsetsDidChange
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_504_Microsoft_Maui_Platform_MauiView_SafeAreaInsetsDidChange_function callback_504_Microsoft_Maui_Platform_MauiView_SafeAreaInsetsDidChange;
		xamarin_registrar_dlsym ((void **) &callback_504_Microsoft_Maui_Platform_MauiView_SafeAreaInsetsDidChange, "Microsoft.Maui", "callback_504_Microsoft_Maui_Platform_MauiView_SafeAreaInsetsDidChange", 123);
		callback_504_Microsoft_Maui_Platform_MauiView_SafeAreaInsetsDidChange (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef CGSize (*callback_505_Microsoft_Maui_Platform_MauiView_SizeThatFits_function) (id self, SEL sel, CGSize p0, GCHandle* exception_gchandle);
	-(CGSize) sizeThatFits:(CGSize)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		CGSize rv = { 0 };
		static callback_505_Microsoft_Maui_Platform_MauiView_SizeThatFits_function callback_505_Microsoft_Maui_Platform_MauiView_SizeThatFits;
		xamarin_registrar_dlsym ((void **) &callback_505_Microsoft_Maui_Platform_MauiView_SizeThatFits, "Microsoft.Maui", "callback_505_Microsoft_Maui_Platform_MauiView_SizeThatFits", 124);
		rv = callback_505_Microsoft_Maui_Platform_MauiView_SizeThatFits (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef void (*callback_506_Microsoft_Maui_Platform_MauiView_LayoutSubviews_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) layoutSubviews
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_506_Microsoft_Maui_Platform_MauiView_LayoutSubviews_function callback_506_Microsoft_Maui_Platform_MauiView_LayoutSubviews;
		xamarin_registrar_dlsym ((void **) &callback_506_Microsoft_Maui_Platform_MauiView_LayoutSubviews, "Microsoft.Maui", "callback_506_Microsoft_Maui_Platform_MauiView_LayoutSubviews", 125);
		callback_506_Microsoft_Maui_Platform_MauiView_LayoutSubviews (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_507_Microsoft_Maui_Platform_MauiView_SetNeedsLayout_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) setNeedsLayout
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_507_Microsoft_Maui_Platform_MauiView_SetNeedsLayout_function callback_507_Microsoft_Maui_Platform_MauiView_SetNeedsLayout;
		xamarin_registrar_dlsym ((void **) &callback_507_Microsoft_Maui_Platform_MauiView_SetNeedsLayout, "Microsoft.Maui", "callback_507_Microsoft_Maui_Platform_MauiView_SetNeedsLayout", 126);
		callback_507_Microsoft_Maui_Platform_MauiView_SetNeedsLayout (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_508_Microsoft_Maui_Platform_MauiView_MovedToWindow_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) didMoveToWindow
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_508_Microsoft_Maui_Platform_MauiView_MovedToWindow_function callback_508_Microsoft_Maui_Platform_MauiView_MovedToWindow;
		xamarin_registrar_dlsym ((void **) &callback_508_Microsoft_Maui_Platform_MauiView_MovedToWindow, "Microsoft.Maui", "callback_508_Microsoft_Maui_Platform_MauiView_MovedToWindow", 127);
		callback_508_Microsoft_Maui_Platform_MauiView_MovedToWindow (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef id (*callback_509_Microsoft_Maui_Platform_MauiView__ctor_function) (id self, SEL sel, bool* call_super, GCHandle* exception_gchandle);
	-(id) init
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_509_Microsoft_Maui_Platform_MauiView__ctor_function callback_509_Microsoft_Maui_Platform_MauiView__ctor;
		xamarin_registrar_dlsym ((void **) &callback_509_Microsoft_Maui_Platform_MauiView__ctor, "Microsoft.Maui", "callback_509_Microsoft_Maui_Platform_MauiView__ctor", 128);
		rv = callback_509_Microsoft_Maui_Platform_MauiView__ctor (self, _cmd, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [UIView class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@implementation Microsoft_Maui_Platform_ContentView {
}

	typedef void (*callback_428_Microsoft_Maui_Platform_ContentView_LayoutSubviews_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) layoutSubviews
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_428_Microsoft_Maui_Platform_ContentView_LayoutSubviews_function callback_428_Microsoft_Maui_Platform_ContentView_LayoutSubviews;
		xamarin_registrar_dlsym ((void **) &callback_428_Microsoft_Maui_Platform_ContentView_LayoutSubviews, "Microsoft.Maui", "callback_428_Microsoft_Maui_Platform_ContentView_LayoutSubviews", 47);
		callback_428_Microsoft_Maui_Platform_ContentView_LayoutSubviews (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_429_Microsoft_Maui_Platform_ContentView_WillRemoveSubview_function) (id self, SEL sel, UIView * p0, GCHandle* exception_gchandle);
	-(void) willRemoveSubview:(UIView *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_429_Microsoft_Maui_Platform_ContentView_WillRemoveSubview_function callback_429_Microsoft_Maui_Platform_ContentView_WillRemoveSubview;
		xamarin_registrar_dlsym ((void **) &callback_429_Microsoft_Maui_Platform_ContentView_WillRemoveSubview, "Microsoft.Maui", "callback_429_Microsoft_Maui_Platform_ContentView_WillRemoveSubview", 48);
		callback_429_Microsoft_Maui_Platform_ContentView_WillRemoveSubview (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef id (*callback_427_Microsoft_Maui_Platform_ContentView__ctor_function) (id self, SEL sel, bool* call_super, GCHandle* exception_gchandle);
	-(id) init
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_427_Microsoft_Maui_Platform_ContentView__ctor_function callback_427_Microsoft_Maui_Platform_ContentView__ctor;
		xamarin_registrar_dlsym ((void **) &callback_427_Microsoft_Maui_Platform_ContentView__ctor, "Microsoft.Maui", "callback_427_Microsoft_Maui_Platform_ContentView__ctor", 46);
		rv = callback_427_Microsoft_Maui_Platform_ContentView__ctor (self, _cmd, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [Microsoft_Maui_Platform_MauiView class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@interface Microsoft_Maui_Controls_Handlers_Compatibility_FrameRenderer_FrameView : Microsoft_Maui_Platform_ContentView {
}
	-(void) removeFromSuperview;
	-(BOOL) pointInside:(CGPoint)p0 withEvent:(UIEvent *)p1;
	-(id) init;
@end

@implementation Microsoft_Maui_Controls_Handlers_Compatibility_FrameRenderer_FrameView {
}

	typedef void (*callback_258_Microsoft_Maui_Controls_Handlers_Compatibility_FrameRenderer_FrameView_RemoveFromSuperview_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) removeFromSuperview
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_258_Microsoft_Maui_Controls_Handlers_Compatibility_FrameRenderer_FrameView_RemoveFromSuperview_function callback_258_Microsoft_Maui_Controls_Handlers_Compatibility_FrameRenderer_FrameView_RemoveFromSuperview;
		xamarin_registrar_dlsym ((void **) &callback_258_Microsoft_Maui_Controls_Handlers_Compatibility_FrameRenderer_FrameView_RemoveFromSuperview, "Microsoft.Maui.Controls", "callback_258_Microsoft_Maui_Controls_Handlers_Compatibility_FrameRenderer_FrameView_RemoveFromSuperview", 257);
		callback_258_Microsoft_Maui_Controls_Handlers_Compatibility_FrameRenderer_FrameView_RemoveFromSuperview (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef BOOL (*callback_259_Microsoft_Maui_Controls_Handlers_Compatibility_FrameRenderer_FrameView_PointInside_function) (id self, SEL sel, CGPoint p0, UIEvent * p1, GCHandle* exception_gchandle);
	-(BOOL) pointInside:(CGPoint)p0 withEvent:(UIEvent *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		BOOL rv = { 0 };
		static callback_259_Microsoft_Maui_Controls_Handlers_Compatibility_FrameRenderer_FrameView_PointInside_function callback_259_Microsoft_Maui_Controls_Handlers_Compatibility_FrameRenderer_FrameView_PointInside;
		xamarin_registrar_dlsym ((void **) &callback_259_Microsoft_Maui_Controls_Handlers_Compatibility_FrameRenderer_FrameView_PointInside, "Microsoft.Maui.Controls", "callback_259_Microsoft_Maui_Controls_Handlers_Compatibility_FrameRenderer_FrameView_PointInside", 258);
		rv = callback_259_Microsoft_Maui_Controls_Handlers_Compatibility_FrameRenderer_FrameView_PointInside (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef id (*callback_260_Microsoft_Maui_Controls_Handlers_Compatibility_FrameRenderer_FrameView__ctor_function) (id self, SEL sel, bool* call_super, GCHandle* exception_gchandle);
	-(id) init
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_260_Microsoft_Maui_Controls_Handlers_Compatibility_FrameRenderer_FrameView__ctor_function callback_260_Microsoft_Maui_Controls_Handlers_Compatibility_FrameRenderer_FrameView__ctor;
		xamarin_registrar_dlsym ((void **) &callback_260_Microsoft_Maui_Controls_Handlers_Compatibility_FrameRenderer_FrameView__ctor, "Microsoft.Maui.Controls", "callback_260_Microsoft_Maui_Controls_Handlers_Compatibility_FrameRenderer_FrameView__ctor", 259);
		rv = callback_260_Microsoft_Maui_Controls_Handlers_Compatibility_FrameRenderer_FrameView__ctor (self, _cmd, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [Microsoft_Maui_Platform_ContentView class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@implementation Microsoft_Maui_Controls_Handlers_Compatibility_FrameRenderer {
}

	typedef void (*callback_262_Microsoft_Maui_Controls_Handlers_Compatibility_FrameRenderer_AddSubview_function) (id self, SEL sel, UIView * p0, GCHandle* exception_gchandle);
	-(void) addSubview:(UIView *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_262_Microsoft_Maui_Controls_Handlers_Compatibility_FrameRenderer_AddSubview_function callback_262_Microsoft_Maui_Controls_Handlers_Compatibility_FrameRenderer_AddSubview;
		xamarin_registrar_dlsym ((void **) &callback_262_Microsoft_Maui_Controls_Handlers_Compatibility_FrameRenderer_AddSubview, "Microsoft.Maui.Controls", "callback_262_Microsoft_Maui_Controls_Handlers_Compatibility_FrameRenderer_AddSubview", 261);
		callback_262_Microsoft_Maui_Controls_Handlers_Compatibility_FrameRenderer_AddSubview (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_263_Microsoft_Maui_Controls_Handlers_Compatibility_FrameRenderer_TraitCollectionDidChange_function) (id self, SEL sel, UITraitCollection * p0, GCHandle* exception_gchandle);
	-(void) traitCollectionDidChange:(UITraitCollection *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_263_Microsoft_Maui_Controls_Handlers_Compatibility_FrameRenderer_TraitCollectionDidChange_function callback_263_Microsoft_Maui_Controls_Handlers_Compatibility_FrameRenderer_TraitCollectionDidChange;
		xamarin_registrar_dlsym ((void **) &callback_263_Microsoft_Maui_Controls_Handlers_Compatibility_FrameRenderer_TraitCollectionDidChange, "Microsoft.Maui.Controls", "callback_263_Microsoft_Maui_Controls_Handlers_Compatibility_FrameRenderer_TraitCollectionDidChange", 262);
		callback_263_Microsoft_Maui_Controls_Handlers_Compatibility_FrameRenderer_TraitCollectionDidChange (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_264_Microsoft_Maui_Controls_Handlers_Compatibility_FrameRenderer_LayoutSubviews_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) layoutSubviews
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_264_Microsoft_Maui_Controls_Handlers_Compatibility_FrameRenderer_LayoutSubviews_function callback_264_Microsoft_Maui_Controls_Handlers_Compatibility_FrameRenderer_LayoutSubviews;
		xamarin_registrar_dlsym ((void **) &callback_264_Microsoft_Maui_Controls_Handlers_Compatibility_FrameRenderer_LayoutSubviews, "Microsoft.Maui.Controls", "callback_264_Microsoft_Maui_Controls_Handlers_Compatibility_FrameRenderer_LayoutSubviews", 263);
		callback_264_Microsoft_Maui_Controls_Handlers_Compatibility_FrameRenderer_LayoutSubviews (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef CGSize (*callback_265_Microsoft_Maui_Controls_Handlers_Compatibility_FrameRenderer_SizeThatFits_function) (id self, SEL sel, CGSize p0, GCHandle* exception_gchandle);
	-(CGSize) sizeThatFits:(CGSize)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		CGSize rv = { 0 };
		static callback_265_Microsoft_Maui_Controls_Handlers_Compatibility_FrameRenderer_SizeThatFits_function callback_265_Microsoft_Maui_Controls_Handlers_Compatibility_FrameRenderer_SizeThatFits;
		xamarin_registrar_dlsym ((void **) &callback_265_Microsoft_Maui_Controls_Handlers_Compatibility_FrameRenderer_SizeThatFits, "Microsoft.Maui.Controls", "callback_265_Microsoft_Maui_Controls_Handlers_Compatibility_FrameRenderer_SizeThatFits", 264);
		rv = callback_265_Microsoft_Maui_Controls_Handlers_Compatibility_FrameRenderer_SizeThatFits (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef void (*callback_266_Microsoft_Maui_Controls_Handlers_Compatibility_FrameRenderer_Draw_function) (id self, SEL sel, CGRect p0, GCHandle* exception_gchandle);
	-(void) drawRect:(CGRect)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_266_Microsoft_Maui_Controls_Handlers_Compatibility_FrameRenderer_Draw_function callback_266_Microsoft_Maui_Controls_Handlers_Compatibility_FrameRenderer_Draw;
		xamarin_registrar_dlsym ((void **) &callback_266_Microsoft_Maui_Controls_Handlers_Compatibility_FrameRenderer_Draw, "Microsoft.Maui.Controls", "callback_266_Microsoft_Maui_Controls_Handlers_Compatibility_FrameRenderer_Draw", 265);
		callback_266_Microsoft_Maui_Controls_Handlers_Compatibility_FrameRenderer_Draw (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_267_Microsoft_Maui_Controls_Handlers_Compatibility_FrameRenderer_SetNeedsLayout_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) setNeedsLayout
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_267_Microsoft_Maui_Controls_Handlers_Compatibility_FrameRenderer_SetNeedsLayout_function callback_267_Microsoft_Maui_Controls_Handlers_Compatibility_FrameRenderer_SetNeedsLayout;
		xamarin_registrar_dlsym ((void **) &callback_267_Microsoft_Maui_Controls_Handlers_Compatibility_FrameRenderer_SetNeedsLayout, "Microsoft.Maui.Controls", "callback_267_Microsoft_Maui_Controls_Handlers_Compatibility_FrameRenderer_SetNeedsLayout", 266);
		callback_267_Microsoft_Maui_Controls_Handlers_Compatibility_FrameRenderer_SetNeedsLayout (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_268_Microsoft_Maui_Controls_Handlers_Compatibility_FrameRenderer_MovedToWindow_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) didMoveToWindow
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_268_Microsoft_Maui_Controls_Handlers_Compatibility_FrameRenderer_MovedToWindow_function callback_268_Microsoft_Maui_Controls_Handlers_Compatibility_FrameRenderer_MovedToWindow;
		xamarin_registrar_dlsym ((void **) &callback_268_Microsoft_Maui_Controls_Handlers_Compatibility_FrameRenderer_MovedToWindow, "Microsoft.Maui.Controls", "callback_268_Microsoft_Maui_Controls_Handlers_Compatibility_FrameRenderer_MovedToWindow", 267);
		callback_268_Microsoft_Maui_Controls_Handlers_Compatibility_FrameRenderer_MovedToWindow (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef id (*callback_261_Microsoft_Maui_Controls_Handlers_Compatibility_FrameRenderer__ctor_function) (id self, SEL sel, bool* call_super, GCHandle* exception_gchandle);
	-(id) init
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_261_Microsoft_Maui_Controls_Handlers_Compatibility_FrameRenderer__ctor_function callback_261_Microsoft_Maui_Controls_Handlers_Compatibility_FrameRenderer__ctor;
		xamarin_registrar_dlsym ((void **) &callback_261_Microsoft_Maui_Controls_Handlers_Compatibility_FrameRenderer__ctor, "Microsoft.Maui.Controls", "callback_261_Microsoft_Maui_Controls_Handlers_Compatibility_FrameRenderer__ctor", 260);
		rv = callback_261_Microsoft_Maui_Controls_Handlers_Compatibility_FrameRenderer__ctor (self, _cmd, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [Microsoft_Maui_Controls_Handlers_Compatibility_VisualElementRenderer_1 class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@interface Microsoft_Maui_Controls_Handlers_Compatibility_ContextActionsCell_MoreActionSheetController : UIAlertController {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(NSInteger) preferredStyle;
	-(void) willRotateToInterfaceOrientation:(NSInteger)p0 duration:(double)p1;
	-(BOOL) conformsToProtocol:(void *)p0;
	-(id) init;
@end

@implementation Microsoft_Maui_Controls_Handlers_Compatibility_ContextActionsCell_MoreActionSheetController {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	typedef NSInteger (*callback_276_Microsoft_Maui_Controls_Handlers_Compatibility_ContextActionsCell_MoreActionSheetController_get_PreferredStyle_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(NSInteger) preferredStyle
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		NSInteger rv = { 0 };
		static callback_276_Microsoft_Maui_Controls_Handlers_Compatibility_ContextActionsCell_MoreActionSheetController_get_PreferredStyle_function callback_276_Microsoft_Maui_Controls_Handlers_Compatibility_ContextActionsCell_MoreActionSheetController_get_PreferredStyle;
		xamarin_registrar_dlsym ((void **) &callback_276_Microsoft_Maui_Controls_Handlers_Compatibility_ContextActionsCell_MoreActionSheetController_get_PreferredStyle, "Microsoft.Maui.Controls", "callback_276_Microsoft_Maui_Controls_Handlers_Compatibility_ContextActionsCell_MoreActionSheetController_get_PreferredStyle", 275);
		rv = callback_276_Microsoft_Maui_Controls_Handlers_Compatibility_ContextActionsCell_MoreActionSheetController_get_PreferredStyle (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef void (*callback_277_Microsoft_Maui_Controls_Handlers_Compatibility_ContextActionsCell_MoreActionSheetController_WillRotate_function) (id self, SEL sel, NSInteger p0, double p1, GCHandle* exception_gchandle);
	-(void) willRotateToInterfaceOrientation:(NSInteger)p0 duration:(double)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_277_Microsoft_Maui_Controls_Handlers_Compatibility_ContextActionsCell_MoreActionSheetController_WillRotate_function callback_277_Microsoft_Maui_Controls_Handlers_Compatibility_ContextActionsCell_MoreActionSheetController_WillRotate;
		xamarin_registrar_dlsym ((void **) &callback_277_Microsoft_Maui_Controls_Handlers_Compatibility_ContextActionsCell_MoreActionSheetController_WillRotate, "Microsoft.Maui.Controls", "callback_277_Microsoft_Maui_Controls_Handlers_Compatibility_ContextActionsCell_MoreActionSheetController_WillRotate", 276);
		callback_277_Microsoft_Maui_Controls_Handlers_Compatibility_ContextActionsCell_MoreActionSheetController_WillRotate (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef id (*callback_278_Microsoft_Maui_Controls_Handlers_Compatibility_ContextActionsCell_MoreActionSheetController__ctor_function) (id self, SEL sel, bool* call_super, GCHandle* exception_gchandle);
	-(id) init
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_278_Microsoft_Maui_Controls_Handlers_Compatibility_ContextActionsCell_MoreActionSheetController__ctor_function callback_278_Microsoft_Maui_Controls_Handlers_Compatibility_ContextActionsCell_MoreActionSheetController__ctor;
		xamarin_registrar_dlsym ((void **) &callback_278_Microsoft_Maui_Controls_Handlers_Compatibility_ContextActionsCell_MoreActionSheetController__ctor, "Microsoft.Maui.Controls", "callback_278_Microsoft_Maui_Controls_Handlers_Compatibility_ContextActionsCell_MoreActionSheetController__ctor", 277);
		rv = callback_278_Microsoft_Maui_Controls_Handlers_Compatibility_ContextActionsCell_MoreActionSheetController__ctor (self, _cmd, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [UIAlertController class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@interface Microsoft_Maui_Controls_Handlers_Compatibility_ContextActionsCell : UITableViewCell {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(void) layoutSubviews;
	-(CGSize) sizeThatFits:(CGSize)p0;
	-(void) removeFromSuperview;
	-(BOOL) conformsToProtocol:(void *)p0;
	-(id) init;
@end

@implementation Microsoft_Maui_Controls_Handlers_Compatibility_ContextActionsCell {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	typedef void (*callback_280_Microsoft_Maui_Controls_Handlers_Compatibility_ContextActionsCell_LayoutSubviews_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) layoutSubviews
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_280_Microsoft_Maui_Controls_Handlers_Compatibility_ContextActionsCell_LayoutSubviews_function callback_280_Microsoft_Maui_Controls_Handlers_Compatibility_ContextActionsCell_LayoutSubviews;
		xamarin_registrar_dlsym ((void **) &callback_280_Microsoft_Maui_Controls_Handlers_Compatibility_ContextActionsCell_LayoutSubviews, "Microsoft.Maui.Controls", "callback_280_Microsoft_Maui_Controls_Handlers_Compatibility_ContextActionsCell_LayoutSubviews", 279);
		callback_280_Microsoft_Maui_Controls_Handlers_Compatibility_ContextActionsCell_LayoutSubviews (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef CGSize (*callback_281_Microsoft_Maui_Controls_Handlers_Compatibility_ContextActionsCell_SizeThatFits_function) (id self, SEL sel, CGSize p0, GCHandle* exception_gchandle);
	-(CGSize) sizeThatFits:(CGSize)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		CGSize rv = { 0 };
		static callback_281_Microsoft_Maui_Controls_Handlers_Compatibility_ContextActionsCell_SizeThatFits_function callback_281_Microsoft_Maui_Controls_Handlers_Compatibility_ContextActionsCell_SizeThatFits;
		xamarin_registrar_dlsym ((void **) &callback_281_Microsoft_Maui_Controls_Handlers_Compatibility_ContextActionsCell_SizeThatFits, "Microsoft.Maui.Controls", "callback_281_Microsoft_Maui_Controls_Handlers_Compatibility_ContextActionsCell_SizeThatFits", 280);
		rv = callback_281_Microsoft_Maui_Controls_Handlers_Compatibility_ContextActionsCell_SizeThatFits (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef void (*callback_282_Microsoft_Maui_Controls_Handlers_Compatibility_ContextActionsCell_RemoveFromSuperview_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) removeFromSuperview
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_282_Microsoft_Maui_Controls_Handlers_Compatibility_ContextActionsCell_RemoveFromSuperview_function callback_282_Microsoft_Maui_Controls_Handlers_Compatibility_ContextActionsCell_RemoveFromSuperview;
		xamarin_registrar_dlsym ((void **) &callback_282_Microsoft_Maui_Controls_Handlers_Compatibility_ContextActionsCell_RemoveFromSuperview, "Microsoft.Maui.Controls", "callback_282_Microsoft_Maui_Controls_Handlers_Compatibility_ContextActionsCell_RemoveFromSuperview", 281);
		callback_282_Microsoft_Maui_Controls_Handlers_Compatibility_ContextActionsCell_RemoveFromSuperview (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef id (*callback_279_Microsoft_Maui_Controls_Handlers_Compatibility_ContextActionsCell__ctor_function) (id self, SEL sel, bool* call_super, GCHandle* exception_gchandle);
	-(id) init
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_279_Microsoft_Maui_Controls_Handlers_Compatibility_ContextActionsCell__ctor_function callback_279_Microsoft_Maui_Controls_Handlers_Compatibility_ContextActionsCell__ctor;
		xamarin_registrar_dlsym ((void **) &callback_279_Microsoft_Maui_Controls_Handlers_Compatibility_ContextActionsCell__ctor, "Microsoft.Maui.Controls", "callback_279_Microsoft_Maui_Controls_Handlers_Compatibility_ContextActionsCell__ctor", 278);
		rv = callback_279_Microsoft_Maui_Controls_Handlers_Compatibility_ContextActionsCell__ctor (self, _cmd, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [UITableViewCell class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@interface Microsoft_Maui_Controls_Handlers_Compatibility_ContextScrollViewDelegate : NSObject<UIScrollViewDelegate> {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(void) scrollViewWillBeginDragging:(UIScrollView *)p0;
	-(void) scrollViewDidScroll:(UIScrollView *)p0;
	-(void) scrollViewWillEndDragging:(UIScrollView *)p0 withVelocity:(CGPoint)p1 targetContentOffset:(CGPoint*)p2;
	-(BOOL) conformsToProtocol:(void *)p0;
@end

@implementation Microsoft_Maui_Controls_Handlers_Compatibility_ContextScrollViewDelegate {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	typedef void (*callback_284_Microsoft_Maui_Controls_Handlers_Compatibility_ContextScrollViewDelegate_DraggingStarted_function) (id self, SEL sel, UIScrollView * p0, GCHandle* exception_gchandle);
	-(void) scrollViewWillBeginDragging:(UIScrollView *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_284_Microsoft_Maui_Controls_Handlers_Compatibility_ContextScrollViewDelegate_DraggingStarted_function callback_284_Microsoft_Maui_Controls_Handlers_Compatibility_ContextScrollViewDelegate_DraggingStarted;
		xamarin_registrar_dlsym ((void **) &callback_284_Microsoft_Maui_Controls_Handlers_Compatibility_ContextScrollViewDelegate_DraggingStarted, "Microsoft.Maui.Controls", "callback_284_Microsoft_Maui_Controls_Handlers_Compatibility_ContextScrollViewDelegate_DraggingStarted", 283);
		callback_284_Microsoft_Maui_Controls_Handlers_Compatibility_ContextScrollViewDelegate_DraggingStarted (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_285_Microsoft_Maui_Controls_Handlers_Compatibility_ContextScrollViewDelegate_Scrolled_function) (id self, SEL sel, UIScrollView * p0, GCHandle* exception_gchandle);
	-(void) scrollViewDidScroll:(UIScrollView *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_285_Microsoft_Maui_Controls_Handlers_Compatibility_ContextScrollViewDelegate_Scrolled_function callback_285_Microsoft_Maui_Controls_Handlers_Compatibility_ContextScrollViewDelegate_Scrolled;
		xamarin_registrar_dlsym ((void **) &callback_285_Microsoft_Maui_Controls_Handlers_Compatibility_ContextScrollViewDelegate_Scrolled, "Microsoft.Maui.Controls", "callback_285_Microsoft_Maui_Controls_Handlers_Compatibility_ContextScrollViewDelegate_Scrolled", 284);
		callback_285_Microsoft_Maui_Controls_Handlers_Compatibility_ContextScrollViewDelegate_Scrolled (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_286_Microsoft_Maui_Controls_Handlers_Compatibility_ContextScrollViewDelegate_WillEndDragging_function) (id self, SEL sel, UIScrollView * p0, CGPoint p1, CGPoint* p2, GCHandle* exception_gchandle);
	-(void) scrollViewWillEndDragging:(UIScrollView *)p0 withVelocity:(CGPoint)p1 targetContentOffset:(CGPoint*)p2
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_286_Microsoft_Maui_Controls_Handlers_Compatibility_ContextScrollViewDelegate_WillEndDragging_function callback_286_Microsoft_Maui_Controls_Handlers_Compatibility_ContextScrollViewDelegate_WillEndDragging;
		xamarin_registrar_dlsym ((void **) &callback_286_Microsoft_Maui_Controls_Handlers_Compatibility_ContextScrollViewDelegate_WillEndDragging, "Microsoft.Maui.Controls", "callback_286_Microsoft_Maui_Controls_Handlers_Compatibility_ContextScrollViewDelegate_WillEndDragging", 285);
		callback_286_Microsoft_Maui_Controls_Handlers_Compatibility_ContextScrollViewDelegate_WillEndDragging (self, _cmd, p0, p1, p2, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
@end

@interface Microsoft_Maui_Controls_Handlers_Compatibility_ListViewRenderer_ListViewDataSource : NSObject<UIScrollViewDelegate> {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(void) scrollViewDidEndDragging:(UIScrollView *)p0 willDecelerate:(BOOL)p1;
	-(void) scrollViewWillBeginDragging:(UIScrollView *)p0;
	-(UITableViewCell *) tableView:(UITableView *)p0 cellForRowAtIndexPath:(NSIndexPath *)p1;
	-(CGFloat) tableView:(UITableView *)p0 heightForHeaderInSection:(void *)p1;
	-(UIView *) tableView:(UITableView *)p0 viewForHeaderInSection:(void *)p1;
	-(void) tableView:(UITableView *)p0 didEndDisplayingHeaderView:(UIView *)p1 forSection:(void *)p2;
	-(void *) numberOfSectionsInTableView:(UITableView *)p0;
	-(void) tableView:(UITableView *)p0 didDeselectRowAtIndexPath:(NSIndexPath *)p1;
	-(void) tableView:(UITableView *)p0 didSelectRowAtIndexPath:(NSIndexPath *)p1;
	-(void *) tableView:(UITableView *)p0 numberOfRowsInSection:(void *)p1;
	-(void) scrollViewDidScroll:(UIScrollView *)p0;
	-(NSArray *) sectionIndexTitlesForTableView:(UITableView *)p0;
	-(BOOL) conformsToProtocol:(void *)p0;
@end

@implementation Microsoft_Maui_Controls_Handlers_Compatibility_ListViewRenderer_ListViewDataSource {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	typedef void (*callback_289_Microsoft_Maui_Controls_Handlers_Compatibility_ListViewRenderer_ListViewDataSource_DraggingEnded_function) (id self, SEL sel, UIScrollView * p0, BOOL p1, GCHandle* exception_gchandle);
	-(void) scrollViewDidEndDragging:(UIScrollView *)p0 willDecelerate:(BOOL)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_289_Microsoft_Maui_Controls_Handlers_Compatibility_ListViewRenderer_ListViewDataSource_DraggingEnded_function callback_289_Microsoft_Maui_Controls_Handlers_Compatibility_ListViewRenderer_ListViewDataSource_DraggingEnded;
		xamarin_registrar_dlsym ((void **) &callback_289_Microsoft_Maui_Controls_Handlers_Compatibility_ListViewRenderer_ListViewDataSource_DraggingEnded, "Microsoft.Maui.Controls", "callback_289_Microsoft_Maui_Controls_Handlers_Compatibility_ListViewRenderer_ListViewDataSource_DraggingEnded", 288);
		callback_289_Microsoft_Maui_Controls_Handlers_Compatibility_ListViewRenderer_ListViewDataSource_DraggingEnded (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_290_Microsoft_Maui_Controls_Handlers_Compatibility_ListViewRenderer_ListViewDataSource_DraggingStarted_function) (id self, SEL sel, UIScrollView * p0, GCHandle* exception_gchandle);
	-(void) scrollViewWillBeginDragging:(UIScrollView *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_290_Microsoft_Maui_Controls_Handlers_Compatibility_ListViewRenderer_ListViewDataSource_DraggingStarted_function callback_290_Microsoft_Maui_Controls_Handlers_Compatibility_ListViewRenderer_ListViewDataSource_DraggingStarted;
		xamarin_registrar_dlsym ((void **) &callback_290_Microsoft_Maui_Controls_Handlers_Compatibility_ListViewRenderer_ListViewDataSource_DraggingStarted, "Microsoft.Maui.Controls", "callback_290_Microsoft_Maui_Controls_Handlers_Compatibility_ListViewRenderer_ListViewDataSource_DraggingStarted", 289);
		callback_290_Microsoft_Maui_Controls_Handlers_Compatibility_ListViewRenderer_ListViewDataSource_DraggingStarted (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef UITableViewCell * (*callback_291_Microsoft_Maui_Controls_Handlers_Compatibility_ListViewRenderer_ListViewDataSource_GetCell_function) (id self, SEL sel, UITableView * p0, NSIndexPath * p1, GCHandle* exception_gchandle);
	-(UITableViewCell *) tableView:(UITableView *)p0 cellForRowAtIndexPath:(NSIndexPath *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		UITableViewCell * rv = { 0 };
		static callback_291_Microsoft_Maui_Controls_Handlers_Compatibility_ListViewRenderer_ListViewDataSource_GetCell_function callback_291_Microsoft_Maui_Controls_Handlers_Compatibility_ListViewRenderer_ListViewDataSource_GetCell;
		xamarin_registrar_dlsym ((void **) &callback_291_Microsoft_Maui_Controls_Handlers_Compatibility_ListViewRenderer_ListViewDataSource_GetCell, "Microsoft.Maui.Controls", "callback_291_Microsoft_Maui_Controls_Handlers_Compatibility_ListViewRenderer_ListViewDataSource_GetCell", 290);
		rv = callback_291_Microsoft_Maui_Controls_Handlers_Compatibility_ListViewRenderer_ListViewDataSource_GetCell (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef CGFloat (*callback_292_Microsoft_Maui_Controls_Handlers_Compatibility_ListViewRenderer_ListViewDataSource_GetHeightForHeader_function) (id self, SEL sel, UITableView * p0, void * p1, GCHandle* exception_gchandle);
	-(CGFloat) tableView:(UITableView *)p0 heightForHeaderInSection:(void *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		CGFloat rv = { 0 };
		static callback_292_Microsoft_Maui_Controls_Handlers_Compatibility_ListViewRenderer_ListViewDataSource_GetHeightForHeader_function callback_292_Microsoft_Maui_Controls_Handlers_Compatibility_ListViewRenderer_ListViewDataSource_GetHeightForHeader;
		xamarin_registrar_dlsym ((void **) &callback_292_Microsoft_Maui_Controls_Handlers_Compatibility_ListViewRenderer_ListViewDataSource_GetHeightForHeader, "Microsoft.Maui.Controls", "callback_292_Microsoft_Maui_Controls_Handlers_Compatibility_ListViewRenderer_ListViewDataSource_GetHeightForHeader", 291);
		rv = callback_292_Microsoft_Maui_Controls_Handlers_Compatibility_ListViewRenderer_ListViewDataSource_GetHeightForHeader (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef UIView * (*callback_293_Microsoft_Maui_Controls_Handlers_Compatibility_ListViewRenderer_ListViewDataSource_GetViewForHeader_function) (id self, SEL sel, UITableView * p0, void * p1, GCHandle* exception_gchandle);
	-(UIView *) tableView:(UITableView *)p0 viewForHeaderInSection:(void *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		UIView * rv = { 0 };
		static callback_293_Microsoft_Maui_Controls_Handlers_Compatibility_ListViewRenderer_ListViewDataSource_GetViewForHeader_function callback_293_Microsoft_Maui_Controls_Handlers_Compatibility_ListViewRenderer_ListViewDataSource_GetViewForHeader;
		xamarin_registrar_dlsym ((void **) &callback_293_Microsoft_Maui_Controls_Handlers_Compatibility_ListViewRenderer_ListViewDataSource_GetViewForHeader, "Microsoft.Maui.Controls", "callback_293_Microsoft_Maui_Controls_Handlers_Compatibility_ListViewRenderer_ListViewDataSource_GetViewForHeader", 292);
		rv = callback_293_Microsoft_Maui_Controls_Handlers_Compatibility_ListViewRenderer_ListViewDataSource_GetViewForHeader (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef void (*callback_294_Microsoft_Maui_Controls_Handlers_Compatibility_ListViewRenderer_ListViewDataSource_HeaderViewDisplayingEnded_function) (id self, SEL sel, UITableView * p0, UIView * p1, void * p2, GCHandle* exception_gchandle);
	-(void) tableView:(UITableView *)p0 didEndDisplayingHeaderView:(UIView *)p1 forSection:(void *)p2
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_294_Microsoft_Maui_Controls_Handlers_Compatibility_ListViewRenderer_ListViewDataSource_HeaderViewDisplayingEnded_function callback_294_Microsoft_Maui_Controls_Handlers_Compatibility_ListViewRenderer_ListViewDataSource_HeaderViewDisplayingEnded;
		xamarin_registrar_dlsym ((void **) &callback_294_Microsoft_Maui_Controls_Handlers_Compatibility_ListViewRenderer_ListViewDataSource_HeaderViewDisplayingEnded, "Microsoft.Maui.Controls", "callback_294_Microsoft_Maui_Controls_Handlers_Compatibility_ListViewRenderer_ListViewDataSource_HeaderViewDisplayingEnded", 293);
		callback_294_Microsoft_Maui_Controls_Handlers_Compatibility_ListViewRenderer_ListViewDataSource_HeaderViewDisplayingEnded (self, _cmd, p0, p1, p2, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void * (*callback_295_Microsoft_Maui_Controls_Handlers_Compatibility_ListViewRenderer_ListViewDataSource_NumberOfSections_function) (id self, SEL sel, UITableView * p0, GCHandle* exception_gchandle);
	-(void *) numberOfSectionsInTableView:(UITableView *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		void * rv = { 0 };
		static callback_295_Microsoft_Maui_Controls_Handlers_Compatibility_ListViewRenderer_ListViewDataSource_NumberOfSections_function callback_295_Microsoft_Maui_Controls_Handlers_Compatibility_ListViewRenderer_ListViewDataSource_NumberOfSections;
		xamarin_registrar_dlsym ((void **) &callback_295_Microsoft_Maui_Controls_Handlers_Compatibility_ListViewRenderer_ListViewDataSource_NumberOfSections, "Microsoft.Maui.Controls", "callback_295_Microsoft_Maui_Controls_Handlers_Compatibility_ListViewRenderer_ListViewDataSource_NumberOfSections", 294);
		rv = callback_295_Microsoft_Maui_Controls_Handlers_Compatibility_ListViewRenderer_ListViewDataSource_NumberOfSections (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef void (*callback_296_Microsoft_Maui_Controls_Handlers_Compatibility_ListViewRenderer_ListViewDataSource_RowDeselected_function) (id self, SEL sel, UITableView * p0, NSIndexPath * p1, GCHandle* exception_gchandle);
	-(void) tableView:(UITableView *)p0 didDeselectRowAtIndexPath:(NSIndexPath *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_296_Microsoft_Maui_Controls_Handlers_Compatibility_ListViewRenderer_ListViewDataSource_RowDeselected_function callback_296_Microsoft_Maui_Controls_Handlers_Compatibility_ListViewRenderer_ListViewDataSource_RowDeselected;
		xamarin_registrar_dlsym ((void **) &callback_296_Microsoft_Maui_Controls_Handlers_Compatibility_ListViewRenderer_ListViewDataSource_RowDeselected, "Microsoft.Maui.Controls", "callback_296_Microsoft_Maui_Controls_Handlers_Compatibility_ListViewRenderer_ListViewDataSource_RowDeselected", 295);
		callback_296_Microsoft_Maui_Controls_Handlers_Compatibility_ListViewRenderer_ListViewDataSource_RowDeselected (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_297_Microsoft_Maui_Controls_Handlers_Compatibility_ListViewRenderer_ListViewDataSource_RowSelected_function) (id self, SEL sel, UITableView * p0, NSIndexPath * p1, GCHandle* exception_gchandle);
	-(void) tableView:(UITableView *)p0 didSelectRowAtIndexPath:(NSIndexPath *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_297_Microsoft_Maui_Controls_Handlers_Compatibility_ListViewRenderer_ListViewDataSource_RowSelected_function callback_297_Microsoft_Maui_Controls_Handlers_Compatibility_ListViewRenderer_ListViewDataSource_RowSelected;
		xamarin_registrar_dlsym ((void **) &callback_297_Microsoft_Maui_Controls_Handlers_Compatibility_ListViewRenderer_ListViewDataSource_RowSelected, "Microsoft.Maui.Controls", "callback_297_Microsoft_Maui_Controls_Handlers_Compatibility_ListViewRenderer_ListViewDataSource_RowSelected", 296);
		callback_297_Microsoft_Maui_Controls_Handlers_Compatibility_ListViewRenderer_ListViewDataSource_RowSelected (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void * (*callback_298_Microsoft_Maui_Controls_Handlers_Compatibility_ListViewRenderer_ListViewDataSource_RowsInSection_function) (id self, SEL sel, UITableView * p0, void * p1, GCHandle* exception_gchandle);
	-(void *) tableView:(UITableView *)p0 numberOfRowsInSection:(void *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		void * rv = { 0 };
		static callback_298_Microsoft_Maui_Controls_Handlers_Compatibility_ListViewRenderer_ListViewDataSource_RowsInSection_function callback_298_Microsoft_Maui_Controls_Handlers_Compatibility_ListViewRenderer_ListViewDataSource_RowsInSection;
		xamarin_registrar_dlsym ((void **) &callback_298_Microsoft_Maui_Controls_Handlers_Compatibility_ListViewRenderer_ListViewDataSource_RowsInSection, "Microsoft.Maui.Controls", "callback_298_Microsoft_Maui_Controls_Handlers_Compatibility_ListViewRenderer_ListViewDataSource_RowsInSection", 297);
		rv = callback_298_Microsoft_Maui_Controls_Handlers_Compatibility_ListViewRenderer_ListViewDataSource_RowsInSection (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef void (*callback_299_Microsoft_Maui_Controls_Handlers_Compatibility_ListViewRenderer_ListViewDataSource_Scrolled_function) (id self, SEL sel, UIScrollView * p0, GCHandle* exception_gchandle);
	-(void) scrollViewDidScroll:(UIScrollView *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_299_Microsoft_Maui_Controls_Handlers_Compatibility_ListViewRenderer_ListViewDataSource_Scrolled_function callback_299_Microsoft_Maui_Controls_Handlers_Compatibility_ListViewRenderer_ListViewDataSource_Scrolled;
		xamarin_registrar_dlsym ((void **) &callback_299_Microsoft_Maui_Controls_Handlers_Compatibility_ListViewRenderer_ListViewDataSource_Scrolled, "Microsoft.Maui.Controls", "callback_299_Microsoft_Maui_Controls_Handlers_Compatibility_ListViewRenderer_ListViewDataSource_Scrolled", 298);
		callback_299_Microsoft_Maui_Controls_Handlers_Compatibility_ListViewRenderer_ListViewDataSource_Scrolled (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef NSArray * (*callback_300_Microsoft_Maui_Controls_Handlers_Compatibility_ListViewRenderer_ListViewDataSource_SectionIndexTitles_function) (id self, SEL sel, UITableView * p0, GCHandle* exception_gchandle);
	-(NSArray *) sectionIndexTitlesForTableView:(UITableView *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		NSArray * rv = { 0 };
		static callback_300_Microsoft_Maui_Controls_Handlers_Compatibility_ListViewRenderer_ListViewDataSource_SectionIndexTitles_function callback_300_Microsoft_Maui_Controls_Handlers_Compatibility_ListViewRenderer_ListViewDataSource_SectionIndexTitles;
		xamarin_registrar_dlsym ((void **) &callback_300_Microsoft_Maui_Controls_Handlers_Compatibility_ListViewRenderer_ListViewDataSource_SectionIndexTitles, "Microsoft.Maui.Controls", "callback_300_Microsoft_Maui_Controls_Handlers_Compatibility_ListViewRenderer_ListViewDataSource_SectionIndexTitles", 299);
		rv = callback_300_Microsoft_Maui_Controls_Handlers_Compatibility_ListViewRenderer_ListViewDataSource_SectionIndexTitles (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
@end

@interface Microsoft_Maui_Controls_Handlers_Compatibility_ListViewRenderer_UnevenListViewDataSource : Microsoft_Maui_Controls_Handlers_Compatibility_ListViewRenderer_ListViewDataSource<UIScrollViewDelegate> {
}
	-(CGFloat) tableView:(UITableView *)p0 heightForRowAtIndexPath:(NSIndexPath *)p1;
@end

@implementation Microsoft_Maui_Controls_Handlers_Compatibility_ListViewRenderer_UnevenListViewDataSource {
}

	typedef CGFloat (*callback_288_Microsoft_Maui_Controls_Handlers_Compatibility_ListViewRenderer_UnevenListViewDataSource_GetHeightForRow_function) (id self, SEL sel, UITableView * p0, NSIndexPath * p1, GCHandle* exception_gchandle);
	-(CGFloat) tableView:(UITableView *)p0 heightForRowAtIndexPath:(NSIndexPath *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		CGFloat rv = { 0 };
		static callback_288_Microsoft_Maui_Controls_Handlers_Compatibility_ListViewRenderer_UnevenListViewDataSource_GetHeightForRow_function callback_288_Microsoft_Maui_Controls_Handlers_Compatibility_ListViewRenderer_UnevenListViewDataSource_GetHeightForRow;
		xamarin_registrar_dlsym ((void **) &callback_288_Microsoft_Maui_Controls_Handlers_Compatibility_ListViewRenderer_UnevenListViewDataSource_GetHeightForRow, "Microsoft.Maui.Controls", "callback_288_Microsoft_Maui_Controls_Handlers_Compatibility_ListViewRenderer_UnevenListViewDataSource_GetHeightForRow", 287);
		rv = callback_288_Microsoft_Maui_Controls_Handlers_Compatibility_ListViewRenderer_UnevenListViewDataSource_GetHeightForRow (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
@end

@implementation Microsoft_Maui_Controls_Handlers_Compatibility_ListViewRenderer {
}

	typedef void (*callback_302_Microsoft_Maui_Controls_Handlers_Compatibility_ListViewRenderer_LayoutSubviews_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) layoutSubviews
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_302_Microsoft_Maui_Controls_Handlers_Compatibility_ListViewRenderer_LayoutSubviews_function callback_302_Microsoft_Maui_Controls_Handlers_Compatibility_ListViewRenderer_LayoutSubviews;
		xamarin_registrar_dlsym ((void **) &callback_302_Microsoft_Maui_Controls_Handlers_Compatibility_ListViewRenderer_LayoutSubviews, "Microsoft.Maui.Controls", "callback_302_Microsoft_Maui_Controls_Handlers_Compatibility_ListViewRenderer_LayoutSubviews", 301);
		callback_302_Microsoft_Maui_Controls_Handlers_Compatibility_ListViewRenderer_LayoutSubviews (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_303_Microsoft_Maui_Controls_Handlers_Compatibility_ListViewRenderer_TraitCollectionDidChange_function) (id self, SEL sel, UITraitCollection * p0, GCHandle* exception_gchandle);
	-(void) traitCollectionDidChange:(UITraitCollection *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_303_Microsoft_Maui_Controls_Handlers_Compatibility_ListViewRenderer_TraitCollectionDidChange_function callback_303_Microsoft_Maui_Controls_Handlers_Compatibility_ListViewRenderer_TraitCollectionDidChange;
		xamarin_registrar_dlsym ((void **) &callback_303_Microsoft_Maui_Controls_Handlers_Compatibility_ListViewRenderer_TraitCollectionDidChange, "Microsoft.Maui.Controls", "callback_303_Microsoft_Maui_Controls_Handlers_Compatibility_ListViewRenderer_TraitCollectionDidChange", 302);
		callback_303_Microsoft_Maui_Controls_Handlers_Compatibility_ListViewRenderer_TraitCollectionDidChange (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef id (*callback_301_Microsoft_Maui_Controls_Handlers_Compatibility_ListViewRenderer__ctor_function) (id self, SEL sel, bool* call_super, GCHandle* exception_gchandle);
	-(id) init
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_301_Microsoft_Maui_Controls_Handlers_Compatibility_ListViewRenderer__ctor_function callback_301_Microsoft_Maui_Controls_Handlers_Compatibility_ListViewRenderer__ctor;
		xamarin_registrar_dlsym ((void **) &callback_301_Microsoft_Maui_Controls_Handlers_Compatibility_ListViewRenderer__ctor, "Microsoft.Maui.Controls", "callback_301_Microsoft_Maui_Controls_Handlers_Compatibility_ListViewRenderer__ctor", 300);
		rv = callback_301_Microsoft_Maui_Controls_Handlers_Compatibility_ListViewRenderer__ctor (self, _cmd, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [Microsoft_Maui_Controls_Handlers_Compatibility_ViewRenderer_2 class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@interface Microsoft_Maui_Controls_Handlers_Compatibility_FormsUITableViewController : UITableViewController {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(void) viewWillAppear:(BOOL)p0;
	-(void) viewWillLayoutSubviews;
	-(BOOL) conformsToProtocol:(void *)p0;
@end

@implementation Microsoft_Maui_Controls_Handlers_Compatibility_FormsUITableViewController {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	typedef void (*callback_305_Microsoft_Maui_Controls_Handlers_Compatibility_FormsUITableViewController_ViewWillAppear_function) (id self, SEL sel, BOOL p0, GCHandle* exception_gchandle);
	-(void) viewWillAppear:(BOOL)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_305_Microsoft_Maui_Controls_Handlers_Compatibility_FormsUITableViewController_ViewWillAppear_function callback_305_Microsoft_Maui_Controls_Handlers_Compatibility_FormsUITableViewController_ViewWillAppear;
		xamarin_registrar_dlsym ((void **) &callback_305_Microsoft_Maui_Controls_Handlers_Compatibility_FormsUITableViewController_ViewWillAppear, "Microsoft.Maui.Controls", "callback_305_Microsoft_Maui_Controls_Handlers_Compatibility_FormsUITableViewController_ViewWillAppear", 304);
		callback_305_Microsoft_Maui_Controls_Handlers_Compatibility_FormsUITableViewController_ViewWillAppear (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_306_Microsoft_Maui_Controls_Handlers_Compatibility_FormsUITableViewController_ViewWillLayoutSubviews_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) viewWillLayoutSubviews
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_306_Microsoft_Maui_Controls_Handlers_Compatibility_FormsUITableViewController_ViewWillLayoutSubviews_function callback_306_Microsoft_Maui_Controls_Handlers_Compatibility_FormsUITableViewController_ViewWillLayoutSubviews;
		xamarin_registrar_dlsym ((void **) &callback_306_Microsoft_Maui_Controls_Handlers_Compatibility_FormsUITableViewController_ViewWillLayoutSubviews, "Microsoft.Maui.Controls", "callback_306_Microsoft_Maui_Controls_Handlers_Compatibility_FormsUITableViewController_ViewWillLayoutSubviews", 305);
		callback_306_Microsoft_Maui_Controls_Handlers_Compatibility_FormsUITableViewController_ViewWillLayoutSubviews (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
@end

@interface Microsoft_Maui_Controls_Handlers_Compatibility_ViewCellRenderer_ViewTableCell : UITableViewCell {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(void) layoutSubviews;
	-(CGSize) sizeThatFits:(CGSize)p0;
	-(BOOL) conformsToProtocol:(void *)p0;
@end

@implementation Microsoft_Maui_Controls_Handlers_Compatibility_ViewCellRenderer_ViewTableCell {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	typedef void (*callback_310_Microsoft_Maui_Controls_Handlers_Compatibility_ViewCellRenderer_ViewTableCell_LayoutSubviews_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) layoutSubviews
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_310_Microsoft_Maui_Controls_Handlers_Compatibility_ViewCellRenderer_ViewTableCell_LayoutSubviews_function callback_310_Microsoft_Maui_Controls_Handlers_Compatibility_ViewCellRenderer_ViewTableCell_LayoutSubviews;
		xamarin_registrar_dlsym ((void **) &callback_310_Microsoft_Maui_Controls_Handlers_Compatibility_ViewCellRenderer_ViewTableCell_LayoutSubviews, "Microsoft.Maui.Controls", "callback_310_Microsoft_Maui_Controls_Handlers_Compatibility_ViewCellRenderer_ViewTableCell_LayoutSubviews", 309);
		callback_310_Microsoft_Maui_Controls_Handlers_Compatibility_ViewCellRenderer_ViewTableCell_LayoutSubviews (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef CGSize (*callback_311_Microsoft_Maui_Controls_Handlers_Compatibility_ViewCellRenderer_ViewTableCell_SizeThatFits_function) (id self, SEL sel, CGSize p0, GCHandle* exception_gchandle);
	-(CGSize) sizeThatFits:(CGSize)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		CGSize rv = { 0 };
		static callback_311_Microsoft_Maui_Controls_Handlers_Compatibility_ViewCellRenderer_ViewTableCell_SizeThatFits_function callback_311_Microsoft_Maui_Controls_Handlers_Compatibility_ViewCellRenderer_ViewTableCell_SizeThatFits;
		xamarin_registrar_dlsym ((void **) &callback_311_Microsoft_Maui_Controls_Handlers_Compatibility_ViewCellRenderer_ViewTableCell_SizeThatFits, "Microsoft.Maui.Controls", "callback_311_Microsoft_Maui_Controls_Handlers_Compatibility_ViewCellRenderer_ViewTableCell_SizeThatFits", 310);
		rv = callback_311_Microsoft_Maui_Controls_Handlers_Compatibility_ViewCellRenderer_ViewTableCell_SizeThatFits (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
@end

@interface Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_MauiNavigationDelegate : NSObject<UINavigationControllerDelegate> {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(void) navigationController:(UINavigationController *)p0 didShowViewController:(UIViewController *)p1 animated:(BOOL)p2;
	-(void) navigationController:(UINavigationController *)p0 willShowViewController:(UIViewController *)p1 animated:(BOOL)p2;
	-(BOOL) conformsToProtocol:(void *)p0;
@end

@implementation Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_MauiNavigationDelegate {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	typedef void (*callback_316_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_MauiNavigationDelegate_DidShowViewController_function) (id self, SEL sel, UINavigationController * p0, UIViewController * p1, BOOL p2, GCHandle* exception_gchandle);
	-(void) navigationController:(UINavigationController *)p0 didShowViewController:(UIViewController *)p1 animated:(BOOL)p2
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_316_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_MauiNavigationDelegate_DidShowViewController_function callback_316_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_MauiNavigationDelegate_DidShowViewController;
		xamarin_registrar_dlsym ((void **) &callback_316_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_MauiNavigationDelegate_DidShowViewController, "Microsoft.Maui.Controls", "callback_316_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_MauiNavigationDelegate_DidShowViewController", 315);
		callback_316_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_MauiNavigationDelegate_DidShowViewController (self, _cmd, p0, p1, p2, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_317_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_MauiNavigationDelegate_WillShowViewController_function) (id self, SEL sel, UINavigationController * p0, UIViewController * p1, BOOL p2, GCHandle* exception_gchandle);
	-(void) navigationController:(UINavigationController *)p0 willShowViewController:(UIViewController *)p1 animated:(BOOL)p2
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_317_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_MauiNavigationDelegate_WillShowViewController_function callback_317_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_MauiNavigationDelegate_WillShowViewController;
		xamarin_registrar_dlsym ((void **) &callback_317_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_MauiNavigationDelegate_WillShowViewController, "Microsoft.Maui.Controls", "callback_317_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_MauiNavigationDelegate_WillShowViewController", 316);
		callback_317_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_MauiNavigationDelegate_WillShowViewController (self, _cmd, p0, p1, p2, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
@end

@interface Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_MauiControlsNavigationBar : UINavigationBar {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(void) layoutSubviews;
	-(BOOL) conformsToProtocol:(void *)p0;
	-(id) init;
@end

@implementation Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_MauiControlsNavigationBar {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	typedef void (*callback_334_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_MauiControlsNavigationBar_LayoutSubviews_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) layoutSubviews
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_334_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_MauiControlsNavigationBar_LayoutSubviews_function callback_334_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_MauiControlsNavigationBar_LayoutSubviews;
		xamarin_registrar_dlsym ((void **) &callback_334_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_MauiControlsNavigationBar_LayoutSubviews, "Microsoft.Maui.Controls", "callback_334_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_MauiControlsNavigationBar_LayoutSubviews", 333);
		callback_334_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_MauiControlsNavigationBar_LayoutSubviews (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef id (*callback_333_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_MauiControlsNavigationBar__ctor_function) (id self, SEL sel, bool* call_super, GCHandle* exception_gchandle);
	-(id) init
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_333_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_MauiControlsNavigationBar__ctor_function callback_333_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_MauiControlsNavigationBar__ctor;
		xamarin_registrar_dlsym ((void **) &callback_333_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_MauiControlsNavigationBar__ctor, "Microsoft.Maui.Controls", "callback_333_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_MauiControlsNavigationBar__ctor", 332);
		rv = callback_333_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_MauiControlsNavigationBar__ctor (self, _cmd, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [UINavigationBar class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@interface Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_Container : UIView {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(CGSize) intrinsicContentSize;
	-(CGRect) frame;
	-(void) setFrame:(CGRect)p0;
	-(CGSize) sizeThatFits:(CGSize)p0;
	-(void) layoutSubviews;
	-(BOOL) conformsToProtocol:(void *)p0;
@end

@implementation Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_Container {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	typedef CGSize (*callback_335_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_Container_get_IntrinsicContentSize_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(CGSize) intrinsicContentSize
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		CGSize rv = { 0 };
		static callback_335_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_Container_get_IntrinsicContentSize_function callback_335_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_Container_get_IntrinsicContentSize;
		xamarin_registrar_dlsym ((void **) &callback_335_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_Container_get_IntrinsicContentSize, "Microsoft.Maui.Controls", "callback_335_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_Container_get_IntrinsicContentSize", 334);
		rv = callback_335_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_Container_get_IntrinsicContentSize (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef CGRect (*callback_336_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_Container_get_Frame_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(CGRect) frame
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		CGRect rv = { 0 };
		static callback_336_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_Container_get_Frame_function callback_336_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_Container_get_Frame;
		xamarin_registrar_dlsym ((void **) &callback_336_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_Container_get_Frame, "Microsoft.Maui.Controls", "callback_336_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_Container_get_Frame", 335);
		rv = callback_336_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_Container_get_Frame (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef void (*callback_337_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_Container_set_Frame_function) (id self, SEL sel, CGRect p0, GCHandle* exception_gchandle);
	-(void) setFrame:(CGRect)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_337_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_Container_set_Frame_function callback_337_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_Container_set_Frame;
		xamarin_registrar_dlsym ((void **) &callback_337_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_Container_set_Frame, "Microsoft.Maui.Controls", "callback_337_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_Container_set_Frame", 336);
		callback_337_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_Container_set_Frame (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef CGSize (*callback_338_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_Container_SizeThatFits_function) (id self, SEL sel, CGSize p0, GCHandle* exception_gchandle);
	-(CGSize) sizeThatFits:(CGSize)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		CGSize rv = { 0 };
		static callback_338_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_Container_SizeThatFits_function callback_338_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_Container_SizeThatFits;
		xamarin_registrar_dlsym ((void **) &callback_338_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_Container_SizeThatFits, "Microsoft.Maui.Controls", "callback_338_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_Container_SizeThatFits", 337);
		rv = callback_338_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_Container_SizeThatFits (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef void (*callback_339_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_Container_LayoutSubviews_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) layoutSubviews
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_339_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_Container_LayoutSubviews_function callback_339_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_Container_LayoutSubviews;
		xamarin_registrar_dlsym ((void **) &callback_339_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_Container_LayoutSubviews, "Microsoft.Maui.Controls", "callback_339_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_Container_LayoutSubviews", 338);
		callback_339_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_Container_LayoutSubviews (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
@end

@implementation Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	typedef void (*callback_341_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_DidRotate_function) (id self, SEL sel, NSInteger p0, GCHandle* exception_gchandle);
	-(void) didRotateFromInterfaceOrientation:(NSInteger)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_341_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_DidRotate_function callback_341_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_DidRotate;
		xamarin_registrar_dlsym ((void **) &callback_341_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_DidRotate, "Microsoft.Maui.Controls", "callback_341_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_DidRotate", 340);
		callback_341_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_DidRotate (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef NSArray * (*callback_342_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_PopToRootViewController_function) (id self, SEL sel, BOOL p0, GCHandle* exception_gchandle);
	-(NSArray *) popToRootViewControllerAnimated:(BOOL)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		NSArray * rv = { 0 };
		static callback_342_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_PopToRootViewController_function callback_342_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_PopToRootViewController;
		xamarin_registrar_dlsym ((void **) &callback_342_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_PopToRootViewController, "Microsoft.Maui.Controls", "callback_342_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_PopToRootViewController", 341);
		rv = callback_342_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_PopToRootViewController (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef UIViewController * (*callback_343_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_PopViewController_function) (id self, SEL sel, BOOL p0, GCHandle* exception_gchandle);
	-(UIViewController *) popViewControllerAnimated:(BOOL)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		UIViewController * rv = { 0 };
		static callback_343_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_PopViewController_function callback_343_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_PopViewController;
		xamarin_registrar_dlsym ((void **) &callback_343_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_PopViewController, "Microsoft.Maui.Controls", "callback_343_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_PopViewController", 342);
		rv = callback_343_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_PopViewController (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef void (*callback_344_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ViewDidAppear_function) (id self, SEL sel, BOOL p0, GCHandle* exception_gchandle);
	-(void) viewDidAppear:(BOOL)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_344_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ViewDidAppear_function callback_344_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ViewDidAppear;
		xamarin_registrar_dlsym ((void **) &callback_344_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ViewDidAppear, "Microsoft.Maui.Controls", "callback_344_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ViewDidAppear", 343);
		callback_344_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ViewDidAppear (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_345_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ViewWillAppear_function) (id self, SEL sel, BOOL p0, GCHandle* exception_gchandle);
	-(void) viewWillAppear:(BOOL)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_345_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ViewWillAppear_function callback_345_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ViewWillAppear;
		xamarin_registrar_dlsym ((void **) &callback_345_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ViewWillAppear, "Microsoft.Maui.Controls", "callback_345_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ViewWillAppear", 344);
		callback_345_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ViewWillAppear (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_346_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ViewDidDisappear_function) (id self, SEL sel, BOOL p0, GCHandle* exception_gchandle);
	-(void) viewDidDisappear:(BOOL)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_346_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ViewDidDisappear_function callback_346_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ViewDidDisappear;
		xamarin_registrar_dlsym ((void **) &callback_346_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ViewDidDisappear, "Microsoft.Maui.Controls", "callback_346_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ViewDidDisappear", 345);
		callback_346_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ViewDidDisappear (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_347_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ViewWillLayoutSubviews_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) viewWillLayoutSubviews
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_347_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ViewWillLayoutSubviews_function callback_347_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ViewWillLayoutSubviews;
		xamarin_registrar_dlsym ((void **) &callback_347_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ViewWillLayoutSubviews, "Microsoft.Maui.Controls", "callback_347_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ViewWillLayoutSubviews", 346);
		callback_347_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ViewWillLayoutSubviews (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_348_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ViewDidLoad_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) viewDidLoad
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_348_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ViewDidLoad_function callback_348_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ViewDidLoad;
		xamarin_registrar_dlsym ((void **) &callback_348_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ViewDidLoad, "Microsoft.Maui.Controls", "callback_348_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ViewDidLoad", 347);
		callback_348_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ViewDidLoad (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_349_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_TraitCollectionDidChange_function) (id self, SEL sel, UITraitCollection * p0, GCHandle* exception_gchandle);
	-(void) traitCollectionDidChange:(UITraitCollection *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_349_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_TraitCollectionDidChange_function callback_349_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_TraitCollectionDidChange;
		xamarin_registrar_dlsym ((void **) &callback_349_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_TraitCollectionDidChange, "Microsoft.Maui.Controls", "callback_349_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_TraitCollectionDidChange", 348);
		callback_349_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_TraitCollectionDidChange (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef BOOL (*callback_350_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ShouldPopItem_function) (id self, SEL sel, UINavigationBar * p0, UINavigationItem * p1, GCHandle* exception_gchandle);
	-(BOOL) navigationBar:(UINavigationBar *)p0 shouldPopItem:(UINavigationItem *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		BOOL rv = { 0 };
		static callback_350_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ShouldPopItem_function callback_350_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ShouldPopItem;
		xamarin_registrar_dlsym ((void **) &callback_350_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ShouldPopItem, "Microsoft.Maui.Controls", "callback_350_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ShouldPopItem", 349);
		rv = callback_350_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ShouldPopItem (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef UIViewController * (*callback_351_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ChildViewControllerForStatusBarHidden_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(UIViewController *) childViewControllerForStatusBarHidden
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		UIViewController * rv = { 0 };
		static callback_351_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ChildViewControllerForStatusBarHidden_function callback_351_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ChildViewControllerForStatusBarHidden;
		xamarin_registrar_dlsym ((void **) &callback_351_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ChildViewControllerForStatusBarHidden, "Microsoft.Maui.Controls", "callback_351_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ChildViewControllerForStatusBarHidden", 350);
		rv = callback_351_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ChildViewControllerForStatusBarHidden (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef UIViewController * (*callback_352_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_get_ChildViewControllerForHomeIndicatorAutoHidden_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(UIViewController *) childViewControllerForHomeIndicatorAutoHidden
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		UIViewController * rv = { 0 };
		static callback_352_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_get_ChildViewControllerForHomeIndicatorAutoHidden_function callback_352_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_get_ChildViewControllerForHomeIndicatorAutoHidden;
		xamarin_registrar_dlsym ((void **) &callback_352_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_get_ChildViewControllerForHomeIndicatorAutoHidden, "Microsoft.Maui.Controls", "callback_352_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_get_ChildViewControllerForHomeIndicatorAutoHidden", 351);
		rv = callback_352_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_get_ChildViewControllerForHomeIndicatorAutoHidden (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef id (*callback_340_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer__ctor_function) (id self, SEL sel, bool* call_super, GCHandle* exception_gchandle);
	-(id) init
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_340_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer__ctor_function callback_340_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer__ctor;
		xamarin_registrar_dlsym ((void **) &callback_340_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer__ctor, "Microsoft.Maui.Controls", "callback_340_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer__ctor", 339);
		rv = callback_340_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer__ctor (self, _cmd, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [UINavigationController class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@implementation Microsoft_Maui_Controls_Handlers_Compatibility_ShellRenderer {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	typedef BOOL (*callback_354_Microsoft_Maui_Controls_Handlers_Compatibility_ShellRenderer_get_PrefersHomeIndicatorAutoHidden_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(BOOL) prefersHomeIndicatorAutoHidden
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		BOOL rv = { 0 };
		static callback_354_Microsoft_Maui_Controls_Handlers_Compatibility_ShellRenderer_get_PrefersHomeIndicatorAutoHidden_function callback_354_Microsoft_Maui_Controls_Handlers_Compatibility_ShellRenderer_get_PrefersHomeIndicatorAutoHidden;
		xamarin_registrar_dlsym ((void **) &callback_354_Microsoft_Maui_Controls_Handlers_Compatibility_ShellRenderer_get_PrefersHomeIndicatorAutoHidden, "Microsoft.Maui.Controls", "callback_354_Microsoft_Maui_Controls_Handlers_Compatibility_ShellRenderer_get_PrefersHomeIndicatorAutoHidden", 353);
		rv = callback_354_Microsoft_Maui_Controls_Handlers_Compatibility_ShellRenderer_get_PrefersHomeIndicatorAutoHidden (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef BOOL (*callback_355_Microsoft_Maui_Controls_Handlers_Compatibility_ShellRenderer_PrefersStatusBarHidden_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(BOOL) prefersStatusBarHidden
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		BOOL rv = { 0 };
		static callback_355_Microsoft_Maui_Controls_Handlers_Compatibility_ShellRenderer_PrefersStatusBarHidden_function callback_355_Microsoft_Maui_Controls_Handlers_Compatibility_ShellRenderer_PrefersStatusBarHidden;
		xamarin_registrar_dlsym ((void **) &callback_355_Microsoft_Maui_Controls_Handlers_Compatibility_ShellRenderer_PrefersStatusBarHidden, "Microsoft.Maui.Controls", "callback_355_Microsoft_Maui_Controls_Handlers_Compatibility_ShellRenderer_PrefersStatusBarHidden", 354);
		rv = callback_355_Microsoft_Maui_Controls_Handlers_Compatibility_ShellRenderer_PrefersStatusBarHidden (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef NSInteger (*callback_356_Microsoft_Maui_Controls_Handlers_Compatibility_ShellRenderer_get_PreferredStatusBarUpdateAnimation_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(NSInteger) preferredStatusBarUpdateAnimation
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		NSInteger rv = { 0 };
		static callback_356_Microsoft_Maui_Controls_Handlers_Compatibility_ShellRenderer_get_PreferredStatusBarUpdateAnimation_function callback_356_Microsoft_Maui_Controls_Handlers_Compatibility_ShellRenderer_get_PreferredStatusBarUpdateAnimation;
		xamarin_registrar_dlsym ((void **) &callback_356_Microsoft_Maui_Controls_Handlers_Compatibility_ShellRenderer_get_PreferredStatusBarUpdateAnimation, "Microsoft.Maui.Controls", "callback_356_Microsoft_Maui_Controls_Handlers_Compatibility_ShellRenderer_get_PreferredStatusBarUpdateAnimation", 355);
		rv = callback_356_Microsoft_Maui_Controls_Handlers_Compatibility_ShellRenderer_get_PreferredStatusBarUpdateAnimation (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef void (*callback_357_Microsoft_Maui_Controls_Handlers_Compatibility_ShellRenderer_ViewDidLayoutSubviews_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) viewDidLayoutSubviews
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_357_Microsoft_Maui_Controls_Handlers_Compatibility_ShellRenderer_ViewDidLayoutSubviews_function callback_357_Microsoft_Maui_Controls_Handlers_Compatibility_ShellRenderer_ViewDidLayoutSubviews;
		xamarin_registrar_dlsym ((void **) &callback_357_Microsoft_Maui_Controls_Handlers_Compatibility_ShellRenderer_ViewDidLayoutSubviews, "Microsoft.Maui.Controls", "callback_357_Microsoft_Maui_Controls_Handlers_Compatibility_ShellRenderer_ViewDidLayoutSubviews", 356);
		callback_357_Microsoft_Maui_Controls_Handlers_Compatibility_ShellRenderer_ViewDidLayoutSubviews (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_358_Microsoft_Maui_Controls_Handlers_Compatibility_ShellRenderer_ViewDidLoad_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) viewDidLoad
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_358_Microsoft_Maui_Controls_Handlers_Compatibility_ShellRenderer_ViewDidLoad_function callback_358_Microsoft_Maui_Controls_Handlers_Compatibility_ShellRenderer_ViewDidLoad;
		xamarin_registrar_dlsym ((void **) &callback_358_Microsoft_Maui_Controls_Handlers_Compatibility_ShellRenderer_ViewDidLoad, "Microsoft.Maui.Controls", "callback_358_Microsoft_Maui_Controls_Handlers_Compatibility_ShellRenderer_ViewDidLoad", 357);
		callback_358_Microsoft_Maui_Controls_Handlers_Compatibility_ShellRenderer_ViewDidLoad (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef id (*callback_353_Microsoft_Maui_Controls_Handlers_Compatibility_ShellRenderer__ctor_function) (id self, SEL sel, bool* call_super, GCHandle* exception_gchandle);
	-(id) init
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_353_Microsoft_Maui_Controls_Handlers_Compatibility_ShellRenderer__ctor_function callback_353_Microsoft_Maui_Controls_Handlers_Compatibility_ShellRenderer__ctor;
		xamarin_registrar_dlsym ((void **) &callback_353_Microsoft_Maui_Controls_Handlers_Compatibility_ShellRenderer__ctor, "Microsoft.Maui.Controls", "callback_353_Microsoft_Maui_Controls_Handlers_Compatibility_ShellRenderer__ctor", 352);
		rv = callback_353_Microsoft_Maui_Controls_Handlers_Compatibility_ShellRenderer__ctor (self, _cmd, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [UIViewController class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@implementation Microsoft_Maui_Controls_Handlers_Compatibility_TabbedRenderer {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	typedef UIViewController * (*callback_360_Microsoft_Maui_Controls_Handlers_Compatibility_TabbedRenderer_get_SelectedViewController_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(UIViewController *) selectedViewController
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		UIViewController * rv = { 0 };
		static callback_360_Microsoft_Maui_Controls_Handlers_Compatibility_TabbedRenderer_get_SelectedViewController_function callback_360_Microsoft_Maui_Controls_Handlers_Compatibility_TabbedRenderer_get_SelectedViewController;
		xamarin_registrar_dlsym ((void **) &callback_360_Microsoft_Maui_Controls_Handlers_Compatibility_TabbedRenderer_get_SelectedViewController, "Microsoft.Maui.Controls", "callback_360_Microsoft_Maui_Controls_Handlers_Compatibility_TabbedRenderer_get_SelectedViewController", 359);
		rv = callback_360_Microsoft_Maui_Controls_Handlers_Compatibility_TabbedRenderer_get_SelectedViewController (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef void (*callback_361_Microsoft_Maui_Controls_Handlers_Compatibility_TabbedRenderer_set_SelectedViewController_function) (id self, SEL sel, UIViewController * p0, GCHandle* exception_gchandle);
	-(void) setSelectedViewController:(UIViewController *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_361_Microsoft_Maui_Controls_Handlers_Compatibility_TabbedRenderer_set_SelectedViewController_function callback_361_Microsoft_Maui_Controls_Handlers_Compatibility_TabbedRenderer_set_SelectedViewController;
		xamarin_registrar_dlsym ((void **) &callback_361_Microsoft_Maui_Controls_Handlers_Compatibility_TabbedRenderer_set_SelectedViewController, "Microsoft.Maui.Controls", "callback_361_Microsoft_Maui_Controls_Handlers_Compatibility_TabbedRenderer_set_SelectedViewController", 360);
		callback_361_Microsoft_Maui_Controls_Handlers_Compatibility_TabbedRenderer_set_SelectedViewController (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_362_Microsoft_Maui_Controls_Handlers_Compatibility_TabbedRenderer_DidRotate_function) (id self, SEL sel, NSInteger p0, GCHandle* exception_gchandle);
	-(void) didRotateFromInterfaceOrientation:(NSInteger)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_362_Microsoft_Maui_Controls_Handlers_Compatibility_TabbedRenderer_DidRotate_function callback_362_Microsoft_Maui_Controls_Handlers_Compatibility_TabbedRenderer_DidRotate;
		xamarin_registrar_dlsym ((void **) &callback_362_Microsoft_Maui_Controls_Handlers_Compatibility_TabbedRenderer_DidRotate, "Microsoft.Maui.Controls", "callback_362_Microsoft_Maui_Controls_Handlers_Compatibility_TabbedRenderer_DidRotate", 361);
		callback_362_Microsoft_Maui_Controls_Handlers_Compatibility_TabbedRenderer_DidRotate (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_363_Microsoft_Maui_Controls_Handlers_Compatibility_TabbedRenderer_ViewDidAppear_function) (id self, SEL sel, BOOL p0, GCHandle* exception_gchandle);
	-(void) viewDidAppear:(BOOL)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_363_Microsoft_Maui_Controls_Handlers_Compatibility_TabbedRenderer_ViewDidAppear_function callback_363_Microsoft_Maui_Controls_Handlers_Compatibility_TabbedRenderer_ViewDidAppear;
		xamarin_registrar_dlsym ((void **) &callback_363_Microsoft_Maui_Controls_Handlers_Compatibility_TabbedRenderer_ViewDidAppear, "Microsoft.Maui.Controls", "callback_363_Microsoft_Maui_Controls_Handlers_Compatibility_TabbedRenderer_ViewDidAppear", 362);
		callback_363_Microsoft_Maui_Controls_Handlers_Compatibility_TabbedRenderer_ViewDidAppear (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_364_Microsoft_Maui_Controls_Handlers_Compatibility_TabbedRenderer_ViewDidDisappear_function) (id self, SEL sel, BOOL p0, GCHandle* exception_gchandle);
	-(void) viewDidDisappear:(BOOL)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_364_Microsoft_Maui_Controls_Handlers_Compatibility_TabbedRenderer_ViewDidDisappear_function callback_364_Microsoft_Maui_Controls_Handlers_Compatibility_TabbedRenderer_ViewDidDisappear;
		xamarin_registrar_dlsym ((void **) &callback_364_Microsoft_Maui_Controls_Handlers_Compatibility_TabbedRenderer_ViewDidDisappear, "Microsoft.Maui.Controls", "callback_364_Microsoft_Maui_Controls_Handlers_Compatibility_TabbedRenderer_ViewDidDisappear", 363);
		callback_364_Microsoft_Maui_Controls_Handlers_Compatibility_TabbedRenderer_ViewDidDisappear (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_365_Microsoft_Maui_Controls_Handlers_Compatibility_TabbedRenderer_ViewDidLayoutSubviews_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) viewDidLayoutSubviews
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_365_Microsoft_Maui_Controls_Handlers_Compatibility_TabbedRenderer_ViewDidLayoutSubviews_function callback_365_Microsoft_Maui_Controls_Handlers_Compatibility_TabbedRenderer_ViewDidLayoutSubviews;
		xamarin_registrar_dlsym ((void **) &callback_365_Microsoft_Maui_Controls_Handlers_Compatibility_TabbedRenderer_ViewDidLayoutSubviews, "Microsoft.Maui.Controls", "callback_365_Microsoft_Maui_Controls_Handlers_Compatibility_TabbedRenderer_ViewDidLayoutSubviews", 364);
		callback_365_Microsoft_Maui_Controls_Handlers_Compatibility_TabbedRenderer_ViewDidLayoutSubviews (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef UIViewController * (*callback_366_Microsoft_Maui_Controls_Handlers_Compatibility_TabbedRenderer_ChildViewControllerForStatusBarHidden_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(UIViewController *) childViewControllerForStatusBarHidden
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		UIViewController * rv = { 0 };
		static callback_366_Microsoft_Maui_Controls_Handlers_Compatibility_TabbedRenderer_ChildViewControllerForStatusBarHidden_function callback_366_Microsoft_Maui_Controls_Handlers_Compatibility_TabbedRenderer_ChildViewControllerForStatusBarHidden;
		xamarin_registrar_dlsym ((void **) &callback_366_Microsoft_Maui_Controls_Handlers_Compatibility_TabbedRenderer_ChildViewControllerForStatusBarHidden, "Microsoft.Maui.Controls", "callback_366_Microsoft_Maui_Controls_Handlers_Compatibility_TabbedRenderer_ChildViewControllerForStatusBarHidden", 365);
		rv = callback_366_Microsoft_Maui_Controls_Handlers_Compatibility_TabbedRenderer_ChildViewControllerForStatusBarHidden (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef UIViewController * (*callback_367_Microsoft_Maui_Controls_Handlers_Compatibility_TabbedRenderer_get_ChildViewControllerForHomeIndicatorAutoHidden_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(UIViewController *) childViewControllerForHomeIndicatorAutoHidden
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		UIViewController * rv = { 0 };
		static callback_367_Microsoft_Maui_Controls_Handlers_Compatibility_TabbedRenderer_get_ChildViewControllerForHomeIndicatorAutoHidden_function callback_367_Microsoft_Maui_Controls_Handlers_Compatibility_TabbedRenderer_get_ChildViewControllerForHomeIndicatorAutoHidden;
		xamarin_registrar_dlsym ((void **) &callback_367_Microsoft_Maui_Controls_Handlers_Compatibility_TabbedRenderer_get_ChildViewControllerForHomeIndicatorAutoHidden, "Microsoft.Maui.Controls", "callback_367_Microsoft_Maui_Controls_Handlers_Compatibility_TabbedRenderer_get_ChildViewControllerForHomeIndicatorAutoHidden", 366);
		rv = callback_367_Microsoft_Maui_Controls_Handlers_Compatibility_TabbedRenderer_get_ChildViewControllerForHomeIndicatorAutoHidden (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef id (*callback_359_Microsoft_Maui_Controls_Handlers_Compatibility_TabbedRenderer__ctor_function) (id self, SEL sel, bool* call_super, GCHandle* exception_gchandle);
	-(id) init
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_359_Microsoft_Maui_Controls_Handlers_Compatibility_TabbedRenderer__ctor_function callback_359_Microsoft_Maui_Controls_Handlers_Compatibility_TabbedRenderer__ctor;
		xamarin_registrar_dlsym ((void **) &callback_359_Microsoft_Maui_Controls_Handlers_Compatibility_TabbedRenderer__ctor, "Microsoft.Maui.Controls", "callback_359_Microsoft_Maui_Controls_Handlers_Compatibility_TabbedRenderer__ctor", 358);
		rv = callback_359_Microsoft_Maui_Controls_Handlers_Compatibility_TabbedRenderer__ctor (self, _cmd, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [UITabBarController class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@interface Microsoft_Maui_Controls_Compatibility_Platform_iOS_ToolbarItemExtensions_SecondaryToolbarItem_SecondaryToolbarItemContent : UIControl {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(BOOL) isEnabled;
	-(void) setEnabled:(BOOL)p0;
	-(void) layoutSubviews;
	-(BOOL) conformsToProtocol:(void *)p0;
	-(id) init;
@end

@implementation Microsoft_Maui_Controls_Compatibility_Platform_iOS_ToolbarItemExtensions_SecondaryToolbarItem_SecondaryToolbarItemContent {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	typedef BOOL (*callback_2_Microsoft_Maui_Controls_Compatibility_Platform_iOS_ToolbarItemExtensions_SecondaryToolbarItem_SecondaryToolbarItemContent_get_Enabled_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(BOOL) isEnabled
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		BOOL rv = { 0 };
		static callback_2_Microsoft_Maui_Controls_Compatibility_Platform_iOS_ToolbarItemExtensions_SecondaryToolbarItem_SecondaryToolbarItemContent_get_Enabled_function callback_2_Microsoft_Maui_Controls_Compatibility_Platform_iOS_ToolbarItemExtensions_SecondaryToolbarItem_SecondaryToolbarItemContent_get_Enabled;
		xamarin_registrar_dlsym ((void **) &callback_2_Microsoft_Maui_Controls_Compatibility_Platform_iOS_ToolbarItemExtensions_SecondaryToolbarItem_SecondaryToolbarItemContent_get_Enabled, "Microsoft.Maui.Controls", "callback_2_Microsoft_Maui_Controls_Compatibility_Platform_iOS_ToolbarItemExtensions_SecondaryToolbarItem_SecondaryToolbarItemContent_get_Enabled", 1);
		rv = callback_2_Microsoft_Maui_Controls_Compatibility_Platform_iOS_ToolbarItemExtensions_SecondaryToolbarItem_SecondaryToolbarItemContent_get_Enabled (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef void (*callback_3_Microsoft_Maui_Controls_Compatibility_Platform_iOS_ToolbarItemExtensions_SecondaryToolbarItem_SecondaryToolbarItemContent_set_Enabled_function) (id self, SEL sel, BOOL p0, GCHandle* exception_gchandle);
	-(void) setEnabled:(BOOL)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_3_Microsoft_Maui_Controls_Compatibility_Platform_iOS_ToolbarItemExtensions_SecondaryToolbarItem_SecondaryToolbarItemContent_set_Enabled_function callback_3_Microsoft_Maui_Controls_Compatibility_Platform_iOS_ToolbarItemExtensions_SecondaryToolbarItem_SecondaryToolbarItemContent_set_Enabled;
		xamarin_registrar_dlsym ((void **) &callback_3_Microsoft_Maui_Controls_Compatibility_Platform_iOS_ToolbarItemExtensions_SecondaryToolbarItem_SecondaryToolbarItemContent_set_Enabled, "Microsoft.Maui.Controls", "callback_3_Microsoft_Maui_Controls_Compatibility_Platform_iOS_ToolbarItemExtensions_SecondaryToolbarItem_SecondaryToolbarItemContent_set_Enabled", 2);
		callback_3_Microsoft_Maui_Controls_Compatibility_Platform_iOS_ToolbarItemExtensions_SecondaryToolbarItem_SecondaryToolbarItemContent_set_Enabled (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_4_Microsoft_Maui_Controls_Compatibility_Platform_iOS_ToolbarItemExtensions_SecondaryToolbarItem_SecondaryToolbarItemContent_LayoutSubviews_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) layoutSubviews
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_4_Microsoft_Maui_Controls_Compatibility_Platform_iOS_ToolbarItemExtensions_SecondaryToolbarItem_SecondaryToolbarItemContent_LayoutSubviews_function callback_4_Microsoft_Maui_Controls_Compatibility_Platform_iOS_ToolbarItemExtensions_SecondaryToolbarItem_SecondaryToolbarItemContent_LayoutSubviews;
		xamarin_registrar_dlsym ((void **) &callback_4_Microsoft_Maui_Controls_Compatibility_Platform_iOS_ToolbarItemExtensions_SecondaryToolbarItem_SecondaryToolbarItemContent_LayoutSubviews, "Microsoft.Maui.Controls", "callback_4_Microsoft_Maui_Controls_Compatibility_Platform_iOS_ToolbarItemExtensions_SecondaryToolbarItem_SecondaryToolbarItemContent_LayoutSubviews", 3);
		callback_4_Microsoft_Maui_Controls_Compatibility_Platform_iOS_ToolbarItemExtensions_SecondaryToolbarItem_SecondaryToolbarItemContent_LayoutSubviews (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef id (*callback_1_Microsoft_Maui_Controls_Compatibility_Platform_iOS_ToolbarItemExtensions_SecondaryToolbarItem_SecondaryToolbarItemContent__ctor_function) (id self, SEL sel, bool* call_super, GCHandle* exception_gchandle);
	-(id) init
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_1_Microsoft_Maui_Controls_Compatibility_Platform_iOS_ToolbarItemExtensions_SecondaryToolbarItem_SecondaryToolbarItemContent__ctor_function callback_1_Microsoft_Maui_Controls_Compatibility_Platform_iOS_ToolbarItemExtensions_SecondaryToolbarItem_SecondaryToolbarItemContent__ctor;
		xamarin_registrar_dlsym ((void **) &callback_1_Microsoft_Maui_Controls_Compatibility_Platform_iOS_ToolbarItemExtensions_SecondaryToolbarItem_SecondaryToolbarItemContent__ctor, "Microsoft.Maui.Controls", "callback_1_Microsoft_Maui_Controls_Compatibility_Platform_iOS_ToolbarItemExtensions_SecondaryToolbarItem_SecondaryToolbarItemContent__ctor", 0);
		rv = callback_1_Microsoft_Maui_Controls_Compatibility_Platform_iOS_ToolbarItemExtensions_SecondaryToolbarItem_SecondaryToolbarItemContent__ctor (self, _cmd, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [UIControl class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@interface Microsoft_Maui_Controls_Compatibility_Platform_iOS_ToolbarItemExtensions_SecondaryToolbarItem : UIBarButtonItem {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(BOOL) conformsToProtocol:(void *)p0;
@end

@implementation Microsoft_Maui_Controls_Compatibility_Platform_iOS_ToolbarItemExtensions_SecondaryToolbarItem {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}

	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
@end

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_MacCatalyst__UIKit_UIContextMenuInteractionDelegate {
}

	typedef id (*callback_3369_UIKit_UIContextMenuInteractionDelegate__ctor_function) (id self, SEL sel, bool* call_super, GCHandle* exception_gchandle);
	-(id) init
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_3369_UIKit_UIContextMenuInteractionDelegate__ctor_function callback_3369_UIKit_UIContextMenuInteractionDelegate__ctor;
		xamarin_registrar_dlsym ((void **) &callback_3369_UIKit_UIContextMenuInteractionDelegate__ctor, "Microsoft.MacCatalyst", "callback_3369_UIKit_UIContextMenuInteractionDelegate__ctor", 105);
		rv = callback_3369_UIKit_UIContextMenuInteractionDelegate__ctor (self, _cmd, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

@interface Microsoft_Maui_Controls_Platform_GesturePlatformManager_FakeRightClickContextMenuInteraction_FakeRightClickDelegate : NSObject<UIContextMenuInteractionDelegate> {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(UIContextMenuConfiguration *) contextMenuInteraction:(UIContextMenuInteraction *)p0 configurationForMenuAtLocation:(CGPoint)p1;
	-(BOOL) conformsToProtocol:(void *)p0;
@end

@implementation Microsoft_Maui_Controls_Platform_GesturePlatformManager_FakeRightClickContextMenuInteraction_FakeRightClickDelegate {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	typedef UIContextMenuConfiguration * (*callback_9_Microsoft_Maui_Controls_Platform_GesturePlatformManager_FakeRightClickContextMenuInteraction_FakeRightClickDelegate_GetConfigurationForMenu_function) (id self, SEL sel, UIContextMenuInteraction * p0, CGPoint p1, GCHandle* exception_gchandle);
	-(UIContextMenuConfiguration *) contextMenuInteraction:(UIContextMenuInteraction *)p0 configurationForMenuAtLocation:(CGPoint)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		UIContextMenuConfiguration * rv = { 0 };
		static callback_9_Microsoft_Maui_Controls_Platform_GesturePlatformManager_FakeRightClickContextMenuInteraction_FakeRightClickDelegate_GetConfigurationForMenu_function callback_9_Microsoft_Maui_Controls_Platform_GesturePlatformManager_FakeRightClickContextMenuInteraction_FakeRightClickDelegate_GetConfigurationForMenu;
		xamarin_registrar_dlsym ((void **) &callback_9_Microsoft_Maui_Controls_Platform_GesturePlatformManager_FakeRightClickContextMenuInteraction_FakeRightClickDelegate_GetConfigurationForMenu, "Microsoft.Maui.Controls", "callback_9_Microsoft_Maui_Controls_Platform_GesturePlatformManager_FakeRightClickContextMenuInteraction_FakeRightClickDelegate_GetConfigurationForMenu", 8);
		rv = callback_9_Microsoft_Maui_Controls_Platform_GesturePlatformManager_FakeRightClickContextMenuInteraction_FakeRightClickDelegate_GetConfigurationForMenu (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
@end

@interface Microsoft_Maui_Controls_Platform_GesturePlatformManager_FakeRightClickContextMenuInteraction : UIContextMenuInteraction {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(BOOL) conformsToProtocol:(void *)p0;
@end

@implementation Microsoft_Maui_Controls_Platform_GesturePlatformManager_FakeRightClickContextMenuInteraction {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}

	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
@end

@interface Microsoft_Maui_Controls_Handlers_Compatibility_ContextActionsCell_SelectGestureRecognizer : UITapGestureRecognizer {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(BOOL) conformsToProtocol:(void *)p0;
	-(id) init;
@end

@implementation Microsoft_Maui_Controls_Handlers_Compatibility_ContextActionsCell_SelectGestureRecognizer {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}

	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef id (*callback_275_Microsoft_Maui_Controls_Handlers_Compatibility_ContextActionsCell_SelectGestureRecognizer__ctor_function) (id self, SEL sel, bool* call_super, GCHandle* exception_gchandle);
	-(id) init
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_275_Microsoft_Maui_Controls_Handlers_Compatibility_ContextActionsCell_SelectGestureRecognizer__ctor_function callback_275_Microsoft_Maui_Controls_Handlers_Compatibility_ContextActionsCell_SelectGestureRecognizer__ctor;
		xamarin_registrar_dlsym ((void **) &callback_275_Microsoft_Maui_Controls_Handlers_Compatibility_ContextActionsCell_SelectGestureRecognizer__ctor, "Microsoft.Maui.Controls", "callback_275_Microsoft_Maui_Controls_Handlers_Compatibility_ContextActionsCell_SelectGestureRecognizer__ctor", 274);
		rv = callback_275_Microsoft_Maui_Controls_Handlers_Compatibility_ContextActionsCell_SelectGestureRecognizer__ctor (self, _cmd, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [UITapGestureRecognizer class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@implementation Microsoft_Maui_Controls_Handlers_Compatibility_EntryCellRenderer_EntryCellTableViewCell {
}

	typedef void (*callback_287_Microsoft_Maui_Controls_Handlers_Compatibility_EntryCellRenderer_EntryCellTableViewCell_LayoutSubviews_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) layoutSubviews
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_287_Microsoft_Maui_Controls_Handlers_Compatibility_EntryCellRenderer_EntryCellTableViewCell_LayoutSubviews_function callback_287_Microsoft_Maui_Controls_Handlers_Compatibility_EntryCellRenderer_EntryCellTableViewCell_LayoutSubviews;
		xamarin_registrar_dlsym ((void **) &callback_287_Microsoft_Maui_Controls_Handlers_Compatibility_EntryCellRenderer_EntryCellTableViewCell_LayoutSubviews, "Microsoft.Maui.Controls", "callback_287_Microsoft_Maui_Controls_Handlers_Compatibility_EntryCellRenderer_EntryCellTableViewCell_LayoutSubviews", 286);
		callback_287_Microsoft_Maui_Controls_Handlers_Compatibility_EntryCellRenderer_EntryCellTableViewCell_LayoutSubviews (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}
@end

@interface Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_SecondaryToolbar : UIToolbar {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(NSArray *) items;
	-(void) setItems:(NSArray *)p0;
	-(void) layoutSubviews;
	-(BOOL) conformsToProtocol:(void *)p0;
	-(id) init;
@end

@implementation Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_SecondaryToolbar {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	typedef NSArray * (*callback_313_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_SecondaryToolbar_get_Items_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(NSArray *) items
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		NSArray * rv = { 0 };
		static callback_313_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_SecondaryToolbar_get_Items_function callback_313_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_SecondaryToolbar_get_Items;
		xamarin_registrar_dlsym ((void **) &callback_313_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_SecondaryToolbar_get_Items, "Microsoft.Maui.Controls", "callback_313_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_SecondaryToolbar_get_Items", 312);
		rv = callback_313_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_SecondaryToolbar_get_Items (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef void (*callback_314_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_SecondaryToolbar_set_Items_function) (id self, SEL sel, NSArray * p0, GCHandle* exception_gchandle);
	-(void) setItems:(NSArray *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_314_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_SecondaryToolbar_set_Items_function callback_314_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_SecondaryToolbar_set_Items;
		xamarin_registrar_dlsym ((void **) &callback_314_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_SecondaryToolbar_set_Items, "Microsoft.Maui.Controls", "callback_314_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_SecondaryToolbar_set_Items", 313);
		callback_314_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_SecondaryToolbar_set_Items (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_315_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_SecondaryToolbar_LayoutSubviews_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) layoutSubviews
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_315_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_SecondaryToolbar_LayoutSubviews_function callback_315_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_SecondaryToolbar_LayoutSubviews;
		xamarin_registrar_dlsym ((void **) &callback_315_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_SecondaryToolbar_LayoutSubviews, "Microsoft.Maui.Controls", "callback_315_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_SecondaryToolbar_LayoutSubviews", 314);
		callback_315_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_SecondaryToolbar_LayoutSubviews (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef id (*callback_312_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_SecondaryToolbar__ctor_function) (id self, SEL sel, bool* call_super, GCHandle* exception_gchandle);
	-(id) init
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_312_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_SecondaryToolbar__ctor_function callback_312_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_SecondaryToolbar__ctor;
		xamarin_registrar_dlsym ((void **) &callback_312_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_SecondaryToolbar__ctor, "Microsoft.Maui.Controls", "callback_312_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_SecondaryToolbar__ctor", 311);
		rv = callback_312_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_SecondaryToolbar__ctor (self, _cmd, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [UIToolbar class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@interface Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ParentingViewController : UIViewController {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(void) didRotateFromInterfaceOrientation:(NSInteger)p0;
	-(void) viewDidAppear:(BOOL)p0;
	-(void) viewDidDisappear:(BOOL)p0;
	-(void) viewWillLayoutSubviews;
	-(void) viewDidLayoutSubviews;
	-(void) viewDidLoad;
	-(void) viewWillAppear:(BOOL)p0;
	-(void) willMoveToParentViewController:(UIViewController *)p0;
	-(void) viewWillTransitionToSize:(CGSize)p0 withTransitionCoordinator:(id)p1;
	-(NSUInteger) supportedInterfaceOrientations;
	-(NSInteger) preferredInterfaceOrientationForPresentation;
	-(BOOL) shouldAutorotate;
	-(BOOL) shouldAutorotateToInterfaceOrientation:(NSInteger)p0;
	-(BOOL) shouldAutomaticallyForwardRotationMethods;
	-(void) didMoveToParentViewController:(UIViewController *)p0;
	-(BOOL) conformsToProtocol:(void *)p0;
@end

@implementation Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ParentingViewController {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	typedef void (*callback_318_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ParentingViewController_DidRotate_function) (id self, SEL sel, NSInteger p0, GCHandle* exception_gchandle);
	-(void) didRotateFromInterfaceOrientation:(NSInteger)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_318_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ParentingViewController_DidRotate_function callback_318_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ParentingViewController_DidRotate;
		xamarin_registrar_dlsym ((void **) &callback_318_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ParentingViewController_DidRotate, "Microsoft.Maui.Controls", "callback_318_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ParentingViewController_DidRotate", 317);
		callback_318_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ParentingViewController_DidRotate (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_319_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ParentingViewController_ViewDidAppear_function) (id self, SEL sel, BOOL p0, GCHandle* exception_gchandle);
	-(void) viewDidAppear:(BOOL)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_319_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ParentingViewController_ViewDidAppear_function callback_319_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ParentingViewController_ViewDidAppear;
		xamarin_registrar_dlsym ((void **) &callback_319_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ParentingViewController_ViewDidAppear, "Microsoft.Maui.Controls", "callback_319_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ParentingViewController_ViewDidAppear", 318);
		callback_319_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ParentingViewController_ViewDidAppear (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_320_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ParentingViewController_ViewDidDisappear_function) (id self, SEL sel, BOOL p0, GCHandle* exception_gchandle);
	-(void) viewDidDisappear:(BOOL)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_320_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ParentingViewController_ViewDidDisappear_function callback_320_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ParentingViewController_ViewDidDisappear;
		xamarin_registrar_dlsym ((void **) &callback_320_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ParentingViewController_ViewDidDisappear, "Microsoft.Maui.Controls", "callback_320_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ParentingViewController_ViewDidDisappear", 319);
		callback_320_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ParentingViewController_ViewDidDisappear (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_321_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ParentingViewController_ViewWillLayoutSubviews_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) viewWillLayoutSubviews
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_321_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ParentingViewController_ViewWillLayoutSubviews_function callback_321_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ParentingViewController_ViewWillLayoutSubviews;
		xamarin_registrar_dlsym ((void **) &callback_321_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ParentingViewController_ViewWillLayoutSubviews, "Microsoft.Maui.Controls", "callback_321_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ParentingViewController_ViewWillLayoutSubviews", 320);
		callback_321_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ParentingViewController_ViewWillLayoutSubviews (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_322_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ParentingViewController_ViewDidLayoutSubviews_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) viewDidLayoutSubviews
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_322_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ParentingViewController_ViewDidLayoutSubviews_function callback_322_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ParentingViewController_ViewDidLayoutSubviews;
		xamarin_registrar_dlsym ((void **) &callback_322_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ParentingViewController_ViewDidLayoutSubviews, "Microsoft.Maui.Controls", "callback_322_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ParentingViewController_ViewDidLayoutSubviews", 321);
		callback_322_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ParentingViewController_ViewDidLayoutSubviews (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_323_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ParentingViewController_ViewDidLoad_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) viewDidLoad
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_323_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ParentingViewController_ViewDidLoad_function callback_323_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ParentingViewController_ViewDidLoad;
		xamarin_registrar_dlsym ((void **) &callback_323_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ParentingViewController_ViewDidLoad, "Microsoft.Maui.Controls", "callback_323_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ParentingViewController_ViewDidLoad", 322);
		callback_323_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ParentingViewController_ViewDidLoad (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_324_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ParentingViewController_ViewWillAppear_function) (id self, SEL sel, BOOL p0, GCHandle* exception_gchandle);
	-(void) viewWillAppear:(BOOL)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_324_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ParentingViewController_ViewWillAppear_function callback_324_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ParentingViewController_ViewWillAppear;
		xamarin_registrar_dlsym ((void **) &callback_324_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ParentingViewController_ViewWillAppear, "Microsoft.Maui.Controls", "callback_324_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ParentingViewController_ViewWillAppear", 323);
		callback_324_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ParentingViewController_ViewWillAppear (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_325_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ParentingViewController_WillMoveToParentViewController_function) (id self, SEL sel, UIViewController * p0, GCHandle* exception_gchandle);
	-(void) willMoveToParentViewController:(UIViewController *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_325_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ParentingViewController_WillMoveToParentViewController_function callback_325_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ParentingViewController_WillMoveToParentViewController;
		xamarin_registrar_dlsym ((void **) &callback_325_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ParentingViewController_WillMoveToParentViewController, "Microsoft.Maui.Controls", "callback_325_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ParentingViewController_WillMoveToParentViewController", 324);
		callback_325_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ParentingViewController_WillMoveToParentViewController (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_326_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ParentingViewController_ViewWillTransitionToSize_function) (id self, SEL sel, CGSize p0, id p1, GCHandle* exception_gchandle);
	-(void) viewWillTransitionToSize:(CGSize)p0 withTransitionCoordinator:(id)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_326_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ParentingViewController_ViewWillTransitionToSize_function callback_326_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ParentingViewController_ViewWillTransitionToSize;
		xamarin_registrar_dlsym ((void **) &callback_326_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ParentingViewController_ViewWillTransitionToSize, "Microsoft.Maui.Controls", "callback_326_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ParentingViewController_ViewWillTransitionToSize", 325);
		callback_326_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ParentingViewController_ViewWillTransitionToSize (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef NSUInteger (*callback_327_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ParentingViewController_GetSupportedInterfaceOrientations_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(NSUInteger) supportedInterfaceOrientations
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		NSUInteger rv = { 0 };
		static callback_327_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ParentingViewController_GetSupportedInterfaceOrientations_function callback_327_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ParentingViewController_GetSupportedInterfaceOrientations;
		xamarin_registrar_dlsym ((void **) &callback_327_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ParentingViewController_GetSupportedInterfaceOrientations, "Microsoft.Maui.Controls", "callback_327_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ParentingViewController_GetSupportedInterfaceOrientations", 326);
		rv = callback_327_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ParentingViewController_GetSupportedInterfaceOrientations (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef NSInteger (*callback_328_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ParentingViewController_PreferredInterfaceOrientationForPresentation_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(NSInteger) preferredInterfaceOrientationForPresentation
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		NSInteger rv = { 0 };
		static callback_328_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ParentingViewController_PreferredInterfaceOrientationForPresentation_function callback_328_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ParentingViewController_PreferredInterfaceOrientationForPresentation;
		xamarin_registrar_dlsym ((void **) &callback_328_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ParentingViewController_PreferredInterfaceOrientationForPresentation, "Microsoft.Maui.Controls", "callback_328_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ParentingViewController_PreferredInterfaceOrientationForPresentation", 327);
		rv = callback_328_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ParentingViewController_PreferredInterfaceOrientationForPresentation (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef BOOL (*callback_329_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ParentingViewController_ShouldAutorotate_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(BOOL) shouldAutorotate
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		BOOL rv = { 0 };
		static callback_329_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ParentingViewController_ShouldAutorotate_function callback_329_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ParentingViewController_ShouldAutorotate;
		xamarin_registrar_dlsym ((void **) &callback_329_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ParentingViewController_ShouldAutorotate, "Microsoft.Maui.Controls", "callback_329_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ParentingViewController_ShouldAutorotate", 328);
		rv = callback_329_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ParentingViewController_ShouldAutorotate (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef BOOL (*callback_330_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ParentingViewController_ShouldAutorotateToInterfaceOrientation_function) (id self, SEL sel, NSInteger p0, GCHandle* exception_gchandle);
	-(BOOL) shouldAutorotateToInterfaceOrientation:(NSInteger)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		BOOL rv = { 0 };
		static callback_330_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ParentingViewController_ShouldAutorotateToInterfaceOrientation_function callback_330_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ParentingViewController_ShouldAutorotateToInterfaceOrientation;
		xamarin_registrar_dlsym ((void **) &callback_330_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ParentingViewController_ShouldAutorotateToInterfaceOrientation, "Microsoft.Maui.Controls", "callback_330_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ParentingViewController_ShouldAutorotateToInterfaceOrientation", 329);
		rv = callback_330_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ParentingViewController_ShouldAutorotateToInterfaceOrientation (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef BOOL (*callback_331_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ParentingViewController_get_ShouldAutomaticallyForwardRotationMethods_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(BOOL) shouldAutomaticallyForwardRotationMethods
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		BOOL rv = { 0 };
		static callback_331_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ParentingViewController_get_ShouldAutomaticallyForwardRotationMethods_function callback_331_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ParentingViewController_get_ShouldAutomaticallyForwardRotationMethods;
		xamarin_registrar_dlsym ((void **) &callback_331_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ParentingViewController_get_ShouldAutomaticallyForwardRotationMethods, "Microsoft.Maui.Controls", "callback_331_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ParentingViewController_get_ShouldAutomaticallyForwardRotationMethods", 330);
		rv = callback_331_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ParentingViewController_get_ShouldAutomaticallyForwardRotationMethods (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef void (*callback_332_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ParentingViewController_DidMoveToParentViewController_function) (id self, SEL sel, UIViewController * p0, GCHandle* exception_gchandle);
	-(void) didMoveToParentViewController:(UIViewController *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_332_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ParentingViewController_DidMoveToParentViewController_function callback_332_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ParentingViewController_DidMoveToParentViewController;
		xamarin_registrar_dlsym ((void **) &callback_332_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ParentingViewController_DidMoveToParentViewController, "Microsoft.Maui.Controls", "callback_332_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ParentingViewController_DidMoveToParentViewController", 331);
		callback_332_Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ParentingViewController_DidMoveToParentViewController (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
@end

@interface Microsoft_Maui_Platform_CollapseConstraint : NSLayoutConstraint {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(NSInteger) relation;
	-(NSInteger) firstAttribute;
	-(CGFloat) multiplier;
	-(BOOL) conformsToProtocol:(void *)p0;
	-(id) init;
@end

@implementation Microsoft_Maui_Platform_CollapseConstraint {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	typedef NSInteger (*callback_420_Microsoft_Maui_Platform_CollapseConstraint_get_Relation_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(NSInteger) relation
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		NSInteger rv = { 0 };
		static callback_420_Microsoft_Maui_Platform_CollapseConstraint_get_Relation_function callback_420_Microsoft_Maui_Platform_CollapseConstraint_get_Relation;
		xamarin_registrar_dlsym ((void **) &callback_420_Microsoft_Maui_Platform_CollapseConstraint_get_Relation, "Microsoft.Maui", "callback_420_Microsoft_Maui_Platform_CollapseConstraint_get_Relation", 39);
		rv = callback_420_Microsoft_Maui_Platform_CollapseConstraint_get_Relation (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef NSInteger (*callback_421_Microsoft_Maui_Platform_CollapseConstraint_get_FirstAttribute_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(NSInteger) firstAttribute
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		NSInteger rv = { 0 };
		static callback_421_Microsoft_Maui_Platform_CollapseConstraint_get_FirstAttribute_function callback_421_Microsoft_Maui_Platform_CollapseConstraint_get_FirstAttribute;
		xamarin_registrar_dlsym ((void **) &callback_421_Microsoft_Maui_Platform_CollapseConstraint_get_FirstAttribute, "Microsoft.Maui", "callback_421_Microsoft_Maui_Platform_CollapseConstraint_get_FirstAttribute", 40);
		rv = callback_421_Microsoft_Maui_Platform_CollapseConstraint_get_FirstAttribute (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef CGFloat (*callback_422_Microsoft_Maui_Platform_CollapseConstraint_get_Multiplier_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(CGFloat) multiplier
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		CGFloat rv = { 0 };
		static callback_422_Microsoft_Maui_Platform_CollapseConstraint_get_Multiplier_function callback_422_Microsoft_Maui_Platform_CollapseConstraint_get_Multiplier;
		xamarin_registrar_dlsym ((void **) &callback_422_Microsoft_Maui_Platform_CollapseConstraint_get_Multiplier, "Microsoft.Maui", "callback_422_Microsoft_Maui_Platform_CollapseConstraint_get_Multiplier", 41);
		rv = callback_422_Microsoft_Maui_Platform_CollapseConstraint_get_Multiplier (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef id (*callback_423_Microsoft_Maui_Platform_CollapseConstraint__ctor_function) (id self, SEL sel, bool* call_super, GCHandle* exception_gchandle);
	-(id) init
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_423_Microsoft_Maui_Platform_CollapseConstraint__ctor_function callback_423_Microsoft_Maui_Platform_CollapseConstraint__ctor;
		xamarin_registrar_dlsym ((void **) &callback_423_Microsoft_Maui_Platform_CollapseConstraint__ctor, "Microsoft.Maui", "callback_423_Microsoft_Maui_Platform_CollapseConstraint__ctor", 42);
		rv = callback_423_Microsoft_Maui_Platform_CollapseConstraint__ctor (self, _cmd, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSLayoutConstraint class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@implementation Microsoft_Maui_Platform_ContainerViewController {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	typedef void (*callback_424_Microsoft_Maui_Platform_ContainerViewController_LoadView_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) loadView
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_424_Microsoft_Maui_Platform_ContainerViewController_LoadView_function callback_424_Microsoft_Maui_Platform_ContainerViewController_LoadView;
		xamarin_registrar_dlsym ((void **) &callback_424_Microsoft_Maui_Platform_ContainerViewController_LoadView, "Microsoft.Maui", "callback_424_Microsoft_Maui_Platform_ContainerViewController_LoadView", 43);
		callback_424_Microsoft_Maui_Platform_ContainerViewController_LoadView (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_425_Microsoft_Maui_Platform_ContainerViewController_ViewDidLayoutSubviews_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) viewDidLayoutSubviews
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_425_Microsoft_Maui_Platform_ContainerViewController_ViewDidLayoutSubviews_function callback_425_Microsoft_Maui_Platform_ContainerViewController_ViewDidLayoutSubviews;
		xamarin_registrar_dlsym ((void **) &callback_425_Microsoft_Maui_Platform_ContainerViewController_ViewDidLayoutSubviews, "Microsoft.Maui", "callback_425_Microsoft_Maui_Platform_ContainerViewController_ViewDidLayoutSubviews", 44);
		callback_425_Microsoft_Maui_Platform_ContainerViewController_ViewDidLayoutSubviews (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef id (*callback_426_Microsoft_Maui_Platform_ContainerViewController__ctor_function) (id self, SEL sel, bool* call_super, GCHandle* exception_gchandle);
	-(id) init
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_426_Microsoft_Maui_Platform_ContainerViewController__ctor_function callback_426_Microsoft_Maui_Platform_ContainerViewController__ctor;
		xamarin_registrar_dlsym ((void **) &callback_426_Microsoft_Maui_Platform_ContainerViewController__ctor, "Microsoft.Maui", "callback_426_Microsoft_Maui_Platform_ContainerViewController__ctor", 45);
		rv = callback_426_Microsoft_Maui_Platform_ContainerViewController__ctor (self, _cmd, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [UIViewController class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@implementation Microsoft_Maui_Platform_LayoutView {
}

	typedef void (*callback_430_Microsoft_Maui_Platform_LayoutView_SubviewAdded_function) (id self, SEL sel, UIView * p0, GCHandle* exception_gchandle);
	-(void) didAddSubview:(UIView *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_430_Microsoft_Maui_Platform_LayoutView_SubviewAdded_function callback_430_Microsoft_Maui_Platform_LayoutView_SubviewAdded;
		xamarin_registrar_dlsym ((void **) &callback_430_Microsoft_Maui_Platform_LayoutView_SubviewAdded, "Microsoft.Maui", "callback_430_Microsoft_Maui_Platform_LayoutView_SubviewAdded", 49);
		callback_430_Microsoft_Maui_Platform_LayoutView_SubviewAdded (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_431_Microsoft_Maui_Platform_LayoutView_WillRemoveSubview_function) (id self, SEL sel, UIView * p0, GCHandle* exception_gchandle);
	-(void) willRemoveSubview:(UIView *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_431_Microsoft_Maui_Platform_LayoutView_WillRemoveSubview_function callback_431_Microsoft_Maui_Platform_LayoutView_WillRemoveSubview;
		xamarin_registrar_dlsym ((void **) &callback_431_Microsoft_Maui_Platform_LayoutView_WillRemoveSubview, "Microsoft.Maui", "callback_431_Microsoft_Maui_Platform_LayoutView_WillRemoveSubview", 50);
		callback_431_Microsoft_Maui_Platform_LayoutView_WillRemoveSubview (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef UIView * (*callback_432_Microsoft_Maui_Platform_LayoutView_HitTest_function) (id self, SEL sel, CGPoint p0, UIEvent * p1, GCHandle* exception_gchandle);
	-(UIView *) hitTest:(CGPoint)p0 withEvent:(UIEvent *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		UIView * rv = { 0 };
		static callback_432_Microsoft_Maui_Platform_LayoutView_HitTest_function callback_432_Microsoft_Maui_Platform_LayoutView_HitTest;
		xamarin_registrar_dlsym ((void **) &callback_432_Microsoft_Maui_Platform_LayoutView_HitTest, "Microsoft.Maui", "callback_432_Microsoft_Maui_Platform_LayoutView_HitTest", 51);
		rv = callback_432_Microsoft_Maui_Platform_LayoutView_HitTest (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef BOOL (*callback_433_Microsoft_Maui_Platform_LayoutView_get_UserInteractionEnabled_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(BOOL) isUserInteractionEnabled
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		BOOL rv = { 0 };
		static callback_433_Microsoft_Maui_Platform_LayoutView_get_UserInteractionEnabled_function callback_433_Microsoft_Maui_Platform_LayoutView_get_UserInteractionEnabled;
		xamarin_registrar_dlsym ((void **) &callback_433_Microsoft_Maui_Platform_LayoutView_get_UserInteractionEnabled, "Microsoft.Maui", "callback_433_Microsoft_Maui_Platform_LayoutView_get_UserInteractionEnabled", 52);
		rv = callback_433_Microsoft_Maui_Platform_LayoutView_get_UserInteractionEnabled (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef void (*callback_434_Microsoft_Maui_Platform_LayoutView_set_UserInteractionEnabled_function) (id self, SEL sel, BOOL p0, GCHandle* exception_gchandle);
	-(void) setUserInteractionEnabled:(BOOL)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_434_Microsoft_Maui_Platform_LayoutView_set_UserInteractionEnabled_function callback_434_Microsoft_Maui_Platform_LayoutView_set_UserInteractionEnabled;
		xamarin_registrar_dlsym ((void **) &callback_434_Microsoft_Maui_Platform_LayoutView_set_UserInteractionEnabled, "Microsoft.Maui", "callback_434_Microsoft_Maui_Platform_LayoutView_set_UserInteractionEnabled", 53);
		callback_434_Microsoft_Maui_Platform_LayoutView_set_UserInteractionEnabled (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef id (*callback_435_Microsoft_Maui_Platform_LayoutView__ctor_function) (id self, SEL sel, bool* call_super, GCHandle* exception_gchandle);
	-(id) init
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_435_Microsoft_Maui_Platform_LayoutView__ctor_function callback_435_Microsoft_Maui_Platform_LayoutView__ctor;
		xamarin_registrar_dlsym ((void **) &callback_435_Microsoft_Maui_Platform_LayoutView__ctor, "Microsoft.Maui", "callback_435_Microsoft_Maui_Platform_LayoutView__ctor", 54);
		rv = callback_435_Microsoft_Maui_Platform_LayoutView__ctor (self, _cmd, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [Microsoft_Maui_Platform_MauiView class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@implementation Microsoft_Maui_Platform_MauiActivityIndicator {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	typedef void (*callback_436_Microsoft_Maui_Platform_MauiActivityIndicator_Draw_function) (id self, SEL sel, CGRect p0, GCHandle* exception_gchandle);
	-(void) drawRect:(CGRect)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_436_Microsoft_Maui_Platform_MauiActivityIndicator_Draw_function callback_436_Microsoft_Maui_Platform_MauiActivityIndicator_Draw;
		xamarin_registrar_dlsym ((void **) &callback_436_Microsoft_Maui_Platform_MauiActivityIndicator_Draw, "Microsoft.Maui", "callback_436_Microsoft_Maui_Platform_MauiActivityIndicator_Draw", 55);
		callback_436_Microsoft_Maui_Platform_MauiActivityIndicator_Draw (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_437_Microsoft_Maui_Platform_MauiActivityIndicator_LayoutSubviews_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) layoutSubviews
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_437_Microsoft_Maui_Platform_MauiActivityIndicator_LayoutSubviews_function callback_437_Microsoft_Maui_Platform_MauiActivityIndicator_LayoutSubviews;
		xamarin_registrar_dlsym ((void **) &callback_437_Microsoft_Maui_Platform_MauiActivityIndicator_LayoutSubviews, "Microsoft.Maui", "callback_437_Microsoft_Maui_Platform_MauiActivityIndicator_LayoutSubviews", 56);
		callback_437_Microsoft_Maui_Platform_MauiActivityIndicator_LayoutSubviews (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_438_Microsoft_Maui_Platform_MauiActivityIndicator_MovedToWindow_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) didMoveToWindow
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_438_Microsoft_Maui_Platform_MauiActivityIndicator_MovedToWindow_function callback_438_Microsoft_Maui_Platform_MauiActivityIndicator_MovedToWindow;
		xamarin_registrar_dlsym ((void **) &callback_438_Microsoft_Maui_Platform_MauiActivityIndicator_MovedToWindow, "Microsoft.Maui", "callback_438_Microsoft_Maui_Platform_MauiActivityIndicator_MovedToWindow", 57);
		callback_438_Microsoft_Maui_Platform_MauiActivityIndicator_MovedToWindow (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
@end

@implementation PlatformGraphicsView {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	typedef void (*callback_588_Microsoft_Maui_Graphics_Platform_PlatformGraphicsView_WillMoveToSuperview_function) (id self, SEL sel, UIView * p0, GCHandle* exception_gchandle);
	-(void) willMoveToSuperview:(UIView *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_588_Microsoft_Maui_Graphics_Platform_PlatformGraphicsView_WillMoveToSuperview_function callback_588_Microsoft_Maui_Graphics_Platform_PlatformGraphicsView_WillMoveToSuperview;
		xamarin_registrar_dlsym ((void **) &callback_588_Microsoft_Maui_Graphics_Platform_PlatformGraphicsView_WillMoveToSuperview, "Microsoft.Maui.Graphics", "callback_588_Microsoft_Maui_Graphics_Platform_PlatformGraphicsView_WillMoveToSuperview", 0);
		callback_588_Microsoft_Maui_Graphics_Platform_PlatformGraphicsView_WillMoveToSuperview (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_589_Microsoft_Maui_Graphics_Platform_PlatformGraphicsView_Draw_function) (id self, SEL sel, CGRect p0, GCHandle* exception_gchandle);
	-(void) drawRect:(CGRect)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_589_Microsoft_Maui_Graphics_Platform_PlatformGraphicsView_Draw_function callback_589_Microsoft_Maui_Graphics_Platform_PlatformGraphicsView_Draw;
		xamarin_registrar_dlsym ((void **) &callback_589_Microsoft_Maui_Graphics_Platform_PlatformGraphicsView_Draw, "Microsoft.Maui.Graphics", "callback_589_Microsoft_Maui_Graphics_Platform_PlatformGraphicsView_Draw", 1);
		callback_589_Microsoft_Maui_Graphics_Platform_PlatformGraphicsView_Draw (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef CGRect (*callback_590_Microsoft_Maui_Graphics_Platform_PlatformGraphicsView_get_Bounds_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(CGRect) bounds
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		CGRect rv = { 0 };
		static callback_590_Microsoft_Maui_Graphics_Platform_PlatformGraphicsView_get_Bounds_function callback_590_Microsoft_Maui_Graphics_Platform_PlatformGraphicsView_get_Bounds;
		xamarin_registrar_dlsym ((void **) &callback_590_Microsoft_Maui_Graphics_Platform_PlatformGraphicsView_get_Bounds, "Microsoft.Maui.Graphics", "callback_590_Microsoft_Maui_Graphics_Platform_PlatformGraphicsView_get_Bounds", 2);
		rv = callback_590_Microsoft_Maui_Graphics_Platform_PlatformGraphicsView_get_Bounds (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef void (*callback_591_Microsoft_Maui_Graphics_Platform_PlatformGraphicsView_set_Bounds_function) (id self, SEL sel, CGRect p0, GCHandle* exception_gchandle);
	-(void) setBounds:(CGRect)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_591_Microsoft_Maui_Graphics_Platform_PlatformGraphicsView_set_Bounds_function callback_591_Microsoft_Maui_Graphics_Platform_PlatformGraphicsView_set_Bounds;
		xamarin_registrar_dlsym ((void **) &callback_591_Microsoft_Maui_Graphics_Platform_PlatformGraphicsView_set_Bounds, "Microsoft.Maui.Graphics", "callback_591_Microsoft_Maui_Graphics_Platform_PlatformGraphicsView_set_Bounds", 3);
		callback_591_Microsoft_Maui_Graphics_Platform_PlatformGraphicsView_set_Bounds (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
@end

@implementation Microsoft_Maui_Platform_MauiBoxView {
}

	typedef void (*callback_440_Microsoft_Maui_Platform_MauiBoxView_MovedToWindow_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) didMoveToWindow
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_440_Microsoft_Maui_Platform_MauiBoxView_MovedToWindow_function callback_440_Microsoft_Maui_Platform_MauiBoxView_MovedToWindow;
		xamarin_registrar_dlsym ((void **) &callback_440_Microsoft_Maui_Platform_MauiBoxView_MovedToWindow, "Microsoft.Maui", "callback_440_Microsoft_Maui_Platform_MauiBoxView_MovedToWindow", 59);
		callback_440_Microsoft_Maui_Platform_MauiBoxView_MovedToWindow (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef id (*callback_439_Microsoft_Maui_Platform_MauiBoxView__ctor_function) (id self, SEL sel, bool* call_super, GCHandle* exception_gchandle);
	-(id) init
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_439_Microsoft_Maui_Platform_MauiBoxView__ctor_function callback_439_Microsoft_Maui_Platform_MauiBoxView__ctor;
		xamarin_registrar_dlsym ((void **) &callback_439_Microsoft_Maui_Platform_MauiBoxView__ctor, "Microsoft.Maui", "callback_439_Microsoft_Maui_Platform_MauiBoxView__ctor", 58);
		rv = callback_439_Microsoft_Maui_Platform_MauiBoxView__ctor (self, _cmd, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [PlatformGraphicsView class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@implementation Microsoft_Maui_Platform_MauiCALayer {
	XamarinObject __monoObjectGCHandle;
}
	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	typedef void (*callback_442_Microsoft_Maui_Platform_MauiCALayer_AddAnimation_function) (id self, SEL sel, CAAnimation * p0, NSString * p1, GCHandle* exception_gchandle);
	-(void) addAnimation:(CAAnimation *)p0 forKey:(NSString *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_442_Microsoft_Maui_Platform_MauiCALayer_AddAnimation_function callback_442_Microsoft_Maui_Platform_MauiCALayer_AddAnimation;
		xamarin_registrar_dlsym ((void **) &callback_442_Microsoft_Maui_Platform_MauiCALayer_AddAnimation, "Microsoft.Maui", "callback_442_Microsoft_Maui_Platform_MauiCALayer_AddAnimation", 61);
		callback_442_Microsoft_Maui_Platform_MauiCALayer_AddAnimation (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_443_Microsoft_Maui_Platform_MauiCALayer_LayoutSublayers_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) layoutSublayers
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_443_Microsoft_Maui_Platform_MauiCALayer_LayoutSublayers_function callback_443_Microsoft_Maui_Platform_MauiCALayer_LayoutSublayers;
		xamarin_registrar_dlsym ((void **) &callback_443_Microsoft_Maui_Platform_MauiCALayer_LayoutSublayers, "Microsoft.Maui", "callback_443_Microsoft_Maui_Platform_MauiCALayer_LayoutSublayers", 62);
		callback_443_Microsoft_Maui_Platform_MauiCALayer_LayoutSublayers (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_444_Microsoft_Maui_Platform_MauiCALayer_DrawInContext_function) (id self, SEL sel, id p0, GCHandle* exception_gchandle);
	-(void) drawInContext:(id)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_444_Microsoft_Maui_Platform_MauiCALayer_DrawInContext_function callback_444_Microsoft_Maui_Platform_MauiCALayer_DrawInContext;
		xamarin_registrar_dlsym ((void **) &callback_444_Microsoft_Maui_Platform_MauiCALayer_DrawInContext, "Microsoft.Maui", "callback_444_Microsoft_Maui_Platform_MauiCALayer_DrawInContext", 63);
		callback_444_Microsoft_Maui_Platform_MauiCALayer_DrawInContext (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef id (*callback_441_Microsoft_Maui_Platform_MauiCALayer__ctor_function) (id self, SEL sel, bool* call_super, GCHandle* exception_gchandle);
	-(id) init
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_441_Microsoft_Maui_Platform_MauiCALayer__ctor_function callback_441_Microsoft_Maui_Platform_MauiCALayer__ctor;
		xamarin_registrar_dlsym ((void **) &callback_441_Microsoft_Maui_Platform_MauiCALayer__ctor, "Microsoft.Maui", "callback_441_Microsoft_Maui_Platform_MauiCALayer__ctor", 60);
		rv = callback_441_Microsoft_Maui_Platform_MauiCALayer__ctor (self, _cmd, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CALayer class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@implementation Microsoft_Maui_Platform_MauiCheckBox {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	typedef BOOL (*callback_446_Microsoft_Maui_Platform_MauiCheckBox_get_Enabled_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(BOOL) isEnabled
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		BOOL rv = { 0 };
		static callback_446_Microsoft_Maui_Platform_MauiCheckBox_get_Enabled_function callback_446_Microsoft_Maui_Platform_MauiCheckBox_get_Enabled;
		xamarin_registrar_dlsym ((void **) &callback_446_Microsoft_Maui_Platform_MauiCheckBox_get_Enabled, "Microsoft.Maui", "callback_446_Microsoft_Maui_Platform_MauiCheckBox_get_Enabled", 65);
		rv = callback_446_Microsoft_Maui_Platform_MauiCheckBox_get_Enabled (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef void (*callback_447_Microsoft_Maui_Platform_MauiCheckBox_set_Enabled_function) (id self, SEL sel, BOOL p0, GCHandle* exception_gchandle);
	-(void) setEnabled:(BOOL)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_447_Microsoft_Maui_Platform_MauiCheckBox_set_Enabled_function callback_447_Microsoft_Maui_Platform_MauiCheckBox_set_Enabled;
		xamarin_registrar_dlsym ((void **) &callback_447_Microsoft_Maui_Platform_MauiCheckBox_set_Enabled, "Microsoft.Maui", "callback_447_Microsoft_Maui_Platform_MauiCheckBox_set_Enabled", 66);
		callback_447_Microsoft_Maui_Platform_MauiCheckBox_set_Enabled (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef CGSize (*callback_448_Microsoft_Maui_Platform_MauiCheckBox_SizeThatFits_function) (id self, SEL sel, CGSize p0, GCHandle* exception_gchandle);
	-(CGSize) sizeThatFits:(CGSize)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		CGSize rv = { 0 };
		static callback_448_Microsoft_Maui_Platform_MauiCheckBox_SizeThatFits_function callback_448_Microsoft_Maui_Platform_MauiCheckBox_SizeThatFits;
		xamarin_registrar_dlsym ((void **) &callback_448_Microsoft_Maui_Platform_MauiCheckBox_SizeThatFits, "Microsoft.Maui", "callback_448_Microsoft_Maui_Platform_MauiCheckBox_SizeThatFits", 67);
		rv = callback_448_Microsoft_Maui_Platform_MauiCheckBox_SizeThatFits (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef void (*callback_449_Microsoft_Maui_Platform_MauiCheckBox_LayoutSubviews_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) layoutSubviews
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_449_Microsoft_Maui_Platform_MauiCheckBox_LayoutSubviews_function callback_449_Microsoft_Maui_Platform_MauiCheckBox_LayoutSubviews;
		xamarin_registrar_dlsym ((void **) &callback_449_Microsoft_Maui_Platform_MauiCheckBox_LayoutSubviews, "Microsoft.Maui", "callback_449_Microsoft_Maui_Platform_MauiCheckBox_LayoutSubviews", 68);
		callback_449_Microsoft_Maui_Platform_MauiCheckBox_LayoutSubviews (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef long long (*callback_450_Microsoft_Maui_Platform_MauiCheckBox_get_AccessibilityTraits_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(long long) accessibilityTraits
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		long long rv = { 0 };
		static callback_450_Microsoft_Maui_Platform_MauiCheckBox_get_AccessibilityTraits_function callback_450_Microsoft_Maui_Platform_MauiCheckBox_get_AccessibilityTraits;
		xamarin_registrar_dlsym ((void **) &callback_450_Microsoft_Maui_Platform_MauiCheckBox_get_AccessibilityTraits, "Microsoft.Maui", "callback_450_Microsoft_Maui_Platform_MauiCheckBox_get_AccessibilityTraits", 69);
		rv = callback_450_Microsoft_Maui_Platform_MauiCheckBox_get_AccessibilityTraits (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef void (*callback_451_Microsoft_Maui_Platform_MauiCheckBox_set_AccessibilityTraits_function) (id self, SEL sel, long long p0, GCHandle* exception_gchandle);
	-(void) setAccessibilityTraits:(long long)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_451_Microsoft_Maui_Platform_MauiCheckBox_set_AccessibilityTraits_function callback_451_Microsoft_Maui_Platform_MauiCheckBox_set_AccessibilityTraits;
		xamarin_registrar_dlsym ((void **) &callback_451_Microsoft_Maui_Platform_MauiCheckBox_set_AccessibilityTraits, "Microsoft.Maui", "callback_451_Microsoft_Maui_Platform_MauiCheckBox_set_AccessibilityTraits", 70);
		callback_451_Microsoft_Maui_Platform_MauiCheckBox_set_AccessibilityTraits (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef NSString * (*callback_452_Microsoft_Maui_Platform_MauiCheckBox_get_AccessibilityValue_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(NSString *) accessibilityValue
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		NSString * rv = { 0 };
		static callback_452_Microsoft_Maui_Platform_MauiCheckBox_get_AccessibilityValue_function callback_452_Microsoft_Maui_Platform_MauiCheckBox_get_AccessibilityValue;
		xamarin_registrar_dlsym ((void **) &callback_452_Microsoft_Maui_Platform_MauiCheckBox_get_AccessibilityValue, "Microsoft.Maui", "callback_452_Microsoft_Maui_Platform_MauiCheckBox_get_AccessibilityValue", 71);
		rv = callback_452_Microsoft_Maui_Platform_MauiCheckBox_get_AccessibilityValue (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef void (*callback_453_Microsoft_Maui_Platform_MauiCheckBox_set_AccessibilityValue_function) (id self, SEL sel, NSString * p0, GCHandle* exception_gchandle);
	-(void) setAccessibilityValue:(NSString *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_453_Microsoft_Maui_Platform_MauiCheckBox_set_AccessibilityValue_function callback_453_Microsoft_Maui_Platform_MauiCheckBox_set_AccessibilityValue;
		xamarin_registrar_dlsym ((void **) &callback_453_Microsoft_Maui_Platform_MauiCheckBox_set_AccessibilityValue, "Microsoft.Maui", "callback_453_Microsoft_Maui_Platform_MauiCheckBox_set_AccessibilityValue", 72);
		callback_453_Microsoft_Maui_Platform_MauiCheckBox_set_AccessibilityValue (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_454_Microsoft_Maui_Platform_MauiCheckBox_MovedToWindow_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) didMoveToWindow
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_454_Microsoft_Maui_Platform_MauiCheckBox_MovedToWindow_function callback_454_Microsoft_Maui_Platform_MauiCheckBox_MovedToWindow;
		xamarin_registrar_dlsym ((void **) &callback_454_Microsoft_Maui_Platform_MauiCheckBox_MovedToWindow, "Microsoft.Maui", "callback_454_Microsoft_Maui_Platform_MauiCheckBox_MovedToWindow", 73);
		callback_454_Microsoft_Maui_Platform_MauiCheckBox_MovedToWindow (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef id (*callback_445_Microsoft_Maui_Platform_MauiCheckBox__ctor_function) (id self, SEL sel, bool* call_super, GCHandle* exception_gchandle);
	-(id) init
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_445_Microsoft_Maui_Platform_MauiCheckBox__ctor_function callback_445_Microsoft_Maui_Platform_MauiCheckBox__ctor;
		xamarin_registrar_dlsym ((void **) &callback_445_Microsoft_Maui_Platform_MauiCheckBox__ctor, "Microsoft.Maui", "callback_445_Microsoft_Maui_Platform_MauiCheckBox__ctor", 64);
		rv = callback_445_Microsoft_Maui_Platform_MauiCheckBox__ctor (self, _cmd, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [UIButton class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@implementation Microsoft_Maui_Platform_NoCaretField {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	typedef CGRect (*callback_522_Microsoft_Maui_Platform_NoCaretField_GetCaretRectForPosition_function) (id self, SEL sel, UITextPosition * p0, GCHandle* exception_gchandle);
	-(CGRect) caretRectForPosition:(UITextPosition *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		CGRect rv = { 0 };
		static callback_522_Microsoft_Maui_Platform_NoCaretField_GetCaretRectForPosition_function callback_522_Microsoft_Maui_Platform_NoCaretField_GetCaretRectForPosition;
		xamarin_registrar_dlsym ((void **) &callback_522_Microsoft_Maui_Platform_NoCaretField_GetCaretRectForPosition, "Microsoft.Maui", "callback_522_Microsoft_Maui_Platform_NoCaretField_GetCaretRectForPosition", 141);
		rv = callback_522_Microsoft_Maui_Platform_NoCaretField_GetCaretRectForPosition (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef void (*callback_523_Microsoft_Maui_Platform_NoCaretField_MovedToWindow_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) didMoveToWindow
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_523_Microsoft_Maui_Platform_NoCaretField_MovedToWindow_function callback_523_Microsoft_Maui_Platform_NoCaretField_MovedToWindow;
		xamarin_registrar_dlsym ((void **) &callback_523_Microsoft_Maui_Platform_NoCaretField_MovedToWindow, "Microsoft.Maui", "callback_523_Microsoft_Maui_Platform_NoCaretField_MovedToWindow", 142);
		callback_523_Microsoft_Maui_Platform_NoCaretField_MovedToWindow (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef id (*callback_521_Microsoft_Maui_Platform_NoCaretField__ctor_function) (id self, SEL sel, bool* call_super, GCHandle* exception_gchandle);
	-(id) init
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_521_Microsoft_Maui_Platform_NoCaretField__ctor_function callback_521_Microsoft_Maui_Platform_NoCaretField__ctor;
		xamarin_registrar_dlsym ((void **) &callback_521_Microsoft_Maui_Platform_NoCaretField__ctor, "Microsoft.Maui", "callback_521_Microsoft_Maui_Platform_NoCaretField__ctor", 140);
		rv = callback_521_Microsoft_Maui_Platform_NoCaretField__ctor (self, _cmd, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [UITextField class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@implementation Microsoft_Maui_Platform_MauiDatePicker {
}

	typedef id (*callback_455_Microsoft_Maui_Platform_MauiDatePicker__ctor_function) (id self, SEL sel, bool* call_super, GCHandle* exception_gchandle);
	-(id) init
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_455_Microsoft_Maui_Platform_MauiDatePicker__ctor_function callback_455_Microsoft_Maui_Platform_MauiDatePicker__ctor;
		xamarin_registrar_dlsym ((void **) &callback_455_Microsoft_Maui_Platform_MauiDatePicker__ctor, "Microsoft.Maui", "callback_455_Microsoft_Maui_Platform_MauiDatePicker__ctor", 74);
		rv = callback_455_Microsoft_Maui_Platform_MauiDatePicker__ctor (self, _cmd, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [Microsoft_Maui_Platform_NoCaretField class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@implementation Microsoft_Maui_Platform_MauiImageView {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	typedef void (*callback_457_Microsoft_Maui_Platform_MauiImageView_MovedToWindow_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) didMoveToWindow
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_457_Microsoft_Maui_Platform_MauiImageView_MovedToWindow_function callback_457_Microsoft_Maui_Platform_MauiImageView_MovedToWindow;
		xamarin_registrar_dlsym ((void **) &callback_457_Microsoft_Maui_Platform_MauiImageView_MovedToWindow, "Microsoft.Maui", "callback_457_Microsoft_Maui_Platform_MauiImageView_MovedToWindow", 76);
		callback_457_Microsoft_Maui_Platform_MauiImageView_MovedToWindow (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef id (*callback_456_Microsoft_Maui_Platform_MauiImageView__ctor_function) (id self, SEL sel, bool* call_super, GCHandle* exception_gchandle);
	-(id) init
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_456_Microsoft_Maui_Platform_MauiImageView__ctor_function callback_456_Microsoft_Maui_Platform_MauiImageView__ctor;
		xamarin_registrar_dlsym ((void **) &callback_456_Microsoft_Maui_Platform_MauiImageView__ctor, "Microsoft.Maui", "callback_456_Microsoft_Maui_Platform_MauiImageView__ctor", 75);
		rv = callback_456_Microsoft_Maui_Platform_MauiImageView__ctor (self, _cmd, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [UIImageView class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@implementation Microsoft_Maui_Platform_MauiLabel {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	typedef void (*callback_459_Microsoft_Maui_Platform_MauiLabel_DrawText_function) (id self, SEL sel, CGRect p0, GCHandle* exception_gchandle);
	-(void) drawTextInRect:(CGRect)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_459_Microsoft_Maui_Platform_MauiLabel_DrawText_function callback_459_Microsoft_Maui_Platform_MauiLabel_DrawText;
		xamarin_registrar_dlsym ((void **) &callback_459_Microsoft_Maui_Platform_MauiLabel_DrawText, "Microsoft.Maui", "callback_459_Microsoft_Maui_Platform_MauiLabel_DrawText", 78);
		callback_459_Microsoft_Maui_Platform_MauiLabel_DrawText (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef CGSize (*callback_460_Microsoft_Maui_Platform_MauiLabel_SizeThatFits_function) (id self, SEL sel, CGSize p0, GCHandle* exception_gchandle);
	-(CGSize) sizeThatFits:(CGSize)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		CGSize rv = { 0 };
		static callback_460_Microsoft_Maui_Platform_MauiLabel_SizeThatFits_function callback_460_Microsoft_Maui_Platform_MauiLabel_SizeThatFits;
		xamarin_registrar_dlsym ((void **) &callback_460_Microsoft_Maui_Platform_MauiLabel_SizeThatFits, "Microsoft.Maui", "callback_460_Microsoft_Maui_Platform_MauiLabel_SizeThatFits", 79);
		rv = callback_460_Microsoft_Maui_Platform_MauiLabel_SizeThatFits (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef void (*callback_461_Microsoft_Maui_Platform_MauiLabel_MovedToWindow_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) didMoveToWindow
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_461_Microsoft_Maui_Platform_MauiLabel_MovedToWindow_function callback_461_Microsoft_Maui_Platform_MauiLabel_MovedToWindow;
		xamarin_registrar_dlsym ((void **) &callback_461_Microsoft_Maui_Platform_MauiLabel_MovedToWindow, "Microsoft.Maui", "callback_461_Microsoft_Maui_Platform_MauiLabel_MovedToWindow", 80);
		callback_461_Microsoft_Maui_Platform_MauiLabel_MovedToWindow (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef id (*callback_458_Microsoft_Maui_Platform_MauiLabel__ctor_function) (id self, SEL sel, bool* call_super, GCHandle* exception_gchandle);
	-(id) init
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_458_Microsoft_Maui_Platform_MauiLabel__ctor_function callback_458_Microsoft_Maui_Platform_MauiLabel__ctor;
		xamarin_registrar_dlsym ((void **) &callback_458_Microsoft_Maui_Platform_MauiLabel__ctor, "Microsoft.Maui", "callback_458_Microsoft_Maui_Platform_MauiLabel__ctor", 77);
		rv = callback_458_Microsoft_Maui_Platform_MauiLabel__ctor (self, _cmd, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [UILabel class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@implementation Microsoft_Maui_Platform_MauiPageControl {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	typedef void (*callback_463_Microsoft_Maui_Platform_MauiPageControl_LayoutSubviews_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) layoutSubviews
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_463_Microsoft_Maui_Platform_MauiPageControl_LayoutSubviews_function callback_463_Microsoft_Maui_Platform_MauiPageControl_LayoutSubviews;
		xamarin_registrar_dlsym ((void **) &callback_463_Microsoft_Maui_Platform_MauiPageControl_LayoutSubviews, "Microsoft.Maui", "callback_463_Microsoft_Maui_Platform_MauiPageControl_LayoutSubviews", 82);
		callback_463_Microsoft_Maui_Platform_MauiPageControl_LayoutSubviews (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_464_Microsoft_Maui_Platform_MauiPageControl_MovedToWindow_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) didMoveToWindow
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_464_Microsoft_Maui_Platform_MauiPageControl_MovedToWindow_function callback_464_Microsoft_Maui_Platform_MauiPageControl_MovedToWindow;
		xamarin_registrar_dlsym ((void **) &callback_464_Microsoft_Maui_Platform_MauiPageControl_MovedToWindow, "Microsoft.Maui", "callback_464_Microsoft_Maui_Platform_MauiPageControl_MovedToWindow", 83);
		callback_464_Microsoft_Maui_Platform_MauiPageControl_MovedToWindow (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef id (*callback_462_Microsoft_Maui_Platform_MauiPageControl__ctor_function) (id self, SEL sel, bool* call_super, GCHandle* exception_gchandle);
	-(id) init
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_462_Microsoft_Maui_Platform_MauiPageControl__ctor_function callback_462_Microsoft_Maui_Platform_MauiPageControl__ctor;
		xamarin_registrar_dlsym ((void **) &callback_462_Microsoft_Maui_Platform_MauiPageControl__ctor, "Microsoft.Maui", "callback_462_Microsoft_Maui_Platform_MauiPageControl__ctor", 81);
		rv = callback_462_Microsoft_Maui_Platform_MauiPageControl__ctor (self, _cmd, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [UIPageControl class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@implementation Microsoft_Maui_Platform_MauiPicker {
}

	typedef BOOL (*callback_465_Microsoft_Maui_Platform_MauiPicker_CanPerform_function) (id self, SEL sel, SEL p0, NSObject * p1, GCHandle* exception_gchandle);
	-(BOOL) canPerformAction:(SEL)p0 withSender:(NSObject *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		BOOL rv = { 0 };
		static callback_465_Microsoft_Maui_Platform_MauiPicker_CanPerform_function callback_465_Microsoft_Maui_Platform_MauiPicker_CanPerform;
		xamarin_registrar_dlsym ((void **) &callback_465_Microsoft_Maui_Platform_MauiPicker_CanPerform, "Microsoft.Maui", "callback_465_Microsoft_Maui_Platform_MauiPicker_CanPerform", 84);
		rv = callback_465_Microsoft_Maui_Platform_MauiPicker_CanPerform (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
@end

@implementation Microsoft_Maui_Platform_MauiRefreshView {
}

	typedef id (*callback_466_Microsoft_Maui_Platform_MauiRefreshView__ctor_function) (id self, SEL sel, bool* call_super, GCHandle* exception_gchandle);
	-(id) init
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_466_Microsoft_Maui_Platform_MauiRefreshView__ctor_function callback_466_Microsoft_Maui_Platform_MauiRefreshView__ctor;
		xamarin_registrar_dlsym ((void **) &callback_466_Microsoft_Maui_Platform_MauiRefreshView__ctor, "Microsoft.Maui", "callback_466_Microsoft_Maui_Platform_MauiRefreshView__ctor", 85);
		rv = callback_466_Microsoft_Maui_Platform_MauiRefreshView__ctor (self, _cmd, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [Microsoft_Maui_Platform_MauiView class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@implementation Microsoft_Maui_Platform_MauiScrollView {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	typedef void (*callback_468_Microsoft_Maui_Platform_MauiScrollView_ScrollRectToVisible_function) (id self, SEL sel, CGRect p0, BOOL p1, GCHandle* exception_gchandle);
	-(void) scrollRectToVisible:(CGRect)p0 animated:(BOOL)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_468_Microsoft_Maui_Platform_MauiScrollView_ScrollRectToVisible_function callback_468_Microsoft_Maui_Platform_MauiScrollView_ScrollRectToVisible;
		xamarin_registrar_dlsym ((void **) &callback_468_Microsoft_Maui_Platform_MauiScrollView_ScrollRectToVisible, "Microsoft.Maui", "callback_468_Microsoft_Maui_Platform_MauiScrollView_ScrollRectToVisible", 87);
		callback_468_Microsoft_Maui_Platform_MauiScrollView_ScrollRectToVisible (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_469_Microsoft_Maui_Platform_MauiScrollView_MovedToWindow_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) didMoveToWindow
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_469_Microsoft_Maui_Platform_MauiScrollView_MovedToWindow_function callback_469_Microsoft_Maui_Platform_MauiScrollView_MovedToWindow;
		xamarin_registrar_dlsym ((void **) &callback_469_Microsoft_Maui_Platform_MauiScrollView_MovedToWindow, "Microsoft.Maui", "callback_469_Microsoft_Maui_Platform_MauiScrollView_MovedToWindow", 88);
		callback_469_Microsoft_Maui_Platform_MauiScrollView_MovedToWindow (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef id (*callback_467_Microsoft_Maui_Platform_MauiScrollView__ctor_function) (id self, SEL sel, bool* call_super, GCHandle* exception_gchandle);
	-(id) init
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_467_Microsoft_Maui_Platform_MauiScrollView__ctor_function callback_467_Microsoft_Maui_Platform_MauiScrollView__ctor;
		xamarin_registrar_dlsym ((void **) &callback_467_Microsoft_Maui_Platform_MauiScrollView__ctor, "Microsoft.Maui", "callback_467_Microsoft_Maui_Platform_MauiScrollView__ctor", 86);
		rv = callback_467_Microsoft_Maui_Platform_MauiScrollView__ctor (self, _cmd, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [UIScrollView class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@implementation Microsoft_Maui_Platform_MauiSearchBar {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	typedef NSString * (*callback_471_Microsoft_Maui_Platform_MauiSearchBar_get_Text_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(NSString *) text
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		NSString * rv = { 0 };
		static callback_471_Microsoft_Maui_Platform_MauiSearchBar_get_Text_function callback_471_Microsoft_Maui_Platform_MauiSearchBar_get_Text;
		xamarin_registrar_dlsym ((void **) &callback_471_Microsoft_Maui_Platform_MauiSearchBar_get_Text, "Microsoft.Maui", "callback_471_Microsoft_Maui_Platform_MauiSearchBar_get_Text", 90);
		rv = callback_471_Microsoft_Maui_Platform_MauiSearchBar_get_Text (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef void (*callback_472_Microsoft_Maui_Platform_MauiSearchBar_set_Text_function) (id self, SEL sel, NSString * p0, GCHandle* exception_gchandle);
	-(void) setText:(NSString *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_472_Microsoft_Maui_Platform_MauiSearchBar_set_Text_function callback_472_Microsoft_Maui_Platform_MauiSearchBar_set_Text;
		xamarin_registrar_dlsym ((void **) &callback_472_Microsoft_Maui_Platform_MauiSearchBar_set_Text, "Microsoft.Maui", "callback_472_Microsoft_Maui_Platform_MauiSearchBar_set_Text", 91);
		callback_472_Microsoft_Maui_Platform_MauiSearchBar_set_Text (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_473_Microsoft_Maui_Platform_MauiSearchBar_WillMoveToWindow_function) (id self, SEL sel, UIWindow * p0, GCHandle* exception_gchandle);
	-(void) willMoveToWindow:(UIWindow *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_473_Microsoft_Maui_Platform_MauiSearchBar_WillMoveToWindow_function callback_473_Microsoft_Maui_Platform_MauiSearchBar_WillMoveToWindow;
		xamarin_registrar_dlsym ((void **) &callback_473_Microsoft_Maui_Platform_MauiSearchBar_WillMoveToWindow, "Microsoft.Maui", "callback_473_Microsoft_Maui_Platform_MauiSearchBar_WillMoveToWindow", 92);
		callback_473_Microsoft_Maui_Platform_MauiSearchBar_WillMoveToWindow (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_474_Microsoft_Maui_Platform_MauiSearchBar_MovedToWindow_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) didMoveToWindow
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_474_Microsoft_Maui_Platform_MauiSearchBar_MovedToWindow_function callback_474_Microsoft_Maui_Platform_MauiSearchBar_MovedToWindow;
		xamarin_registrar_dlsym ((void **) &callback_474_Microsoft_Maui_Platform_MauiSearchBar_MovedToWindow, "Microsoft.Maui", "callback_474_Microsoft_Maui_Platform_MauiSearchBar_MovedToWindow", 93);
		callback_474_Microsoft_Maui_Platform_MauiSearchBar_MovedToWindow (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef id (*callback_470_Microsoft_Maui_Platform_MauiSearchBar__ctor_function) (id self, SEL sel, bool* call_super, GCHandle* exception_gchandle);
	-(id) init
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_470_Microsoft_Maui_Platform_MauiSearchBar__ctor_function callback_470_Microsoft_Maui_Platform_MauiSearchBar__ctor;
		xamarin_registrar_dlsym ((void **) &callback_470_Microsoft_Maui_Platform_MauiSearchBar__ctor, "Microsoft.Maui", "callback_470_Microsoft_Maui_Platform_MauiSearchBar__ctor", 89);
		rv = callback_470_Microsoft_Maui_Platform_MauiSearchBar__ctor (self, _cmd, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [UISearchBar class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@implementation Microsoft_Maui_Platform_MauiShapeView {
}

	typedef void (*callback_476_Microsoft_Maui_Platform_MauiShapeView_MovedToWindow_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) didMoveToWindow
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_476_Microsoft_Maui_Platform_MauiShapeView_MovedToWindow_function callback_476_Microsoft_Maui_Platform_MauiShapeView_MovedToWindow;
		xamarin_registrar_dlsym ((void **) &callback_476_Microsoft_Maui_Platform_MauiShapeView_MovedToWindow, "Microsoft.Maui", "callback_476_Microsoft_Maui_Platform_MauiShapeView_MovedToWindow", 95);
		callback_476_Microsoft_Maui_Platform_MauiShapeView_MovedToWindow (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef id (*callback_475_Microsoft_Maui_Platform_MauiShapeView__ctor_function) (id self, SEL sel, bool* call_super, GCHandle* exception_gchandle);
	-(id) init
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_475_Microsoft_Maui_Platform_MauiShapeView__ctor_function callback_475_Microsoft_Maui_Platform_MauiShapeView__ctor;
		xamarin_registrar_dlsym ((void **) &callback_475_Microsoft_Maui_Platform_MauiShapeView__ctor, "Microsoft.Maui", "callback_475_Microsoft_Maui_Platform_MauiShapeView__ctor", 94);
		rv = callback_475_Microsoft_Maui_Platform_MauiShapeView__ctor (self, _cmd, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [PlatformGraphicsView class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@implementation Microsoft_Maui_Platform_MauiTextField {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	typedef void (*callback_483_Microsoft_Maui_Platform_MauiTextField_WillMoveToWindow_function) (id self, SEL sel, UIWindow * p0, GCHandle* exception_gchandle);
	-(void) willMoveToWindow:(UIWindow *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_483_Microsoft_Maui_Platform_MauiTextField_WillMoveToWindow_function callback_483_Microsoft_Maui_Platform_MauiTextField_WillMoveToWindow;
		xamarin_registrar_dlsym ((void **) &callback_483_Microsoft_Maui_Platform_MauiTextField_WillMoveToWindow, "Microsoft.Maui", "callback_483_Microsoft_Maui_Platform_MauiTextField_WillMoveToWindow", 102);
		callback_483_Microsoft_Maui_Platform_MauiTextField_WillMoveToWindow (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef NSString * (*callback_484_Microsoft_Maui_Platform_MauiTextField_get_Text_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(NSString *) text
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		NSString * rv = { 0 };
		static callback_484_Microsoft_Maui_Platform_MauiTextField_get_Text_function callback_484_Microsoft_Maui_Platform_MauiTextField_get_Text;
		xamarin_registrar_dlsym ((void **) &callback_484_Microsoft_Maui_Platform_MauiTextField_get_Text, "Microsoft.Maui", "callback_484_Microsoft_Maui_Platform_MauiTextField_get_Text", 103);
		rv = callback_484_Microsoft_Maui_Platform_MauiTextField_get_Text (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef void (*callback_485_Microsoft_Maui_Platform_MauiTextField_set_Text_function) (id self, SEL sel, NSString * p0, GCHandle* exception_gchandle);
	-(void) setText:(NSString *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_485_Microsoft_Maui_Platform_MauiTextField_set_Text_function callback_485_Microsoft_Maui_Platform_MauiTextField_set_Text;
		xamarin_registrar_dlsym ((void **) &callback_485_Microsoft_Maui_Platform_MauiTextField_set_Text, "Microsoft.Maui", "callback_485_Microsoft_Maui_Platform_MauiTextField_set_Text", 104);
		callback_485_Microsoft_Maui_Platform_MauiTextField_set_Text (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef NSAttributedString * (*callback_486_Microsoft_Maui_Platform_MauiTextField_get_AttributedText_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(NSAttributedString *) attributedText
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		NSAttributedString * rv = { 0 };
		static callback_486_Microsoft_Maui_Platform_MauiTextField_get_AttributedText_function callback_486_Microsoft_Maui_Platform_MauiTextField_get_AttributedText;
		xamarin_registrar_dlsym ((void **) &callback_486_Microsoft_Maui_Platform_MauiTextField_get_AttributedText, "Microsoft.Maui", "callback_486_Microsoft_Maui_Platform_MauiTextField_get_AttributedText", 105);
		rv = callback_486_Microsoft_Maui_Platform_MauiTextField_get_AttributedText (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef void (*callback_487_Microsoft_Maui_Platform_MauiTextField_set_AttributedText_function) (id self, SEL sel, NSAttributedString * p0, GCHandle* exception_gchandle);
	-(void) setAttributedText:(NSAttributedString *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_487_Microsoft_Maui_Platform_MauiTextField_set_AttributedText_function callback_487_Microsoft_Maui_Platform_MauiTextField_set_AttributedText;
		xamarin_registrar_dlsym ((void **) &callback_487_Microsoft_Maui_Platform_MauiTextField_set_AttributedText, "Microsoft.Maui", "callback_487_Microsoft_Maui_Platform_MauiTextField_set_AttributedText", 106);
		callback_487_Microsoft_Maui_Platform_MauiTextField_set_AttributedText (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef UITextRange * (*callback_488_Microsoft_Maui_Platform_MauiTextField_get_SelectedTextRange_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(UITextRange *) selectedTextRange
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		UITextRange * rv = { 0 };
		static callback_488_Microsoft_Maui_Platform_MauiTextField_get_SelectedTextRange_function callback_488_Microsoft_Maui_Platform_MauiTextField_get_SelectedTextRange;
		xamarin_registrar_dlsym ((void **) &callback_488_Microsoft_Maui_Platform_MauiTextField_get_SelectedTextRange, "Microsoft.Maui", "callback_488_Microsoft_Maui_Platform_MauiTextField_get_SelectedTextRange", 107);
		rv = callback_488_Microsoft_Maui_Platform_MauiTextField_get_SelectedTextRange (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef void (*callback_489_Microsoft_Maui_Platform_MauiTextField_set_SelectedTextRange_function) (id self, SEL sel, UITextRange * p0, GCHandle* exception_gchandle);
	-(void) setSelectedTextRange:(UITextRange *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_489_Microsoft_Maui_Platform_MauiTextField_set_SelectedTextRange_function callback_489_Microsoft_Maui_Platform_MauiTextField_set_SelectedTextRange;
		xamarin_registrar_dlsym ((void **) &callback_489_Microsoft_Maui_Platform_MauiTextField_set_SelectedTextRange, "Microsoft.Maui", "callback_489_Microsoft_Maui_Platform_MauiTextField_set_SelectedTextRange", 108);
		callback_489_Microsoft_Maui_Platform_MauiTextField_set_SelectedTextRange (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_490_Microsoft_Maui_Platform_MauiTextField_MovedToWindow_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) didMoveToWindow
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_490_Microsoft_Maui_Platform_MauiTextField_MovedToWindow_function callback_490_Microsoft_Maui_Platform_MauiTextField_MovedToWindow;
		xamarin_registrar_dlsym ((void **) &callback_490_Microsoft_Maui_Platform_MauiTextField_MovedToWindow, "Microsoft.Maui", "callback_490_Microsoft_Maui_Platform_MauiTextField_MovedToWindow", 109);
		callback_490_Microsoft_Maui_Platform_MauiTextField_MovedToWindow (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef id (*callback_482_Microsoft_Maui_Platform_MauiTextField__ctor_function) (id self, SEL sel, bool* call_super, GCHandle* exception_gchandle);
	-(id) init
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_482_Microsoft_Maui_Platform_MauiTextField__ctor_function callback_482_Microsoft_Maui_Platform_MauiTextField__ctor;
		xamarin_registrar_dlsym ((void **) &callback_482_Microsoft_Maui_Platform_MauiTextField__ctor, "Microsoft.Maui", "callback_482_Microsoft_Maui_Platform_MauiTextField__ctor", 101);
		rv = callback_482_Microsoft_Maui_Platform_MauiTextField__ctor (self, _cmd, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [UITextField class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@implementation Microsoft_Maui_Platform_MauiTextView {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	typedef void (*callback_492_Microsoft_Maui_Platform_MauiTextView_WillMoveToWindow_function) (id self, SEL sel, UIWindow * p0, GCHandle* exception_gchandle);
	-(void) willMoveToWindow:(UIWindow *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_492_Microsoft_Maui_Platform_MauiTextView_WillMoveToWindow_function callback_492_Microsoft_Maui_Platform_MauiTextView_WillMoveToWindow;
		xamarin_registrar_dlsym ((void **) &callback_492_Microsoft_Maui_Platform_MauiTextView_WillMoveToWindow, "Microsoft.Maui", "callback_492_Microsoft_Maui_Platform_MauiTextView_WillMoveToWindow", 111);
		callback_492_Microsoft_Maui_Platform_MauiTextView_WillMoveToWindow (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef NSString * (*callback_493_Microsoft_Maui_Platform_MauiTextView_get_Text_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(NSString *) text
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		NSString * rv = { 0 };
		static callback_493_Microsoft_Maui_Platform_MauiTextView_get_Text_function callback_493_Microsoft_Maui_Platform_MauiTextView_get_Text;
		xamarin_registrar_dlsym ((void **) &callback_493_Microsoft_Maui_Platform_MauiTextView_get_Text, "Microsoft.Maui", "callback_493_Microsoft_Maui_Platform_MauiTextView_get_Text", 112);
		rv = callback_493_Microsoft_Maui_Platform_MauiTextView_get_Text (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef void (*callback_494_Microsoft_Maui_Platform_MauiTextView_set_Text_function) (id self, SEL sel, NSString * p0, GCHandle* exception_gchandle);
	-(void) setText:(NSString *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_494_Microsoft_Maui_Platform_MauiTextView_set_Text_function callback_494_Microsoft_Maui_Platform_MauiTextView_set_Text;
		xamarin_registrar_dlsym ((void **) &callback_494_Microsoft_Maui_Platform_MauiTextView_set_Text, "Microsoft.Maui", "callback_494_Microsoft_Maui_Platform_MauiTextView_set_Text", 113);
		callback_494_Microsoft_Maui_Platform_MauiTextView_set_Text (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef UIFont * (*callback_495_Microsoft_Maui_Platform_MauiTextView_get_Font_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(UIFont *) font
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		UIFont * rv = { 0 };
		static callback_495_Microsoft_Maui_Platform_MauiTextView_get_Font_function callback_495_Microsoft_Maui_Platform_MauiTextView_get_Font;
		xamarin_registrar_dlsym ((void **) &callback_495_Microsoft_Maui_Platform_MauiTextView_get_Font, "Microsoft.Maui", "callback_495_Microsoft_Maui_Platform_MauiTextView_get_Font", 114);
		rv = callback_495_Microsoft_Maui_Platform_MauiTextView_get_Font (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef void (*callback_496_Microsoft_Maui_Platform_MauiTextView_set_Font_function) (id self, SEL sel, UIFont * p0, GCHandle* exception_gchandle);
	-(void) setFont:(UIFont *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_496_Microsoft_Maui_Platform_MauiTextView_set_Font_function callback_496_Microsoft_Maui_Platform_MauiTextView_set_Font;
		xamarin_registrar_dlsym ((void **) &callback_496_Microsoft_Maui_Platform_MauiTextView_set_Font, "Microsoft.Maui", "callback_496_Microsoft_Maui_Platform_MauiTextView_set_Font", 115);
		callback_496_Microsoft_Maui_Platform_MauiTextView_set_Font (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef NSAttributedString * (*callback_497_Microsoft_Maui_Platform_MauiTextView_get_AttributedText_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(NSAttributedString *) attributedText
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		NSAttributedString * rv = { 0 };
		static callback_497_Microsoft_Maui_Platform_MauiTextView_get_AttributedText_function callback_497_Microsoft_Maui_Platform_MauiTextView_get_AttributedText;
		xamarin_registrar_dlsym ((void **) &callback_497_Microsoft_Maui_Platform_MauiTextView_get_AttributedText, "Microsoft.Maui", "callback_497_Microsoft_Maui_Platform_MauiTextView_get_AttributedText", 116);
		rv = callback_497_Microsoft_Maui_Platform_MauiTextView_get_AttributedText (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef void (*callback_498_Microsoft_Maui_Platform_MauiTextView_set_AttributedText_function) (id self, SEL sel, NSAttributedString * p0, GCHandle* exception_gchandle);
	-(void) setAttributedText:(NSAttributedString *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_498_Microsoft_Maui_Platform_MauiTextView_set_AttributedText_function callback_498_Microsoft_Maui_Platform_MauiTextView_set_AttributedText;
		xamarin_registrar_dlsym ((void **) &callback_498_Microsoft_Maui_Platform_MauiTextView_set_AttributedText, "Microsoft.Maui", "callback_498_Microsoft_Maui_Platform_MauiTextView_set_AttributedText", 117);
		callback_498_Microsoft_Maui_Platform_MauiTextView_set_AttributedText (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_499_Microsoft_Maui_Platform_MauiTextView_LayoutSubviews_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) layoutSubviews
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_499_Microsoft_Maui_Platform_MauiTextView_LayoutSubviews_function callback_499_Microsoft_Maui_Platform_MauiTextView_LayoutSubviews;
		xamarin_registrar_dlsym ((void **) &callback_499_Microsoft_Maui_Platform_MauiTextView_LayoutSubviews, "Microsoft.Maui", "callback_499_Microsoft_Maui_Platform_MauiTextView_LayoutSubviews", 118);
		callback_499_Microsoft_Maui_Platform_MauiTextView_LayoutSubviews (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_500_Microsoft_Maui_Platform_MauiTextView_MovedToWindow_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) didMoveToWindow
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_500_Microsoft_Maui_Platform_MauiTextView_MovedToWindow_function callback_500_Microsoft_Maui_Platform_MauiTextView_MovedToWindow;
		xamarin_registrar_dlsym ((void **) &callback_500_Microsoft_Maui_Platform_MauiTextView_MovedToWindow, "Microsoft.Maui", "callback_500_Microsoft_Maui_Platform_MauiTextView_MovedToWindow", 119);
		callback_500_Microsoft_Maui_Platform_MauiTextView_MovedToWindow (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef id (*callback_491_Microsoft_Maui_Platform_MauiTextView__ctor_function) (id self, SEL sel, bool* call_super, GCHandle* exception_gchandle);
	-(id) init
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_491_Microsoft_Maui_Platform_MauiTextView__ctor_function callback_491_Microsoft_Maui_Platform_MauiTextView__ctor;
		xamarin_registrar_dlsym ((void **) &callback_491_Microsoft_Maui_Platform_MauiTextView__ctor, "Microsoft.Maui", "callback_491_Microsoft_Maui_Platform_MauiTextView__ctor", 110);
		rv = callback_491_Microsoft_Maui_Platform_MauiTextView__ctor (self, _cmd, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [UITextView class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@implementation Microsoft_Maui_Platform_MauiTimePicker {
}

	typedef id (*callback_501_Microsoft_Maui_Platform_MauiTimePicker__ctor_function) (id self, SEL sel, bool* call_super, GCHandle* exception_gchandle);
	-(id) init
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_501_Microsoft_Maui_Platform_MauiTimePicker__ctor_function callback_501_Microsoft_Maui_Platform_MauiTimePicker__ctor;
		xamarin_registrar_dlsym ((void **) &callback_501_Microsoft_Maui_Platform_MauiTimePicker__ctor, "Microsoft.Maui", "callback_501_Microsoft_Maui_Platform_MauiTimePicker__ctor", 120);
		rv = callback_501_Microsoft_Maui_Platform_MauiTimePicker__ctor (self, _cmd, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [Microsoft_Maui_Platform_NoCaretField class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@implementation Microsoft_Maui_Platform_MauiWebViewNavigationDelegate {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	typedef void (*callback_510_Microsoft_Maui_Platform_MauiWebViewNavigationDelegate_DidFinishNavigation_function) (id self, SEL sel, WKWebView * p0, WKNavigation * p1, GCHandle* exception_gchandle);
	-(void) webView:(WKWebView *)p0 didFinishNavigation:(WKNavigation *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_510_Microsoft_Maui_Platform_MauiWebViewNavigationDelegate_DidFinishNavigation_function callback_510_Microsoft_Maui_Platform_MauiWebViewNavigationDelegate_DidFinishNavigation;
		xamarin_registrar_dlsym ((void **) &callback_510_Microsoft_Maui_Platform_MauiWebViewNavigationDelegate_DidFinishNavigation, "Microsoft.Maui", "callback_510_Microsoft_Maui_Platform_MauiWebViewNavigationDelegate_DidFinishNavigation", 129);
		callback_510_Microsoft_Maui_Platform_MauiWebViewNavigationDelegate_DidFinishNavigation (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_511_Microsoft_Maui_Platform_MauiWebViewNavigationDelegate_DidFailNavigation_function) (id self, SEL sel, WKWebView * p0, WKNavigation * p1, NSError * p2, GCHandle* exception_gchandle);
	-(void) webView:(WKWebView *)p0 didFailNavigation:(WKNavigation *)p1 withError:(NSError *)p2
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_511_Microsoft_Maui_Platform_MauiWebViewNavigationDelegate_DidFailNavigation_function callback_511_Microsoft_Maui_Platform_MauiWebViewNavigationDelegate_DidFailNavigation;
		xamarin_registrar_dlsym ((void **) &callback_511_Microsoft_Maui_Platform_MauiWebViewNavigationDelegate_DidFailNavigation, "Microsoft.Maui", "callback_511_Microsoft_Maui_Platform_MauiWebViewNavigationDelegate_DidFailNavigation", 130);
		callback_511_Microsoft_Maui_Platform_MauiWebViewNavigationDelegate_DidFailNavigation (self, _cmd, p0, p1, p2, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_512_Microsoft_Maui_Platform_MauiWebViewNavigationDelegate_DidFailProvisionalNavigation_function) (id self, SEL sel, WKWebView * p0, WKNavigation * p1, NSError * p2, GCHandle* exception_gchandle);
	-(void) webView:(WKWebView *)p0 didFailProvisionalNavigation:(WKNavigation *)p1 withError:(NSError *)p2
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_512_Microsoft_Maui_Platform_MauiWebViewNavigationDelegate_DidFailProvisionalNavigation_function callback_512_Microsoft_Maui_Platform_MauiWebViewNavigationDelegate_DidFailProvisionalNavigation;
		xamarin_registrar_dlsym ((void **) &callback_512_Microsoft_Maui_Platform_MauiWebViewNavigationDelegate_DidFailProvisionalNavigation, "Microsoft.Maui", "callback_512_Microsoft_Maui_Platform_MauiWebViewNavigationDelegate_DidFailProvisionalNavigation", 131);
		callback_512_Microsoft_Maui_Platform_MauiWebViewNavigationDelegate_DidFailProvisionalNavigation (self, _cmd, p0, p1, p2, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_513_Microsoft_Maui_Platform_MauiWebViewNavigationDelegate_DecidePolicy_function) (id self, SEL sel, WKWebView * p0, WKNavigationAction * p1, void (^p2)(void *), GCHandle* exception_gchandle);
	-(void) webView:(WKWebView *)p0 decidePolicyForNavigationAction:(WKNavigationAction *)p1 decisionHandler:(void (^)(void *))p2
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_513_Microsoft_Maui_Platform_MauiWebViewNavigationDelegate_DecidePolicy_function callback_513_Microsoft_Maui_Platform_MauiWebViewNavigationDelegate_DecidePolicy;
		xamarin_registrar_dlsym ((void **) &callback_513_Microsoft_Maui_Platform_MauiWebViewNavigationDelegate_DecidePolicy, "Microsoft.Maui", "callback_513_Microsoft_Maui_Platform_MauiWebViewNavigationDelegate_DecidePolicy", 132);
		callback_513_Microsoft_Maui_Platform_MauiWebViewNavigationDelegate_DecidePolicy (self, _cmd, p0, p1, p2, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
@end

@implementation Microsoft_Maui_Platform_PageViewController {
}

	typedef BOOL (*callback_524_Microsoft_Maui_Platform_PageViewController_get_PrefersHomeIndicatorAutoHidden_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(BOOL) prefersHomeIndicatorAutoHidden
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		BOOL rv = { 0 };
		static callback_524_Microsoft_Maui_Platform_PageViewController_get_PrefersHomeIndicatorAutoHidden_function callback_524_Microsoft_Maui_Platform_PageViewController_get_PrefersHomeIndicatorAutoHidden;
		xamarin_registrar_dlsym ((void **) &callback_524_Microsoft_Maui_Platform_PageViewController_get_PrefersHomeIndicatorAutoHidden, "Microsoft.Maui", "callback_524_Microsoft_Maui_Platform_PageViewController_get_PrefersHomeIndicatorAutoHidden", 143);
		rv = callback_524_Microsoft_Maui_Platform_PageViewController_get_PrefersHomeIndicatorAutoHidden (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef BOOL (*callback_525_Microsoft_Maui_Platform_PageViewController_PrefersStatusBarHidden_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(BOOL) prefersStatusBarHidden
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		BOOL rv = { 0 };
		static callback_525_Microsoft_Maui_Platform_PageViewController_PrefersStatusBarHidden_function callback_525_Microsoft_Maui_Platform_PageViewController_PrefersStatusBarHidden;
		xamarin_registrar_dlsym ((void **) &callback_525_Microsoft_Maui_Platform_PageViewController_PrefersStatusBarHidden, "Microsoft.Maui", "callback_525_Microsoft_Maui_Platform_PageViewController_PrefersStatusBarHidden", 144);
		rv = callback_525_Microsoft_Maui_Platform_PageViewController_PrefersStatusBarHidden (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef NSInteger (*callback_526_Microsoft_Maui_Platform_PageViewController_get_PreferredStatusBarUpdateAnimation_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(NSInteger) preferredStatusBarUpdateAnimation
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		NSInteger rv = { 0 };
		static callback_526_Microsoft_Maui_Platform_PageViewController_get_PreferredStatusBarUpdateAnimation_function callback_526_Microsoft_Maui_Platform_PageViewController_get_PreferredStatusBarUpdateAnimation;
		xamarin_registrar_dlsym ((void **) &callback_526_Microsoft_Maui_Platform_PageViewController_get_PreferredStatusBarUpdateAnimation, "Microsoft.Maui", "callback_526_Microsoft_Maui_Platform_PageViewController_get_PreferredStatusBarUpdateAnimation", 145);
		rv = callback_526_Microsoft_Maui_Platform_PageViewController_get_PreferredStatusBarUpdateAnimation (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef void (*callback_527_Microsoft_Maui_Platform_PageViewController_TraitCollectionDidChange_function) (id self, SEL sel, UITraitCollection * p0, GCHandle* exception_gchandle);
	-(void) traitCollectionDidChange:(UITraitCollection *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_527_Microsoft_Maui_Platform_PageViewController_TraitCollectionDidChange_function callback_527_Microsoft_Maui_Platform_PageViewController_TraitCollectionDidChange;
		xamarin_registrar_dlsym ((void **) &callback_527_Microsoft_Maui_Platform_PageViewController_TraitCollectionDidChange, "Microsoft.Maui", "callback_527_Microsoft_Maui_Platform_PageViewController_TraitCollectionDidChange", 146);
		callback_527_Microsoft_Maui_Platform_PageViewController_TraitCollectionDidChange (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}
@end

@interface Microsoft_Maui_Platform_SemanticSwitchContentView : Microsoft_Maui_Platform_ContentView {
}
	-(long long) accessibilityTraits;
	-(void) setAccessibilityTraits:(long long)p0;
@end

@implementation Microsoft_Maui_Platform_SemanticSwitchContentView {
}

	typedef long long (*callback_534_Microsoft_Maui_Platform_SemanticSwitchContentView_get_AccessibilityTraits_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(long long) accessibilityTraits
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		long long rv = { 0 };
		static callback_534_Microsoft_Maui_Platform_SemanticSwitchContentView_get_AccessibilityTraits_function callback_534_Microsoft_Maui_Platform_SemanticSwitchContentView_get_AccessibilityTraits;
		xamarin_registrar_dlsym ((void **) &callback_534_Microsoft_Maui_Platform_SemanticSwitchContentView_get_AccessibilityTraits, "Microsoft.Maui", "callback_534_Microsoft_Maui_Platform_SemanticSwitchContentView_get_AccessibilityTraits", 153);
		rv = callback_534_Microsoft_Maui_Platform_SemanticSwitchContentView_get_AccessibilityTraits (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef void (*callback_535_Microsoft_Maui_Platform_SemanticSwitchContentView_set_AccessibilityTraits_function) (id self, SEL sel, long long p0, GCHandle* exception_gchandle);
	-(void) setAccessibilityTraits:(long long)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_535_Microsoft_Maui_Platform_SemanticSwitchContentView_set_AccessibilityTraits_function callback_535_Microsoft_Maui_Platform_SemanticSwitchContentView_set_AccessibilityTraits;
		xamarin_registrar_dlsym ((void **) &callback_535_Microsoft_Maui_Platform_SemanticSwitchContentView_set_AccessibilityTraits, "Microsoft.Maui", "callback_535_Microsoft_Maui_Platform_SemanticSwitchContentView_set_AccessibilityTraits", 154);
		callback_535_Microsoft_Maui_Platform_SemanticSwitchContentView_set_AccessibilityTraits (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}
@end

@interface Microsoft_Maui_Platform_StaticCAGradientLayer : CAGradientLayer {
}
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(void) addAnimation:(CAAnimation *)p0 forKey:(NSString *)p1;
	-(BOOL) conformsToProtocol:(void *)p0;
	-(id) init;
@end

@implementation Microsoft_Maui_Platform_StaticCAGradientLayer {
	XamarinObject __monoObjectGCHandle;
}
	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	typedef void (*callback_536_Microsoft_Maui_Platform_StaticCAGradientLayer_AddAnimation_function) (id self, SEL sel, CAAnimation * p0, NSString * p1, GCHandle* exception_gchandle);
	-(void) addAnimation:(CAAnimation *)p0 forKey:(NSString *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_536_Microsoft_Maui_Platform_StaticCAGradientLayer_AddAnimation_function callback_536_Microsoft_Maui_Platform_StaticCAGradientLayer_AddAnimation;
		xamarin_registrar_dlsym ((void **) &callback_536_Microsoft_Maui_Platform_StaticCAGradientLayer_AddAnimation, "Microsoft.Maui", "callback_536_Microsoft_Maui_Platform_StaticCAGradientLayer_AddAnimation", 155);
		callback_536_Microsoft_Maui_Platform_StaticCAGradientLayer_AddAnimation (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef id (*callback_537_Microsoft_Maui_Platform_StaticCAGradientLayer__ctor_function) (id self, SEL sel, bool* call_super, GCHandle* exception_gchandle);
	-(id) init
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_537_Microsoft_Maui_Platform_StaticCAGradientLayer__ctor_function callback_537_Microsoft_Maui_Platform_StaticCAGradientLayer__ctor;
		xamarin_registrar_dlsym ((void **) &callback_537_Microsoft_Maui_Platform_StaticCAGradientLayer__ctor, "Microsoft.Maui", "callback_537_Microsoft_Maui_Platform_StaticCAGradientLayer__ctor", 156);
		rv = callback_537_Microsoft_Maui_Platform_StaticCAGradientLayer__ctor (self, _cmd, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CAGradientLayer class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@interface Microsoft_Maui_Platform_StaticCALayer : CALayer {
}
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(void) addAnimation:(CAAnimation *)p0 forKey:(NSString *)p1;
	-(BOOL) conformsToProtocol:(void *)p0;
	-(id) init;
@end

@implementation Microsoft_Maui_Platform_StaticCALayer {
	XamarinObject __monoObjectGCHandle;
}
	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	typedef void (*callback_538_Microsoft_Maui_Platform_StaticCALayer_AddAnimation_function) (id self, SEL sel, CAAnimation * p0, NSString * p1, GCHandle* exception_gchandle);
	-(void) addAnimation:(CAAnimation *)p0 forKey:(NSString *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_538_Microsoft_Maui_Platform_StaticCALayer_AddAnimation_function callback_538_Microsoft_Maui_Platform_StaticCALayer_AddAnimation;
		xamarin_registrar_dlsym ((void **) &callback_538_Microsoft_Maui_Platform_StaticCALayer_AddAnimation, "Microsoft.Maui", "callback_538_Microsoft_Maui_Platform_StaticCALayer_AddAnimation", 157);
		callback_538_Microsoft_Maui_Platform_StaticCALayer_AddAnimation (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef id (*callback_539_Microsoft_Maui_Platform_StaticCALayer__ctor_function) (id self, SEL sel, bool* call_super, GCHandle* exception_gchandle);
	-(id) init
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_539_Microsoft_Maui_Platform_StaticCALayer__ctor_function callback_539_Microsoft_Maui_Platform_StaticCALayer__ctor;
		xamarin_registrar_dlsym ((void **) &callback_539_Microsoft_Maui_Platform_StaticCALayer__ctor, "Microsoft.Maui", "callback_539_Microsoft_Maui_Platform_StaticCALayer__ctor", 158);
		rv = callback_539_Microsoft_Maui_Platform_StaticCALayer__ctor (self, _cmd, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CALayer class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@interface Microsoft_Maui_Platform_StaticCAShapeLayer : CAShapeLayer {
}
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(void) addAnimation:(CAAnimation *)p0 forKey:(NSString *)p1;
	-(BOOL) conformsToProtocol:(void *)p0;
	-(id) init;
@end

@implementation Microsoft_Maui_Platform_StaticCAShapeLayer {
	XamarinObject __monoObjectGCHandle;
}
	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	typedef void (*callback_540_Microsoft_Maui_Platform_StaticCAShapeLayer_AddAnimation_function) (id self, SEL sel, CAAnimation * p0, NSString * p1, GCHandle* exception_gchandle);
	-(void) addAnimation:(CAAnimation *)p0 forKey:(NSString *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_540_Microsoft_Maui_Platform_StaticCAShapeLayer_AddAnimation_function callback_540_Microsoft_Maui_Platform_StaticCAShapeLayer_AddAnimation;
		xamarin_registrar_dlsym ((void **) &callback_540_Microsoft_Maui_Platform_StaticCAShapeLayer_AddAnimation, "Microsoft.Maui", "callback_540_Microsoft_Maui_Platform_StaticCAShapeLayer_AddAnimation", 159);
		callback_540_Microsoft_Maui_Platform_StaticCAShapeLayer_AddAnimation (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef id (*callback_541_Microsoft_Maui_Platform_StaticCAShapeLayer__ctor_function) (id self, SEL sel, bool* call_super, GCHandle* exception_gchandle);
	-(id) init
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_541_Microsoft_Maui_Platform_StaticCAShapeLayer__ctor_function callback_541_Microsoft_Maui_Platform_StaticCAShapeLayer__ctor;
		xamarin_registrar_dlsym ((void **) &callback_541_Microsoft_Maui_Platform_StaticCAShapeLayer__ctor, "Microsoft.Maui", "callback_541_Microsoft_Maui_Platform_StaticCAShapeLayer__ctor", 160);
		rv = callback_541_Microsoft_Maui_Platform_StaticCAShapeLayer__ctor (self, _cmd, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CAShapeLayer class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@implementation Microsoft_Maui_Platform_WrapperView {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	typedef void (*callback_543_Microsoft_Maui_Platform_WrapperView_LayoutSubviews_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) layoutSubviews
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_543_Microsoft_Maui_Platform_WrapperView_LayoutSubviews_function callback_543_Microsoft_Maui_Platform_WrapperView_LayoutSubviews;
		xamarin_registrar_dlsym ((void **) &callback_543_Microsoft_Maui_Platform_WrapperView_LayoutSubviews, "Microsoft.Maui", "callback_543_Microsoft_Maui_Platform_WrapperView_LayoutSubviews", 162);
		callback_543_Microsoft_Maui_Platform_WrapperView_LayoutSubviews (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef CGSize (*callback_544_Microsoft_Maui_Platform_WrapperView_SizeThatFits_function) (id self, SEL sel, CGSize p0, GCHandle* exception_gchandle);
	-(CGSize) sizeThatFits:(CGSize)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		CGSize rv = { 0 };
		static callback_544_Microsoft_Maui_Platform_WrapperView_SizeThatFits_function callback_544_Microsoft_Maui_Platform_WrapperView_SizeThatFits;
		xamarin_registrar_dlsym ((void **) &callback_544_Microsoft_Maui_Platform_WrapperView_SizeThatFits, "Microsoft.Maui", "callback_544_Microsoft_Maui_Platform_WrapperView_SizeThatFits", 163);
		rv = callback_544_Microsoft_Maui_Platform_WrapperView_SizeThatFits (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef void (*callback_545_Microsoft_Maui_Platform_WrapperView_SetNeedsLayout_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) setNeedsLayout
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_545_Microsoft_Maui_Platform_WrapperView_SetNeedsLayout_function callback_545_Microsoft_Maui_Platform_WrapperView_SetNeedsLayout;
		xamarin_registrar_dlsym ((void **) &callback_545_Microsoft_Maui_Platform_WrapperView_SetNeedsLayout, "Microsoft.Maui", "callback_545_Microsoft_Maui_Platform_WrapperView_SetNeedsLayout", 164);
		callback_545_Microsoft_Maui_Platform_WrapperView_SetNeedsLayout (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_546_Microsoft_Maui_Platform_WrapperView_MovedToWindow_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) didMoveToWindow
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_546_Microsoft_Maui_Platform_WrapperView_MovedToWindow_function callback_546_Microsoft_Maui_Platform_WrapperView_MovedToWindow;
		xamarin_registrar_dlsym ((void **) &callback_546_Microsoft_Maui_Platform_WrapperView_MovedToWindow, "Microsoft.Maui", "callback_546_Microsoft_Maui_Platform_WrapperView_MovedToWindow", 165);
		callback_546_Microsoft_Maui_Platform_WrapperView_MovedToWindow (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef id (*callback_542_Microsoft_Maui_Platform_WrapperView__ctor_function) (id self, SEL sel, bool* call_super, GCHandle* exception_gchandle);
	-(id) init
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_542_Microsoft_Maui_Platform_WrapperView__ctor_function callback_542_Microsoft_Maui_Platform_WrapperView__ctor;
		xamarin_registrar_dlsym ((void **) &callback_542_Microsoft_Maui_Platform_WrapperView__ctor, "Microsoft.Maui", "callback_542_Microsoft_Maui_Platform_WrapperView__ctor", 161);
		rv = callback_542_Microsoft_Maui_Platform_WrapperView__ctor (self, _cmd, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [UIView class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_MacCatalyst__UIKit_UIPickerViewModel {
}

	typedef id (*callback_3439_UIKit_UIPickerViewModel__ctor_function) (id self, SEL sel, bool* call_super, GCHandle* exception_gchandle);
	-(id) init
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_3439_UIKit_UIPickerViewModel__ctor_function callback_3439_UIKit_UIPickerViewModel__ctor;
		xamarin_registrar_dlsym ((void **) &callback_3439_UIKit_UIPickerViewModel__ctor, "Microsoft.MacCatalyst", "callback_3439_UIKit_UIPickerViewModel__ctor", 110);
		rv = callback_3439_UIKit_UIPickerViewModel__ctor (self, _cmd, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

@implementation Microsoft_Maui_Handlers_PickerSource {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	typedef void * (*callback_550_Microsoft_Maui_Handlers_PickerSource_GetComponentCount_function) (id self, SEL sel, UIPickerView * p0, GCHandle* exception_gchandle);
	-(void *) numberOfComponentsInPickerView:(UIPickerView *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		void * rv = { 0 };
		static callback_550_Microsoft_Maui_Handlers_PickerSource_GetComponentCount_function callback_550_Microsoft_Maui_Handlers_PickerSource_GetComponentCount;
		xamarin_registrar_dlsym ((void **) &callback_550_Microsoft_Maui_Handlers_PickerSource_GetComponentCount, "Microsoft.Maui", "callback_550_Microsoft_Maui_Handlers_PickerSource_GetComponentCount", 169);
		rv = callback_550_Microsoft_Maui_Handlers_PickerSource_GetComponentCount (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef void * (*callback_551_Microsoft_Maui_Handlers_PickerSource_GetRowsInComponent_function) (id self, SEL sel, UIPickerView * p0, void * p1, GCHandle* exception_gchandle);
	-(void *) pickerView:(UIPickerView *)p0 numberOfRowsInComponent:(void *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		void * rv = { 0 };
		static callback_551_Microsoft_Maui_Handlers_PickerSource_GetRowsInComponent_function callback_551_Microsoft_Maui_Handlers_PickerSource_GetRowsInComponent;
		xamarin_registrar_dlsym ((void **) &callback_551_Microsoft_Maui_Handlers_PickerSource_GetRowsInComponent, "Microsoft.Maui", "callback_551_Microsoft_Maui_Handlers_PickerSource_GetRowsInComponent", 170);
		rv = callback_551_Microsoft_Maui_Handlers_PickerSource_GetRowsInComponent (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef NSString * (*callback_552_Microsoft_Maui_Handlers_PickerSource_GetTitle_function) (id self, SEL sel, UIPickerView * p0, void * p1, void * p2, GCHandle* exception_gchandle);
	-(NSString *) pickerView:(UIPickerView *)p0 titleForRow:(void *)p1 forComponent:(void *)p2
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		NSString * rv = { 0 };
		static callback_552_Microsoft_Maui_Handlers_PickerSource_GetTitle_function callback_552_Microsoft_Maui_Handlers_PickerSource_GetTitle;
		xamarin_registrar_dlsym ((void **) &callback_552_Microsoft_Maui_Handlers_PickerSource_GetTitle, "Microsoft.Maui", "callback_552_Microsoft_Maui_Handlers_PickerSource_GetTitle", 171);
		rv = callback_552_Microsoft_Maui_Handlers_PickerSource_GetTitle (self, _cmd, p0, p1, p2, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef void (*callback_553_Microsoft_Maui_Handlers_PickerSource_Selected_function) (id self, SEL sel, UIPickerView * p0, void * p1, void * p2, GCHandle* exception_gchandle);
	-(void) pickerView:(UIPickerView *)p0 didSelectRow:(void *)p1 inComponent:(void *)p2
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_553_Microsoft_Maui_Handlers_PickerSource_Selected_function callback_553_Microsoft_Maui_Handlers_PickerSource_Selected;
		xamarin_registrar_dlsym ((void **) &callback_553_Microsoft_Maui_Handlers_PickerSource_Selected, "Microsoft.Maui", "callback_553_Microsoft_Maui_Handlers_PickerSource_Selected", 172);
		callback_553_Microsoft_Maui_Handlers_PickerSource_Selected (self, _cmd, p0, p1, p2, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
@end

@implementation Microsoft_Maui_Handlers_SwipeItemButton {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	typedef CGRect (*callback_554_Microsoft_Maui_Handlers_SwipeItemButton_get_Frame_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(CGRect) frame
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		CGRect rv = { 0 };
		static callback_554_Microsoft_Maui_Handlers_SwipeItemButton_get_Frame_function callback_554_Microsoft_Maui_Handlers_SwipeItemButton_get_Frame;
		xamarin_registrar_dlsym ((void **) &callback_554_Microsoft_Maui_Handlers_SwipeItemButton_get_Frame, "Microsoft.Maui", "callback_554_Microsoft_Maui_Handlers_SwipeItemButton_get_Frame", 173);
		rv = callback_554_Microsoft_Maui_Handlers_SwipeItemButton_get_Frame (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef void (*callback_555_Microsoft_Maui_Handlers_SwipeItemButton_set_Frame_function) (id self, SEL sel, CGRect p0, GCHandle* exception_gchandle);
	-(void) setFrame:(CGRect)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_555_Microsoft_Maui_Handlers_SwipeItemButton_set_Frame_function callback_555_Microsoft_Maui_Handlers_SwipeItemButton_set_Frame;
		xamarin_registrar_dlsym ((void **) &callback_555_Microsoft_Maui_Handlers_SwipeItemButton_set_Frame, "Microsoft.Maui", "callback_555_Microsoft_Maui_Handlers_SwipeItemButton_set_Frame", 174);
		callback_555_Microsoft_Maui_Handlers_SwipeItemButton_set_Frame (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef id (*callback_556_Microsoft_Maui_Handlers_SwipeItemButton__ctor_function) (id self, SEL sel, bool* call_super, GCHandle* exception_gchandle);
	-(id) init
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_556_Microsoft_Maui_Handlers_SwipeItemButton__ctor_function callback_556_Microsoft_Maui_Handlers_SwipeItemButton__ctor;
		xamarin_registrar_dlsym ((void **) &callback_556_Microsoft_Maui_Handlers_SwipeItemButton__ctor, "Microsoft.Maui", "callback_556_Microsoft_Maui_Handlers_SwipeItemButton__ctor", 175);
		rv = callback_556_Microsoft_Maui_Handlers_SwipeItemButton__ctor (self, _cmd, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [UIButton class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@implementation Microsoft_Maui_MauiUISceneDelegate {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	typedef UIWindow * (*callback_401_Microsoft_Maui_MauiUISceneDelegate_get_Window_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(UIWindow *) window
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		UIWindow * rv = { 0 };
		static callback_401_Microsoft_Maui_MauiUISceneDelegate_get_Window_function callback_401_Microsoft_Maui_MauiUISceneDelegate_get_Window;
		xamarin_registrar_dlsym ((void **) &callback_401_Microsoft_Maui_MauiUISceneDelegate_get_Window, "Microsoft.Maui", "callback_401_Microsoft_Maui_MauiUISceneDelegate_get_Window", 20);
		rv = callback_401_Microsoft_Maui_MauiUISceneDelegate_get_Window (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef void (*callback_402_Microsoft_Maui_MauiUISceneDelegate_set_Window_function) (id self, SEL sel, UIWindow * p0, GCHandle* exception_gchandle);
	-(void) setWindow:(UIWindow *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_402_Microsoft_Maui_MauiUISceneDelegate_set_Window_function callback_402_Microsoft_Maui_MauiUISceneDelegate_set_Window;
		xamarin_registrar_dlsym ((void **) &callback_402_Microsoft_Maui_MauiUISceneDelegate_set_Window, "Microsoft.Maui", "callback_402_Microsoft_Maui_MauiUISceneDelegate_set_Window", 21);
		callback_402_Microsoft_Maui_MauiUISceneDelegate_set_Window (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_403_Microsoft_Maui_MauiUISceneDelegate_WillConnect_function) (id self, SEL sel, UIScene * p0, UISceneSession * p1, UISceneConnectionOptions * p2, GCHandle* exception_gchandle);
	-(void) scene:(UIScene *)p0 willConnectToSession:(UISceneSession *)p1 options:(UISceneConnectionOptions *)p2
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_403_Microsoft_Maui_MauiUISceneDelegate_WillConnect_function callback_403_Microsoft_Maui_MauiUISceneDelegate_WillConnect;
		xamarin_registrar_dlsym ((void **) &callback_403_Microsoft_Maui_MauiUISceneDelegate_WillConnect, "Microsoft.Maui", "callback_403_Microsoft_Maui_MauiUISceneDelegate_WillConnect", 22);
		callback_403_Microsoft_Maui_MauiUISceneDelegate_WillConnect (self, _cmd, p0, p1, p2, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_404_Microsoft_Maui_MauiUISceneDelegate_DidDisconnect_function) (id self, SEL sel, UIScene * p0, GCHandle* exception_gchandle);
	-(void) sceneDidDisconnect:(UIScene *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_404_Microsoft_Maui_MauiUISceneDelegate_DidDisconnect_function callback_404_Microsoft_Maui_MauiUISceneDelegate_DidDisconnect;
		xamarin_registrar_dlsym ((void **) &callback_404_Microsoft_Maui_MauiUISceneDelegate_DidDisconnect, "Microsoft.Maui", "callback_404_Microsoft_Maui_MauiUISceneDelegate_DidDisconnect", 23);
		callback_404_Microsoft_Maui_MauiUISceneDelegate_DidDisconnect (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef NSUserActivity * (*callback_405_Microsoft_Maui_MauiUISceneDelegate_GetStateRestorationActivity_function) (id self, SEL sel, UIScene * p0, GCHandle* exception_gchandle);
	-(NSUserActivity *) stateRestorationActivityForScene:(UIScene *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		NSUserActivity * rv = { 0 };
		static callback_405_Microsoft_Maui_MauiUISceneDelegate_GetStateRestorationActivity_function callback_405_Microsoft_Maui_MauiUISceneDelegate_GetStateRestorationActivity;
		xamarin_registrar_dlsym ((void **) &callback_405_Microsoft_Maui_MauiUISceneDelegate_GetStateRestorationActivity, "Microsoft.Maui", "callback_405_Microsoft_Maui_MauiUISceneDelegate_GetStateRestorationActivity", 24);
		rv = callback_405_Microsoft_Maui_MauiUISceneDelegate_GetStateRestorationActivity (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef void (*callback_406_Microsoft_Maui_MauiUISceneDelegate_WillEnterForeground_function) (id self, SEL sel, UIScene * p0, GCHandle* exception_gchandle);
	-(void) sceneWillEnterForeground:(UIScene *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_406_Microsoft_Maui_MauiUISceneDelegate_WillEnterForeground_function callback_406_Microsoft_Maui_MauiUISceneDelegate_WillEnterForeground;
		xamarin_registrar_dlsym ((void **) &callback_406_Microsoft_Maui_MauiUISceneDelegate_WillEnterForeground, "Microsoft.Maui", "callback_406_Microsoft_Maui_MauiUISceneDelegate_WillEnterForeground", 25);
		callback_406_Microsoft_Maui_MauiUISceneDelegate_WillEnterForeground (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_407_Microsoft_Maui_MauiUISceneDelegate_OnActivated_function) (id self, SEL sel, UIScene * p0, GCHandle* exception_gchandle);
	-(void) sceneDidBecomeActive:(UIScene *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_407_Microsoft_Maui_MauiUISceneDelegate_OnActivated_function callback_407_Microsoft_Maui_MauiUISceneDelegate_OnActivated;
		xamarin_registrar_dlsym ((void **) &callback_407_Microsoft_Maui_MauiUISceneDelegate_OnActivated, "Microsoft.Maui", "callback_407_Microsoft_Maui_MauiUISceneDelegate_OnActivated", 26);
		callback_407_Microsoft_Maui_MauiUISceneDelegate_OnActivated (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_408_Microsoft_Maui_MauiUISceneDelegate_OnResignActivation_function) (id self, SEL sel, UIScene * p0, GCHandle* exception_gchandle);
	-(void) sceneWillResignActive:(UIScene *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_408_Microsoft_Maui_MauiUISceneDelegate_OnResignActivation_function callback_408_Microsoft_Maui_MauiUISceneDelegate_OnResignActivation;
		xamarin_registrar_dlsym ((void **) &callback_408_Microsoft_Maui_MauiUISceneDelegate_OnResignActivation, "Microsoft.Maui", "callback_408_Microsoft_Maui_MauiUISceneDelegate_OnResignActivation", 27);
		callback_408_Microsoft_Maui_MauiUISceneDelegate_OnResignActivation (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_409_Microsoft_Maui_MauiUISceneDelegate_DidEnterBackground_function) (id self, SEL sel, UIScene * p0, GCHandle* exception_gchandle);
	-(void) sceneDidEnterBackground:(UIScene *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_409_Microsoft_Maui_MauiUISceneDelegate_DidEnterBackground_function callback_409_Microsoft_Maui_MauiUISceneDelegate_DidEnterBackground;
		xamarin_registrar_dlsym ((void **) &callback_409_Microsoft_Maui_MauiUISceneDelegate_DidEnterBackground, "Microsoft.Maui", "callback_409_Microsoft_Maui_MauiUISceneDelegate_DidEnterBackground", 28);
		callback_409_Microsoft_Maui_MauiUISceneDelegate_DidEnterBackground (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef BOOL (*callback_410_Microsoft_Maui_MauiUISceneDelegate_OpenUrl_function) (id self, SEL sel, UIScene * p0, NSSet <UIOpenURLContext *>* p1, GCHandle* exception_gchandle);
	-(BOOL) scene:(UIScene *)p0 openURLContexts:(NSSet <UIOpenURLContext *>*)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		BOOL rv = { 0 };
		static callback_410_Microsoft_Maui_MauiUISceneDelegate_OpenUrl_function callback_410_Microsoft_Maui_MauiUISceneDelegate_OpenUrl;
		xamarin_registrar_dlsym ((void **) &callback_410_Microsoft_Maui_MauiUISceneDelegate_OpenUrl, "Microsoft.Maui", "callback_410_Microsoft_Maui_MauiUISceneDelegate_OpenUrl", 29);
		rv = callback_410_Microsoft_Maui_MauiUISceneDelegate_OpenUrl (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef BOOL (*callback_411_Microsoft_Maui_MauiUISceneDelegate_ContinueUserActivity_function) (id self, SEL sel, UIScene * p0, NSUserActivity * p1, GCHandle* exception_gchandle);
	-(BOOL) scene:(UIScene *)p0 continueUserActivity:(NSUserActivity *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		BOOL rv = { 0 };
		static callback_411_Microsoft_Maui_MauiUISceneDelegate_ContinueUserActivity_function callback_411_Microsoft_Maui_MauiUISceneDelegate_ContinueUserActivity;
		xamarin_registrar_dlsym ((void **) &callback_411_Microsoft_Maui_MauiUISceneDelegate_ContinueUserActivity, "Microsoft.Maui", "callback_411_Microsoft_Maui_MauiUISceneDelegate_ContinueUserActivity", 30);
		rv = callback_411_Microsoft_Maui_MauiUISceneDelegate_ContinueUserActivity (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef void (*callback_412_Microsoft_Maui_MauiUISceneDelegate_WillContinueUserActivity_function) (id self, SEL sel, UIScene * p0, NSString * p1, GCHandle* exception_gchandle);
	-(void) scene:(UIScene *)p0 willContinueUserActivityWithType:(NSString *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_412_Microsoft_Maui_MauiUISceneDelegate_WillContinueUserActivity_function callback_412_Microsoft_Maui_MauiUISceneDelegate_WillContinueUserActivity;
		xamarin_registrar_dlsym ((void **) &callback_412_Microsoft_Maui_MauiUISceneDelegate_WillContinueUserActivity, "Microsoft.Maui", "callback_412_Microsoft_Maui_MauiUISceneDelegate_WillContinueUserActivity", 31);
		callback_412_Microsoft_Maui_MauiUISceneDelegate_WillContinueUserActivity (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_413_Microsoft_Maui_MauiUISceneDelegate_DidFailToContinueUserActivity_function) (id self, SEL sel, UIScene * p0, NSString * p1, NSError * p2, GCHandle* exception_gchandle);
	-(void) scene:(UIScene *)p0 didFailToContinueUserActivityWithType:(NSString *)p1 error:(NSError *)p2
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_413_Microsoft_Maui_MauiUISceneDelegate_DidFailToContinueUserActivity_function callback_413_Microsoft_Maui_MauiUISceneDelegate_DidFailToContinueUserActivity;
		xamarin_registrar_dlsym ((void **) &callback_413_Microsoft_Maui_MauiUISceneDelegate_DidFailToContinueUserActivity, "Microsoft.Maui", "callback_413_Microsoft_Maui_MauiUISceneDelegate_DidFailToContinueUserActivity", 32);
		callback_413_Microsoft_Maui_MauiUISceneDelegate_DidFailToContinueUserActivity (self, _cmd, p0, p1, p2, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_414_Microsoft_Maui_MauiUISceneDelegate_DidUpdateUserActivity_function) (id self, SEL sel, UIScene * p0, NSUserActivity * p1, GCHandle* exception_gchandle);
	-(void) scene:(UIScene *)p0 didUpdateUserActivity:(NSUserActivity *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_414_Microsoft_Maui_MauiUISceneDelegate_DidUpdateUserActivity_function callback_414_Microsoft_Maui_MauiUISceneDelegate_DidUpdateUserActivity;
		xamarin_registrar_dlsym ((void **) &callback_414_Microsoft_Maui_MauiUISceneDelegate_DidUpdateUserActivity, "Microsoft.Maui", "callback_414_Microsoft_Maui_MauiUISceneDelegate_DidUpdateUserActivity", 33);
		callback_414_Microsoft_Maui_MauiUISceneDelegate_DidUpdateUserActivity (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_415_Microsoft_Maui_MauiUISceneDelegate_RestoreInteractionState_function) (id self, SEL sel, UIScene * p0, NSUserActivity * p1, GCHandle* exception_gchandle);
	-(void) scene:(UIScene *)p0 restoreInteractionStateWithUserActivity:(NSUserActivity *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_415_Microsoft_Maui_MauiUISceneDelegate_RestoreInteractionState_function callback_415_Microsoft_Maui_MauiUISceneDelegate_RestoreInteractionState;
		xamarin_registrar_dlsym ((void **) &callback_415_Microsoft_Maui_MauiUISceneDelegate_RestoreInteractionState, "Microsoft.Maui", "callback_415_Microsoft_Maui_MauiUISceneDelegate_RestoreInteractionState", 34);
		callback_415_Microsoft_Maui_MauiUISceneDelegate_RestoreInteractionState (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_416_Microsoft_Maui_MauiUISceneDelegate_DidUpdateCoordinateSpace_function) (id self, SEL sel, UIWindowScene * p0, id p1, NSInteger p2, UITraitCollection * p3, GCHandle* exception_gchandle);
	-(void) windowScene:(UIWindowScene *)p0 didUpdateCoordinateSpace:(id)p1 interfaceOrientation:(NSInteger)p2 traitCollection:(UITraitCollection *)p3
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_416_Microsoft_Maui_MauiUISceneDelegate_DidUpdateCoordinateSpace_function callback_416_Microsoft_Maui_MauiUISceneDelegate_DidUpdateCoordinateSpace;
		xamarin_registrar_dlsym ((void **) &callback_416_Microsoft_Maui_MauiUISceneDelegate_DidUpdateCoordinateSpace, "Microsoft.Maui", "callback_416_Microsoft_Maui_MauiUISceneDelegate_DidUpdateCoordinateSpace", 35);
		callback_416_Microsoft_Maui_MauiUISceneDelegate_DidUpdateCoordinateSpace (self, _cmd, p0, p1, p2, p3, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef id (*callback_417_Microsoft_Maui_MauiUISceneDelegate__ctor_function) (id self, SEL sel, bool* call_super, GCHandle* exception_gchandle);
	-(id) init
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_417_Microsoft_Maui_MauiUISceneDelegate__ctor_function callback_417_Microsoft_Maui_MauiUISceneDelegate__ctor;
		xamarin_registrar_dlsym ((void **) &callback_417_Microsoft_Maui_MauiUISceneDelegate__ctor, "Microsoft.Maui", "callback_417_Microsoft_Maui_MauiUISceneDelegate__ctor", 36);
		rv = callback_417_Microsoft_Maui_MauiUISceneDelegate__ctor (self, _cmd, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [UIResponder class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@interface Microsoft_Maui_WindowOverlay_OverlayGraphicsView : PlatformGraphicsView {
}
	-(BOOL) isTransparentFocusItem;
@end

@implementation Microsoft_Maui_WindowOverlay_OverlayGraphicsView {
}

	typedef BOOL (*callback_418_Microsoft_Maui_WindowOverlay_OverlayGraphicsView_get_IsTransparentFocusItem_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(BOOL) isTransparentFocusItem
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		BOOL rv = { 0 };
		static callback_418_Microsoft_Maui_WindowOverlay_OverlayGraphicsView_get_IsTransparentFocusItem_function callback_418_Microsoft_Maui_WindowOverlay_OverlayGraphicsView_get_IsTransparentFocusItem;
		xamarin_registrar_dlsym ((void **) &callback_418_Microsoft_Maui_WindowOverlay_OverlayGraphicsView_get_IsTransparentFocusItem, "Microsoft.Maui", "callback_418_Microsoft_Maui_WindowOverlay_OverlayGraphicsView_get_IsTransparentFocusItem", 37);
		rv = callback_418_Microsoft_Maui_WindowOverlay_OverlayGraphicsView_get_IsTransparentFocusItem (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
@end

@implementation Microsoft_Maui_Platform_MauiHybridWebView {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}

	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
@end

@implementation Microsoft_Maui_Platform_MauiSwipeView {
}

	typedef void (*callback_478_Microsoft_Maui_Platform_MauiSwipeView_LayoutSubviews_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) layoutSubviews
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_478_Microsoft_Maui_Platform_MauiSwipeView_LayoutSubviews_function callback_478_Microsoft_Maui_Platform_MauiSwipeView_LayoutSubviews;
		xamarin_registrar_dlsym ((void **) &callback_478_Microsoft_Maui_Platform_MauiSwipeView_LayoutSubviews, "Microsoft.Maui", "callback_478_Microsoft_Maui_Platform_MauiSwipeView_LayoutSubviews", 97);
		callback_478_Microsoft_Maui_Platform_MauiSwipeView_LayoutSubviews (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_479_Microsoft_Maui_Platform_MauiSwipeView_TouchesEnded_function) (id self, SEL sel, NSSet * p0, UIEvent * p1, GCHandle* exception_gchandle);
	-(void) touchesEnded:(NSSet *)p0 withEvent:(UIEvent *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_479_Microsoft_Maui_Platform_MauiSwipeView_TouchesEnded_function callback_479_Microsoft_Maui_Platform_MauiSwipeView_TouchesEnded;
		xamarin_registrar_dlsym ((void **) &callback_479_Microsoft_Maui_Platform_MauiSwipeView_TouchesEnded, "Microsoft.Maui", "callback_479_Microsoft_Maui_Platform_MauiSwipeView_TouchesEnded", 98);
		callback_479_Microsoft_Maui_Platform_MauiSwipeView_TouchesEnded (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_480_Microsoft_Maui_Platform_MauiSwipeView_TouchesCancelled_function) (id self, SEL sel, NSSet * p0, UIEvent * p1, GCHandle* exception_gchandle);
	-(void) touchesCancelled:(NSSet *)p0 withEvent:(UIEvent *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_480_Microsoft_Maui_Platform_MauiSwipeView_TouchesCancelled_function callback_480_Microsoft_Maui_Platform_MauiSwipeView_TouchesCancelled;
		xamarin_registrar_dlsym ((void **) &callback_480_Microsoft_Maui_Platform_MauiSwipeView_TouchesCancelled, "Microsoft.Maui", "callback_480_Microsoft_Maui_Platform_MauiSwipeView_TouchesCancelled", 99);
		callback_480_Microsoft_Maui_Platform_MauiSwipeView_TouchesCancelled (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef UIView * (*callback_481_Microsoft_Maui_Platform_MauiSwipeView_HitTest_function) (id self, SEL sel, CGPoint p0, UIEvent * p1, GCHandle* exception_gchandle);
	-(UIView *) hitTest:(CGPoint)p0 withEvent:(UIEvent *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		UIView * rv = { 0 };
		static callback_481_Microsoft_Maui_Platform_MauiSwipeView_HitTest_function callback_481_Microsoft_Maui_Platform_MauiSwipeView_HitTest;
		xamarin_registrar_dlsym ((void **) &callback_481_Microsoft_Maui_Platform_MauiSwipeView_HitTest, "Microsoft.Maui", "callback_481_Microsoft_Maui_Platform_MauiSwipeView_HitTest", 100);
		rv = callback_481_Microsoft_Maui_Platform_MauiSwipeView_HitTest (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef id (*callback_477_Microsoft_Maui_Platform_MauiSwipeView__ctor_function) (id self, SEL sel, bool* call_super, GCHandle* exception_gchandle);
	-(id) init
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_477_Microsoft_Maui_Platform_MauiSwipeView__ctor_function callback_477_Microsoft_Maui_Platform_MauiSwipeView__ctor;
		xamarin_registrar_dlsym ((void **) &callback_477_Microsoft_Maui_Platform_MauiSwipeView__ctor, "Microsoft.Maui", "callback_477_Microsoft_Maui_Platform_MauiSwipeView__ctor", 96);
		rv = callback_477_Microsoft_Maui_Platform_MauiSwipeView__ctor (self, _cmd, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [Microsoft_Maui_Platform_ContentView class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@interface Microsoft_Maui_Platform_MauiUIContextMenuInteraction_FlyoutUIContextMenuInteractionDelegate : NSObject<UIContextMenuInteractionDelegate> {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(UIContextMenuConfiguration *) contextMenuInteraction:(UIContextMenuInteraction *)p0 configurationForMenuAtLocation:(CGPoint)p1;
	-(BOOL) conformsToProtocol:(void *)p0;
	-(id) init;
@end

@implementation Microsoft_Maui_Platform_MauiUIContextMenuInteraction_FlyoutUIContextMenuInteractionDelegate {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	typedef UIContextMenuConfiguration * (*callback_503_Microsoft_Maui_Platform_MauiUIContextMenuInteraction_FlyoutUIContextMenuInteractionDelegate_GetConfigurationForMenu_function) (id self, SEL sel, UIContextMenuInteraction * p0, CGPoint p1, GCHandle* exception_gchandle);
	-(UIContextMenuConfiguration *) contextMenuInteraction:(UIContextMenuInteraction *)p0 configurationForMenuAtLocation:(CGPoint)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		UIContextMenuConfiguration * rv = { 0 };
		static callback_503_Microsoft_Maui_Platform_MauiUIContextMenuInteraction_FlyoutUIContextMenuInteractionDelegate_GetConfigurationForMenu_function callback_503_Microsoft_Maui_Platform_MauiUIContextMenuInteraction_FlyoutUIContextMenuInteractionDelegate_GetConfigurationForMenu;
		xamarin_registrar_dlsym ((void **) &callback_503_Microsoft_Maui_Platform_MauiUIContextMenuInteraction_FlyoutUIContextMenuInteractionDelegate_GetConfigurationForMenu, "Microsoft.Maui", "callback_503_Microsoft_Maui_Platform_MauiUIContextMenuInteraction_FlyoutUIContextMenuInteractionDelegate_GetConfigurationForMenu", 122);
		rv = callback_503_Microsoft_Maui_Platform_MauiUIContextMenuInteraction_FlyoutUIContextMenuInteractionDelegate_GetConfigurationForMenu (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef id (*callback_502_Microsoft_Maui_Platform_MauiUIContextMenuInteraction_FlyoutUIContextMenuInteractionDelegate__ctor_function) (id self, SEL sel, bool* call_super, GCHandle* exception_gchandle);
	-(id) init
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_502_Microsoft_Maui_Platform_MauiUIContextMenuInteraction_FlyoutUIContextMenuInteractionDelegate__ctor_function callback_502_Microsoft_Maui_Platform_MauiUIContextMenuInteraction_FlyoutUIContextMenuInteractionDelegate__ctor;
		xamarin_registrar_dlsym ((void **) &callback_502_Microsoft_Maui_Platform_MauiUIContextMenuInteraction_FlyoutUIContextMenuInteractionDelegate__ctor, "Microsoft.Maui", "callback_502_Microsoft_Maui_Platform_MauiUIContextMenuInteraction_FlyoutUIContextMenuInteractionDelegate__ctor", 121);
		rv = callback_502_Microsoft_Maui_Platform_MauiUIContextMenuInteraction_FlyoutUIContextMenuInteractionDelegate__ctor (self, _cmd, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@interface Microsoft_Maui_Platform_MauiUIContextMenuInteraction : UIContextMenuInteraction {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(BOOL) conformsToProtocol:(void *)p0;
@end

@implementation Microsoft_Maui_Platform_MauiUIContextMenuInteraction {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}

	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
@end

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_MacCatalyst__WebKit_WKUIDelegate {
}

	typedef id (*callback_917_WebKit_WKUIDelegate__ctor_function) (id self, SEL sel, bool* call_super, GCHandle* exception_gchandle);
	-(id) init
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_917_WebKit_WKUIDelegate__ctor_function callback_917_WebKit_WKUIDelegate__ctor;
		xamarin_registrar_dlsym ((void **) &callback_917_WebKit_WKUIDelegate__ctor, "Microsoft.MacCatalyst", "callback_917_WebKit_WKUIDelegate__ctor", 2);
		rv = callback_917_WebKit_WKUIDelegate__ctor (self, _cmd, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

@implementation Microsoft_Maui_Platform_MauiWebViewUIDelegate {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	typedef void (*callback_514_Microsoft_Maui_Platform_MauiWebViewUIDelegate_SetContextMenuConfiguration_function) (id self, SEL sel, WKWebView * p0, WKContextMenuElementInfo * p1, void (^p2)(void *), GCHandle* exception_gchandle);
	-(void) webView:(WKWebView *)p0 contextMenuConfigurationForElement:(WKContextMenuElementInfo *)p1 completionHandler:(void (^)(void *))p2
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_514_Microsoft_Maui_Platform_MauiWebViewUIDelegate_SetContextMenuConfiguration_function callback_514_Microsoft_Maui_Platform_MauiWebViewUIDelegate_SetContextMenuConfiguration;
		xamarin_registrar_dlsym ((void **) &callback_514_Microsoft_Maui_Platform_MauiWebViewUIDelegate_SetContextMenuConfiguration, "Microsoft.Maui", "callback_514_Microsoft_Maui_Platform_MauiWebViewUIDelegate_SetContextMenuConfiguration", 133);
		callback_514_Microsoft_Maui_Platform_MauiWebViewUIDelegate_SetContextMenuConfiguration (self, _cmd, p0, p1, p2, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_515_Microsoft_Maui_Platform_MauiWebViewUIDelegate_RunJavaScriptAlertPanel_function) (id self, SEL sel, WKWebView * p0, NSString * p1, WKFrameInfo * p2, void (^p3)(), GCHandle* exception_gchandle);
	-(void) webView:(WKWebView *)p0 runJavaScriptAlertPanelWithMessage:(NSString *)p1 initiatedByFrame:(WKFrameInfo *)p2 completionHandler:(void (^)())p3
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_515_Microsoft_Maui_Platform_MauiWebViewUIDelegate_RunJavaScriptAlertPanel_function callback_515_Microsoft_Maui_Platform_MauiWebViewUIDelegate_RunJavaScriptAlertPanel;
		xamarin_registrar_dlsym ((void **) &callback_515_Microsoft_Maui_Platform_MauiWebViewUIDelegate_RunJavaScriptAlertPanel, "Microsoft.Maui", "callback_515_Microsoft_Maui_Platform_MauiWebViewUIDelegate_RunJavaScriptAlertPanel", 134);
		callback_515_Microsoft_Maui_Platform_MauiWebViewUIDelegate_RunJavaScriptAlertPanel (self, _cmd, p0, p1, p2, p3, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_516_Microsoft_Maui_Platform_MauiWebViewUIDelegate_RunJavaScriptConfirmPanel_function) (id self, SEL sel, WKWebView * p0, NSString * p1, WKFrameInfo * p2, void (^p3)(void *), GCHandle* exception_gchandle);
	-(void) webView:(WKWebView *)p0 runJavaScriptConfirmPanelWithMessage:(NSString *)p1 initiatedByFrame:(WKFrameInfo *)p2 completionHandler:(void (^)(void *))p3
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_516_Microsoft_Maui_Platform_MauiWebViewUIDelegate_RunJavaScriptConfirmPanel_function callback_516_Microsoft_Maui_Platform_MauiWebViewUIDelegate_RunJavaScriptConfirmPanel;
		xamarin_registrar_dlsym ((void **) &callback_516_Microsoft_Maui_Platform_MauiWebViewUIDelegate_RunJavaScriptConfirmPanel, "Microsoft.Maui", "callback_516_Microsoft_Maui_Platform_MauiWebViewUIDelegate_RunJavaScriptConfirmPanel", 135);
		callback_516_Microsoft_Maui_Platform_MauiWebViewUIDelegate_RunJavaScriptConfirmPanel (self, _cmd, p0, p1, p2, p3, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_517_Microsoft_Maui_Platform_MauiWebViewUIDelegate_RunJavaScriptTextInputPanel_function) (id self, SEL sel, WKWebView * p0, NSString * p1, NSString * p2, WKFrameInfo * p3, void (^p4)(void *), GCHandle* exception_gchandle);
	-(void) webView:(WKWebView *)p0 runJavaScriptTextInputPanelWithPrompt:(NSString *)p1 defaultText:(NSString *)p2 initiatedByFrame:(WKFrameInfo *)p3 completionHandler:(void (^)(void *))p4
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_517_Microsoft_Maui_Platform_MauiWebViewUIDelegate_RunJavaScriptTextInputPanel_function callback_517_Microsoft_Maui_Platform_MauiWebViewUIDelegate_RunJavaScriptTextInputPanel;
		xamarin_registrar_dlsym ((void **) &callback_517_Microsoft_Maui_Platform_MauiWebViewUIDelegate_RunJavaScriptTextInputPanel, "Microsoft.Maui", "callback_517_Microsoft_Maui_Platform_MauiWebViewUIDelegate_RunJavaScriptTextInputPanel", 136);
		callback_517_Microsoft_Maui_Platform_MauiWebViewUIDelegate_RunJavaScriptTextInputPanel (self, _cmd, p0, p1, p2, p3, p4, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
@end

@implementation Microsoft_Maui_Platform_MauiWKWebView {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	typedef void (*callback_518_Microsoft_Maui_Platform_MauiWKWebView_MovedToWindow_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) didMoveToWindow
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_518_Microsoft_Maui_Platform_MauiWKWebView_MovedToWindow_function callback_518_Microsoft_Maui_Platform_MauiWKWebView_MovedToWindow;
		xamarin_registrar_dlsym ((void **) &callback_518_Microsoft_Maui_Platform_MauiWKWebView_MovedToWindow, "Microsoft.Maui", "callback_518_Microsoft_Maui_Platform_MauiWKWebView_MovedToWindow", 137);
		callback_518_Microsoft_Maui_Platform_MauiWKWebView_MovedToWindow (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_519_Microsoft_Maui_Platform_MauiWKWebView_ContentProcessDidTerminate_function) (id self, SEL sel, WKWebView * p0, GCHandle* exception_gchandle);
	-(void) webViewWebContentProcessDidTerminate:(WKWebView *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_519_Microsoft_Maui_Platform_MauiWKWebView_ContentProcessDidTerminate_function callback_519_Microsoft_Maui_Platform_MauiWKWebView_ContentProcessDidTerminate;
		xamarin_registrar_dlsym ((void **) &callback_519_Microsoft_Maui_Platform_MauiWKWebView_ContentProcessDidTerminate, "Microsoft.Maui", "callback_519_Microsoft_Maui_Platform_MauiWKWebView_ContentProcessDidTerminate", 138);
		callback_519_Microsoft_Maui_Platform_MauiWKWebView_ContentProcessDidTerminate (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
@end

@implementation Microsoft_Maui_Platform_PlatformTouchGraphicsView {
}

	typedef void (*callback_529_Microsoft_Maui_Platform_PlatformTouchGraphicsView_LayoutSubviews_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) layoutSubviews
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_529_Microsoft_Maui_Platform_PlatformTouchGraphicsView_LayoutSubviews_function callback_529_Microsoft_Maui_Platform_PlatformTouchGraphicsView_LayoutSubviews;
		xamarin_registrar_dlsym ((void **) &callback_529_Microsoft_Maui_Platform_PlatformTouchGraphicsView_LayoutSubviews, "Microsoft.Maui", "callback_529_Microsoft_Maui_Platform_PlatformTouchGraphicsView_LayoutSubviews", 148);
		callback_529_Microsoft_Maui_Platform_PlatformTouchGraphicsView_LayoutSubviews (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_530_Microsoft_Maui_Platform_PlatformTouchGraphicsView_TouchesBegan_function) (id self, SEL sel, NSSet * p0, UIEvent * p1, GCHandle* exception_gchandle);
	-(void) touchesBegan:(NSSet *)p0 withEvent:(UIEvent *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_530_Microsoft_Maui_Platform_PlatformTouchGraphicsView_TouchesBegan_function callback_530_Microsoft_Maui_Platform_PlatformTouchGraphicsView_TouchesBegan;
		xamarin_registrar_dlsym ((void **) &callback_530_Microsoft_Maui_Platform_PlatformTouchGraphicsView_TouchesBegan, "Microsoft.Maui", "callback_530_Microsoft_Maui_Platform_PlatformTouchGraphicsView_TouchesBegan", 149);
		callback_530_Microsoft_Maui_Platform_PlatformTouchGraphicsView_TouchesBegan (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_531_Microsoft_Maui_Platform_PlatformTouchGraphicsView_TouchesMoved_function) (id self, SEL sel, NSSet * p0, UIEvent * p1, GCHandle* exception_gchandle);
	-(void) touchesMoved:(NSSet *)p0 withEvent:(UIEvent *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_531_Microsoft_Maui_Platform_PlatformTouchGraphicsView_TouchesMoved_function callback_531_Microsoft_Maui_Platform_PlatformTouchGraphicsView_TouchesMoved;
		xamarin_registrar_dlsym ((void **) &callback_531_Microsoft_Maui_Platform_PlatformTouchGraphicsView_TouchesMoved, "Microsoft.Maui", "callback_531_Microsoft_Maui_Platform_PlatformTouchGraphicsView_TouchesMoved", 150);
		callback_531_Microsoft_Maui_Platform_PlatformTouchGraphicsView_TouchesMoved (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_532_Microsoft_Maui_Platform_PlatformTouchGraphicsView_TouchesEnded_function) (id self, SEL sel, NSSet * p0, UIEvent * p1, GCHandle* exception_gchandle);
	-(void) touchesEnded:(NSSet *)p0 withEvent:(UIEvent *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_532_Microsoft_Maui_Platform_PlatformTouchGraphicsView_TouchesEnded_function callback_532_Microsoft_Maui_Platform_PlatformTouchGraphicsView_TouchesEnded;
		xamarin_registrar_dlsym ((void **) &callback_532_Microsoft_Maui_Platform_PlatformTouchGraphicsView_TouchesEnded, "Microsoft.Maui", "callback_532_Microsoft_Maui_Platform_PlatformTouchGraphicsView_TouchesEnded", 151);
		callback_532_Microsoft_Maui_Platform_PlatformTouchGraphicsView_TouchesEnded (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_533_Microsoft_Maui_Platform_PlatformTouchGraphicsView_TouchesCancelled_function) (id self, SEL sel, NSSet * p0, UIEvent * p1, GCHandle* exception_gchandle);
	-(void) touchesCancelled:(NSSet *)p0 withEvent:(UIEvent *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_533_Microsoft_Maui_Platform_PlatformTouchGraphicsView_TouchesCancelled_function callback_533_Microsoft_Maui_Platform_PlatformTouchGraphicsView_TouchesCancelled;
		xamarin_registrar_dlsym ((void **) &callback_533_Microsoft_Maui_Platform_PlatformTouchGraphicsView_TouchesCancelled, "Microsoft.Maui", "callback_533_Microsoft_Maui_Platform_PlatformTouchGraphicsView_TouchesCancelled", 152);
		callback_533_Microsoft_Maui_Platform_PlatformTouchGraphicsView_TouchesCancelled (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef id (*callback_528_Microsoft_Maui_Platform_PlatformTouchGraphicsView__ctor_function) (id self, SEL sel, bool* call_super, GCHandle* exception_gchandle);
	-(id) init
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_528_Microsoft_Maui_Platform_PlatformTouchGraphicsView__ctor_function callback_528_Microsoft_Maui_Platform_PlatformTouchGraphicsView__ctor;
		xamarin_registrar_dlsym ((void **) &callback_528_Microsoft_Maui_Platform_PlatformTouchGraphicsView__ctor, "Microsoft.Maui", "callback_528_Microsoft_Maui_Platform_PlatformTouchGraphicsView__ctor", 147);
		rv = callback_528_Microsoft_Maui_Platform_PlatformTouchGraphicsView__ctor (self, _cmd, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [PlatformGraphicsView class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@interface Microsoft_Maui_Handlers_HybridWebViewHandler_WebViewScriptMessageHandler : NSObject<WKScriptMessageHandler> {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(void) userContentController:(WKUserContentController *)p0 didReceiveScriptMessage:(WKScriptMessage *)p1;
	-(BOOL) conformsToProtocol:(void *)p0;
@end

@implementation Microsoft_Maui_Handlers_HybridWebViewHandler_WebViewScriptMessageHandler {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	typedef void (*callback_547_Microsoft_Maui_Handlers_HybridWebViewHandler_WebViewScriptMessageHandler_DidReceiveScriptMessage_function) (id self, SEL sel, WKUserContentController * p0, WKScriptMessage * p1, GCHandle* exception_gchandle);
	-(void) userContentController:(WKUserContentController *)p0 didReceiveScriptMessage:(WKScriptMessage *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_547_Microsoft_Maui_Handlers_HybridWebViewHandler_WebViewScriptMessageHandler_DidReceiveScriptMessage_function callback_547_Microsoft_Maui_Handlers_HybridWebViewHandler_WebViewScriptMessageHandler_DidReceiveScriptMessage;
		xamarin_registrar_dlsym ((void **) &callback_547_Microsoft_Maui_Handlers_HybridWebViewHandler_WebViewScriptMessageHandler_DidReceiveScriptMessage, "Microsoft.Maui", "callback_547_Microsoft_Maui_Handlers_HybridWebViewHandler_WebViewScriptMessageHandler_DidReceiveScriptMessage", 166);
		callback_547_Microsoft_Maui_Handlers_HybridWebViewHandler_WebViewScriptMessageHandler_DidReceiveScriptMessage (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
@end

@interface Microsoft_Maui_Handlers_HybridWebViewHandler_SchemeHandler : NSObject<WKURLSchemeHandler> {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(void) webView:(WKWebView *)p0 startURLSchemeTask:(id)p1;
	-(void) webView:(WKWebView *)p0 stopURLSchemeTask:(id)p1;
	-(BOOL) conformsToProtocol:(void *)p0;
@end

@implementation Microsoft_Maui_Handlers_HybridWebViewHandler_SchemeHandler {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	typedef void (*callback_548_Microsoft_Maui_Handlers_HybridWebViewHandler_SchemeHandler_StartUrlSchemeTask_function) (id self, SEL sel, WKWebView * p0, id p1, GCHandle* exception_gchandle);
	-(void) webView:(WKWebView *)p0 startURLSchemeTask:(id)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_548_Microsoft_Maui_Handlers_HybridWebViewHandler_SchemeHandler_StartUrlSchemeTask_function callback_548_Microsoft_Maui_Handlers_HybridWebViewHandler_SchemeHandler_StartUrlSchemeTask;
		xamarin_registrar_dlsym ((void **) &callback_548_Microsoft_Maui_Handlers_HybridWebViewHandler_SchemeHandler_StartUrlSchemeTask, "Microsoft.Maui", "callback_548_Microsoft_Maui_Handlers_HybridWebViewHandler_SchemeHandler_StartUrlSchemeTask", 167);
		callback_548_Microsoft_Maui_Handlers_HybridWebViewHandler_SchemeHandler_StartUrlSchemeTask (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_549_Microsoft_Maui_Handlers_HybridWebViewHandler_SchemeHandler_StopUrlSchemeTask_function) (id self, SEL sel, WKWebView * p0, id p1, GCHandle* exception_gchandle);
	-(void) webView:(WKWebView *)p0 stopURLSchemeTask:(id)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_549_Microsoft_Maui_Handlers_HybridWebViewHandler_SchemeHandler_StopUrlSchemeTask_function callback_549_Microsoft_Maui_Handlers_HybridWebViewHandler_SchemeHandler_StopUrlSchemeTask;
		xamarin_registrar_dlsym ((void **) &callback_549_Microsoft_Maui_Handlers_HybridWebViewHandler_SchemeHandler_StopUrlSchemeTask, "Microsoft.Maui", "callback_549_Microsoft_Maui_Handlers_HybridWebViewHandler_SchemeHandler_StopUrlSchemeTask", 168);
		callback_549_Microsoft_Maui_Handlers_HybridWebViewHandler_SchemeHandler_StopUrlSchemeTask (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
@end

@interface Microsoft_Maui_WindowOverlay_PassthroughView : UIView {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(BOOL) pointInside:(CGPoint)p0 withEvent:(UIEvent *)p1;
	-(BOOL) conformsToProtocol:(void *)p0;
@end

@implementation Microsoft_Maui_WindowOverlay_PassthroughView {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	typedef BOOL (*callback_419_Microsoft_Maui_WindowOverlay_PassthroughView_PointInside_function) (id self, SEL sel, CGPoint p0, UIEvent * p1, GCHandle* exception_gchandle);
	-(BOOL) pointInside:(CGPoint)p0 withEvent:(UIEvent *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		BOOL rv = { 0 };
		static callback_419_Microsoft_Maui_WindowOverlay_PassthroughView_PointInside_function callback_419_Microsoft_Maui_WindowOverlay_PassthroughView_PointInside;
		xamarin_registrar_dlsym ((void **) &callback_419_Microsoft_Maui_WindowOverlay_PassthroughView_PointInside, "Microsoft.Maui", "callback_419_Microsoft_Maui_WindowOverlay_PassthroughView_PointInside", 38);
		rv = callback_419_Microsoft_Maui_WindowOverlay_PassthroughView_PointInside (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
@end

@interface Microsoft_Maui_Authentication_AuthManager : NSObject<ASAuthorizationControllerDelegate, ASAuthorizationControllerPresentationContextProviding> {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(UIWindow *) presentationAnchorForAuthorizationController:(ASAuthorizationController *)p0;
	-(void) authorizationController:(ASAuthorizationController *)p0 didCompleteWithAuthorization:(ASAuthorization *)p1;
	-(void) authorizationController:(ASAuthorizationController *)p0 didCompleteWithError:(NSError *)p1;
	-(BOOL) conformsToProtocol:(void *)p0;
@end

@implementation Microsoft_Maui_Authentication_AuthManager {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	typedef UIWindow * (*callback_557_Microsoft_Maui_Authentication_AuthManager_GetPresentationAnchor_function) (id self, SEL sel, ASAuthorizationController * p0, GCHandle* exception_gchandle);
	-(UIWindow *) presentationAnchorForAuthorizationController:(ASAuthorizationController *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		UIWindow * rv = { 0 };
		static callback_557_Microsoft_Maui_Authentication_AuthManager_GetPresentationAnchor_function callback_557_Microsoft_Maui_Authentication_AuthManager_GetPresentationAnchor;
		xamarin_registrar_dlsym ((void **) &callback_557_Microsoft_Maui_Authentication_AuthManager_GetPresentationAnchor, "Microsoft.Maui.Essentials", "callback_557_Microsoft_Maui_Authentication_AuthManager_GetPresentationAnchor", 0);
		rv = callback_557_Microsoft_Maui_Authentication_AuthManager_GetPresentationAnchor (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef void (*callback_558_Microsoft_Maui_Authentication_AuthManager_DidComplete_function) (id self, SEL sel, ASAuthorizationController * p0, ASAuthorization * p1, GCHandle* exception_gchandle);
	-(void) authorizationController:(ASAuthorizationController *)p0 didCompleteWithAuthorization:(ASAuthorization *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_558_Microsoft_Maui_Authentication_AuthManager_DidComplete_function callback_558_Microsoft_Maui_Authentication_AuthManager_DidComplete;
		xamarin_registrar_dlsym ((void **) &callback_558_Microsoft_Maui_Authentication_AuthManager_DidComplete, "Microsoft.Maui.Essentials", "callback_558_Microsoft_Maui_Authentication_AuthManager_DidComplete", 1);
		callback_558_Microsoft_Maui_Authentication_AuthManager_DidComplete (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_559_Microsoft_Maui_Authentication_AuthManager_DidComplete_function) (id self, SEL sel, ASAuthorizationController * p0, NSError * p1, GCHandle* exception_gchandle);
	-(void) authorizationController:(ASAuthorizationController *)p0 didCompleteWithError:(NSError *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_559_Microsoft_Maui_Authentication_AuthManager_DidComplete_function callback_559_Microsoft_Maui_Authentication_AuthManager_DidComplete;
		xamarin_registrar_dlsym ((void **) &callback_559_Microsoft_Maui_Authentication_AuthManager_DidComplete, "Microsoft.Maui.Essentials", "callback_559_Microsoft_Maui_Authentication_AuthManager_DidComplete", 2);
		callback_559_Microsoft_Maui_Authentication_AuthManager_DidComplete (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
@end

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_MacCatalyst__UIKit_UIAdaptivePresentationControllerDelegate {
}

	typedef id (*callback_3343_UIKit_UIAdaptivePresentationControllerDelegate__ctor_function) (id self, SEL sel, bool* call_super, GCHandle* exception_gchandle);
	-(id) init
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_3343_UIKit_UIAdaptivePresentationControllerDelegate__ctor_function callback_3343_UIKit_UIAdaptivePresentationControllerDelegate__ctor;
		xamarin_registrar_dlsym ((void **) &callback_3343_UIKit_UIAdaptivePresentationControllerDelegate__ctor, "Microsoft.MacCatalyst", "callback_3343_UIKit_UIAdaptivePresentationControllerDelegate__ctor", 103);
		rv = callback_3343_UIKit_UIAdaptivePresentationControllerDelegate__ctor (self, _cmd, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

@interface Microsoft_Maui_ApplicationModel_UIPresentationControllerDelegate : NSObject<UIAdaptivePresentationControllerDelegate> {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(void) presentationControllerDidDismiss:(UIPresentationController *)p0;
	-(BOOL) conformsToProtocol:(void *)p0;
@end

@implementation Microsoft_Maui_ApplicationModel_UIPresentationControllerDelegate {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	typedef void (*callback_573_Microsoft_Maui_ApplicationModel_UIPresentationControllerDelegate_DidDismiss_function) (id self, SEL sel, UIPresentationController * p0, GCHandle* exception_gchandle);
	-(void) presentationControllerDidDismiss:(UIPresentationController *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_573_Microsoft_Maui_ApplicationModel_UIPresentationControllerDelegate_DidDismiss_function callback_573_Microsoft_Maui_ApplicationModel_UIPresentationControllerDelegate_DidDismiss;
		xamarin_registrar_dlsym ((void **) &callback_573_Microsoft_Maui_ApplicationModel_UIPresentationControllerDelegate_DidDismiss, "Microsoft.Maui.Essentials", "callback_573_Microsoft_Maui_ApplicationModel_UIPresentationControllerDelegate_DidDismiss", 16);
		callback_573_Microsoft_Maui_ApplicationModel_UIPresentationControllerDelegate_DidDismiss (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
@end

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_MacCatalyst__UIKit_UIActivityItemSource {
}

	typedef id (*callback_3342_UIKit_UIActivityItemSource__ctor_function) (id self, SEL sel, bool* call_super, GCHandle* exception_gchandle);
	-(id) init
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_3342_UIKit_UIActivityItemSource__ctor_function callback_3342_UIKit_UIActivityItemSource__ctor;
		xamarin_registrar_dlsym ((void **) &callback_3342_UIKit_UIActivityItemSource__ctor, "Microsoft.MacCatalyst", "callback_3342_UIKit_UIActivityItemSource__ctor", 102);
		rv = callback_3342_UIKit_UIActivityItemSource__ctor (self, _cmd, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

@interface Microsoft_Maui_ApplicationModel_DataTransfer_ShareActivityItemSource : NSObject<UIActivityItemSource> {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(NSObject *) activityViewController:(UIActivityViewController *)p0 itemForActivityType:(NSString *)p1;
	-(NSObject *) activityViewControllerPlaceholderItem:(UIActivityViewController *)p0;
	-(LPLinkMetadata *) activityViewControllerLinkMetadata:(UIActivityViewController *)p0;
	-(BOOL) conformsToProtocol:(void *)p0;
@end

@implementation Microsoft_Maui_ApplicationModel_DataTransfer_ShareActivityItemSource {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	typedef NSObject * (*callback_577_Microsoft_Maui_ApplicationModel_DataTransfer_ShareActivityItemSource_GetItemForActivity_function) (id self, SEL sel, UIActivityViewController * p0, NSString * p1, GCHandle* exception_gchandle);
	-(NSObject *) activityViewController:(UIActivityViewController *)p0 itemForActivityType:(NSString *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		NSObject * rv = { 0 };
		static callback_577_Microsoft_Maui_ApplicationModel_DataTransfer_ShareActivityItemSource_GetItemForActivity_function callback_577_Microsoft_Maui_ApplicationModel_DataTransfer_ShareActivityItemSource_GetItemForActivity;
		xamarin_registrar_dlsym ((void **) &callback_577_Microsoft_Maui_ApplicationModel_DataTransfer_ShareActivityItemSource_GetItemForActivity, "Microsoft.Maui.Essentials", "callback_577_Microsoft_Maui_ApplicationModel_DataTransfer_ShareActivityItemSource_GetItemForActivity", 20);
		rv = callback_577_Microsoft_Maui_ApplicationModel_DataTransfer_ShareActivityItemSource_GetItemForActivity (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef NSObject * (*callback_578_Microsoft_Maui_ApplicationModel_DataTransfer_ShareActivityItemSource_GetPlaceholderData_function) (id self, SEL sel, UIActivityViewController * p0, GCHandle* exception_gchandle);
	-(NSObject *) activityViewControllerPlaceholderItem:(UIActivityViewController *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		NSObject * rv = { 0 };
		static callback_578_Microsoft_Maui_ApplicationModel_DataTransfer_ShareActivityItemSource_GetPlaceholderData_function callback_578_Microsoft_Maui_ApplicationModel_DataTransfer_ShareActivityItemSource_GetPlaceholderData;
		xamarin_registrar_dlsym ((void **) &callback_578_Microsoft_Maui_ApplicationModel_DataTransfer_ShareActivityItemSource_GetPlaceholderData, "Microsoft.Maui.Essentials", "callback_578_Microsoft_Maui_ApplicationModel_DataTransfer_ShareActivityItemSource_GetPlaceholderData", 21);
		rv = callback_578_Microsoft_Maui_ApplicationModel_DataTransfer_ShareActivityItemSource_GetPlaceholderData (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef LPLinkMetadata * (*callback_579_Microsoft_Maui_ApplicationModel_DataTransfer_ShareActivityItemSource_GetLinkMetadata_function) (id self, SEL sel, UIActivityViewController * p0, GCHandle* exception_gchandle);
	-(LPLinkMetadata *) activityViewControllerLinkMetadata:(UIActivityViewController *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		LPLinkMetadata * rv = { 0 };
		static callback_579_Microsoft_Maui_ApplicationModel_DataTransfer_ShareActivityItemSource_GetLinkMetadata_function callback_579_Microsoft_Maui_ApplicationModel_DataTransfer_ShareActivityItemSource_GetLinkMetadata;
		xamarin_registrar_dlsym ((void **) &callback_579_Microsoft_Maui_ApplicationModel_DataTransfer_ShareActivityItemSource_GetLinkMetadata, "Microsoft.Maui.Essentials", "callback_579_Microsoft_Maui_ApplicationModel_DataTransfer_ShareActivityItemSource_GetLinkMetadata", 22);
		rv = callback_579_Microsoft_Maui_ApplicationModel_DataTransfer_ShareActivityItemSource_GetLinkMetadata (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
@end

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_MacCatalyst__CoreLocation_CLLocationManagerDelegate {
}

	typedef id (*callback_1034_CoreLocation_CLLocationManagerDelegate__ctor_function) (id self, SEL sel, bool* call_super, GCHandle* exception_gchandle);
	-(id) init
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_1034_CoreLocation_CLLocationManagerDelegate__ctor_function callback_1034_CoreLocation_CLLocationManagerDelegate__ctor;
		xamarin_registrar_dlsym ((void **) &callback_1034_CoreLocation_CLLocationManagerDelegate__ctor, "Microsoft.MacCatalyst", "callback_1034_CoreLocation_CLLocationManagerDelegate__ctor", 16);
		rv = callback_1034_CoreLocation_CLLocationManagerDelegate__ctor (self, _cmd, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

@interface Microsoft_Maui_Devices_Sensors_SingleLocationListener : NSObject<CLLocationManagerDelegate> {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(void) locationManager:(CLLocationManager *)p0 didUpdateLocations:(NSArray *)p1;
	-(BOOL) locationManagerShouldDisplayHeadingCalibration:(CLLocationManager *)p0;
	-(BOOL) conformsToProtocol:(void *)p0;
	-(id) init;
@end

@implementation Microsoft_Maui_Devices_Sensors_SingleLocationListener {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	typedef void (*callback_580_Microsoft_Maui_Devices_Sensors_SingleLocationListener_LocationsUpdated_function) (id self, SEL sel, CLLocationManager * p0, NSArray * p1, GCHandle* exception_gchandle);
	-(void) locationManager:(CLLocationManager *)p0 didUpdateLocations:(NSArray *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_580_Microsoft_Maui_Devices_Sensors_SingleLocationListener_LocationsUpdated_function callback_580_Microsoft_Maui_Devices_Sensors_SingleLocationListener_LocationsUpdated;
		xamarin_registrar_dlsym ((void **) &callback_580_Microsoft_Maui_Devices_Sensors_SingleLocationListener_LocationsUpdated, "Microsoft.Maui.Essentials", "callback_580_Microsoft_Maui_Devices_Sensors_SingleLocationListener_LocationsUpdated", 23);
		callback_580_Microsoft_Maui_Devices_Sensors_SingleLocationListener_LocationsUpdated (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef BOOL (*callback_581_Microsoft_Maui_Devices_Sensors_SingleLocationListener_ShouldDisplayHeadingCalibration_function) (id self, SEL sel, CLLocationManager * p0, GCHandle* exception_gchandle);
	-(BOOL) locationManagerShouldDisplayHeadingCalibration:(CLLocationManager *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		BOOL rv = { 0 };
		static callback_581_Microsoft_Maui_Devices_Sensors_SingleLocationListener_ShouldDisplayHeadingCalibration_function callback_581_Microsoft_Maui_Devices_Sensors_SingleLocationListener_ShouldDisplayHeadingCalibration;
		xamarin_registrar_dlsym ((void **) &callback_581_Microsoft_Maui_Devices_Sensors_SingleLocationListener_ShouldDisplayHeadingCalibration, "Microsoft.Maui.Essentials", "callback_581_Microsoft_Maui_Devices_Sensors_SingleLocationListener_ShouldDisplayHeadingCalibration", 24);
		rv = callback_581_Microsoft_Maui_Devices_Sensors_SingleLocationListener_ShouldDisplayHeadingCalibration (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef id (*callback_582_Microsoft_Maui_Devices_Sensors_SingleLocationListener__ctor_function) (id self, SEL sel, bool* call_super, GCHandle* exception_gchandle);
	-(id) init
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_582_Microsoft_Maui_Devices_Sensors_SingleLocationListener__ctor_function callback_582_Microsoft_Maui_Devices_Sensors_SingleLocationListener__ctor;
		xamarin_registrar_dlsym ((void **) &callback_582_Microsoft_Maui_Devices_Sensors_SingleLocationListener__ctor, "Microsoft.Maui.Essentials", "callback_582_Microsoft_Maui_Devices_Sensors_SingleLocationListener__ctor", 25);
		rv = callback_582_Microsoft_Maui_Devices_Sensors_SingleLocationListener__ctor (self, _cmd, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@interface Microsoft_Maui_Devices_Sensors_ContinuousLocationListener : NSObject<CLLocationManagerDelegate> {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(void) locationManager:(CLLocationManager *)p0 didUpdateLocations:(NSArray *)p1;
	-(void) locationManager:(CLLocationManager *)p0 didFailWithError:(NSError *)p1;
	-(void) locationManager:(CLLocationManager *)p0 didChangeAuthorizationStatus:(unsigned int)p1;
	-(BOOL) locationManagerShouldDisplayHeadingCalibration:(CLLocationManager *)p0;
	-(BOOL) conformsToProtocol:(void *)p0;
	-(id) init;
@end

@implementation Microsoft_Maui_Devices_Sensors_ContinuousLocationListener {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	typedef void (*callback_583_Microsoft_Maui_Devices_Sensors_ContinuousLocationListener_LocationsUpdated_function) (id self, SEL sel, CLLocationManager * p0, NSArray * p1, GCHandle* exception_gchandle);
	-(void) locationManager:(CLLocationManager *)p0 didUpdateLocations:(NSArray *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_583_Microsoft_Maui_Devices_Sensors_ContinuousLocationListener_LocationsUpdated_function callback_583_Microsoft_Maui_Devices_Sensors_ContinuousLocationListener_LocationsUpdated;
		xamarin_registrar_dlsym ((void **) &callback_583_Microsoft_Maui_Devices_Sensors_ContinuousLocationListener_LocationsUpdated, "Microsoft.Maui.Essentials", "callback_583_Microsoft_Maui_Devices_Sensors_ContinuousLocationListener_LocationsUpdated", 26);
		callback_583_Microsoft_Maui_Devices_Sensors_ContinuousLocationListener_LocationsUpdated (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_584_Microsoft_Maui_Devices_Sensors_ContinuousLocationListener_Failed_function) (id self, SEL sel, CLLocationManager * p0, NSError * p1, GCHandle* exception_gchandle);
	-(void) locationManager:(CLLocationManager *)p0 didFailWithError:(NSError *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_584_Microsoft_Maui_Devices_Sensors_ContinuousLocationListener_Failed_function callback_584_Microsoft_Maui_Devices_Sensors_ContinuousLocationListener_Failed;
		xamarin_registrar_dlsym ((void **) &callback_584_Microsoft_Maui_Devices_Sensors_ContinuousLocationListener_Failed, "Microsoft.Maui.Essentials", "callback_584_Microsoft_Maui_Devices_Sensors_ContinuousLocationListener_Failed", 27);
		callback_584_Microsoft_Maui_Devices_Sensors_ContinuousLocationListener_Failed (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_585_Microsoft_Maui_Devices_Sensors_ContinuousLocationListener_AuthorizationChanged_function) (id self, SEL sel, CLLocationManager * p0, unsigned int p1, GCHandle* exception_gchandle);
	-(void) locationManager:(CLLocationManager *)p0 didChangeAuthorizationStatus:(unsigned int)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_585_Microsoft_Maui_Devices_Sensors_ContinuousLocationListener_AuthorizationChanged_function callback_585_Microsoft_Maui_Devices_Sensors_ContinuousLocationListener_AuthorizationChanged;
		xamarin_registrar_dlsym ((void **) &callback_585_Microsoft_Maui_Devices_Sensors_ContinuousLocationListener_AuthorizationChanged, "Microsoft.Maui.Essentials", "callback_585_Microsoft_Maui_Devices_Sensors_ContinuousLocationListener_AuthorizationChanged", 28);
		callback_585_Microsoft_Maui_Devices_Sensors_ContinuousLocationListener_AuthorizationChanged (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef BOOL (*callback_586_Microsoft_Maui_Devices_Sensors_ContinuousLocationListener_ShouldDisplayHeadingCalibration_function) (id self, SEL sel, CLLocationManager * p0, GCHandle* exception_gchandle);
	-(BOOL) locationManagerShouldDisplayHeadingCalibration:(CLLocationManager *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		BOOL rv = { 0 };
		static callback_586_Microsoft_Maui_Devices_Sensors_ContinuousLocationListener_ShouldDisplayHeadingCalibration_function callback_586_Microsoft_Maui_Devices_Sensors_ContinuousLocationListener_ShouldDisplayHeadingCalibration;
		xamarin_registrar_dlsym ((void **) &callback_586_Microsoft_Maui_Devices_Sensors_ContinuousLocationListener_ShouldDisplayHeadingCalibration, "Microsoft.Maui.Essentials", "callback_586_Microsoft_Maui_Devices_Sensors_ContinuousLocationListener_ShouldDisplayHeadingCalibration", 29);
		rv = callback_586_Microsoft_Maui_Devices_Sensors_ContinuousLocationListener_ShouldDisplayHeadingCalibration (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef id (*callback_587_Microsoft_Maui_Devices_Sensors_ContinuousLocationListener__ctor_function) (id self, SEL sel, bool* call_super, GCHandle* exception_gchandle);
	-(id) init
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_587_Microsoft_Maui_Devices_Sensors_ContinuousLocationListener__ctor_function callback_587_Microsoft_Maui_Devices_Sensors_ContinuousLocationListener__ctor;
		xamarin_registrar_dlsym ((void **) &callback_587_Microsoft_Maui_Devices_Sensors_ContinuousLocationListener__ctor, "Microsoft.Maui.Essentials", "callback_587_Microsoft_Maui_Devices_Sensors_ContinuousLocationListener__ctor", 30);
		rv = callback_587_Microsoft_Maui_Devices_Sensors_ContinuousLocationListener__ctor (self, _cmd, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_MacCatalyst__SafariServices_SFSafariViewControllerDelegate {
}

	typedef id (*callback_596_SafariServices_SFSafariViewControllerDelegate__ctor_function) (id self, SEL sel, bool* call_super, GCHandle* exception_gchandle);
	-(id) init
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_596_SafariServices_SFSafariViewControllerDelegate__ctor_function callback_596_SafariServices_SFSafariViewControllerDelegate__ctor;
		xamarin_registrar_dlsym ((void **) &callback_596_SafariServices_SFSafariViewControllerDelegate__ctor, "Microsoft.MacCatalyst", "callback_596_SafariServices_SFSafariViewControllerDelegate__ctor", 0);
		rv = callback_596_SafariServices_SFSafariViewControllerDelegate__ctor (self, _cmd, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

@interface Microsoft_Maui_Authentication_WebAuthenticatorImplementation_NativeSFSafariViewControllerDelegate : NSObject<SFSafariViewControllerDelegate> {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(void) safariViewControllerDidFinish:(SFSafariViewController *)p0;
	-(BOOL) conformsToProtocol:(void *)p0;
	-(id) init;
@end

@implementation Microsoft_Maui_Authentication_WebAuthenticatorImplementation_NativeSFSafariViewControllerDelegate {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	typedef void (*callback_560_Microsoft_Maui_Authentication_WebAuthenticatorImplementation_NativeSFSafariViewControllerDelegate_DidFinish_function) (id self, SEL sel, SFSafariViewController * p0, GCHandle* exception_gchandle);
	-(void) safariViewControllerDidFinish:(SFSafariViewController *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_560_Microsoft_Maui_Authentication_WebAuthenticatorImplementation_NativeSFSafariViewControllerDelegate_DidFinish_function callback_560_Microsoft_Maui_Authentication_WebAuthenticatorImplementation_NativeSFSafariViewControllerDelegate_DidFinish;
		xamarin_registrar_dlsym ((void **) &callback_560_Microsoft_Maui_Authentication_WebAuthenticatorImplementation_NativeSFSafariViewControllerDelegate_DidFinish, "Microsoft.Maui.Essentials", "callback_560_Microsoft_Maui_Authentication_WebAuthenticatorImplementation_NativeSFSafariViewControllerDelegate_DidFinish", 3);
		callback_560_Microsoft_Maui_Authentication_WebAuthenticatorImplementation_NativeSFSafariViewControllerDelegate_DidFinish (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef id (*callback_561_Microsoft_Maui_Authentication_WebAuthenticatorImplementation_NativeSFSafariViewControllerDelegate__ctor_function) (id self, SEL sel, bool* call_super, GCHandle* exception_gchandle);
	-(id) init
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_561_Microsoft_Maui_Authentication_WebAuthenticatorImplementation_NativeSFSafariViewControllerDelegate__ctor_function callback_561_Microsoft_Maui_Authentication_WebAuthenticatorImplementation_NativeSFSafariViewControllerDelegate__ctor;
		xamarin_registrar_dlsym ((void **) &callback_561_Microsoft_Maui_Authentication_WebAuthenticatorImplementation_NativeSFSafariViewControllerDelegate__ctor, "Microsoft.Maui.Essentials", "callback_561_Microsoft_Maui_Authentication_WebAuthenticatorImplementation_NativeSFSafariViewControllerDelegate__ctor", 4);
		rv = callback_561_Microsoft_Maui_Authentication_WebAuthenticatorImplementation_NativeSFSafariViewControllerDelegate__ctor (self, _cmd, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@interface Microsoft_Maui_Authentication_WebAuthenticatorImplementation_ContextProvider : NSObject<ASWebAuthenticationPresentationContextProviding> {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(UIWindow *) presentationAnchorForWebAuthenticationSession:(ASWebAuthenticationSession *)p0;
	-(BOOL) conformsToProtocol:(void *)p0;
@end

@implementation Microsoft_Maui_Authentication_WebAuthenticatorImplementation_ContextProvider {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	typedef UIWindow * (*callback_562_Microsoft_Maui_Authentication_WebAuthenticatorImplementation_ContextProvider_GetPresentationAnchor_function) (id self, SEL sel, ASWebAuthenticationSession * p0, GCHandle* exception_gchandle);
	-(UIWindow *) presentationAnchorForWebAuthenticationSession:(ASWebAuthenticationSession *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		UIWindow * rv = { 0 };
		static callback_562_Microsoft_Maui_Authentication_WebAuthenticatorImplementation_ContextProvider_GetPresentationAnchor_function callback_562_Microsoft_Maui_Authentication_WebAuthenticatorImplementation_ContextProvider_GetPresentationAnchor;
		xamarin_registrar_dlsym ((void **) &callback_562_Microsoft_Maui_Authentication_WebAuthenticatorImplementation_ContextProvider_GetPresentationAnchor, "Microsoft.Maui.Essentials", "callback_562_Microsoft_Maui_Authentication_WebAuthenticatorImplementation_ContextProvider_GetPresentationAnchor", 5);
		rv = callback_562_Microsoft_Maui_Authentication_WebAuthenticatorImplementation_ContextProvider_GetPresentationAnchor (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
@end

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_MacCatalyst__UIKit_UIImagePickerControllerDelegate {
}

	typedef id (*callback_3404_UIKit_UIImagePickerControllerDelegate__ctor_function) (id self, SEL sel, bool* call_super, GCHandle* exception_gchandle);
	-(id) init
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_3404_UIKit_UIImagePickerControllerDelegate__ctor_function callback_3404_UIKit_UIImagePickerControllerDelegate__ctor;
		xamarin_registrar_dlsym ((void **) &callback_3404_UIKit_UIImagePickerControllerDelegate__ctor, "Microsoft.MacCatalyst", "callback_3404_UIKit_UIImagePickerControllerDelegate__ctor", 108);
		rv = callback_3404_UIKit_UIImagePickerControllerDelegate__ctor (self, _cmd, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

@interface Microsoft_Maui_Media_MediaPickerImplementation_PhotoPickerDelegate : NSObject<UIImagePickerControllerDelegate, UINavigationControllerDelegate> {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(void) imagePickerController:(UIImagePickerController *)p0 didFinishPickingMediaWithInfo:(NSDictionary *)p1;
	-(void) imagePickerControllerDidCancel:(UIImagePickerController *)p0;
	-(BOOL) conformsToProtocol:(void *)p0;
	-(id) init;
@end

@implementation Microsoft_Maui_Media_MediaPickerImplementation_PhotoPickerDelegate {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	typedef void (*callback_563_Microsoft_Maui_Media_MediaPickerImplementation_PhotoPickerDelegate_FinishedPickingMedia_function) (id self, SEL sel, UIImagePickerController * p0, NSDictionary * p1, GCHandle* exception_gchandle);
	-(void) imagePickerController:(UIImagePickerController *)p0 didFinishPickingMediaWithInfo:(NSDictionary *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_563_Microsoft_Maui_Media_MediaPickerImplementation_PhotoPickerDelegate_FinishedPickingMedia_function callback_563_Microsoft_Maui_Media_MediaPickerImplementation_PhotoPickerDelegate_FinishedPickingMedia;
		xamarin_registrar_dlsym ((void **) &callback_563_Microsoft_Maui_Media_MediaPickerImplementation_PhotoPickerDelegate_FinishedPickingMedia, "Microsoft.Maui.Essentials", "callback_563_Microsoft_Maui_Media_MediaPickerImplementation_PhotoPickerDelegate_FinishedPickingMedia", 6);
		callback_563_Microsoft_Maui_Media_MediaPickerImplementation_PhotoPickerDelegate_FinishedPickingMedia (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_564_Microsoft_Maui_Media_MediaPickerImplementation_PhotoPickerDelegate_Canceled_function) (id self, SEL sel, UIImagePickerController * p0, GCHandle* exception_gchandle);
	-(void) imagePickerControllerDidCancel:(UIImagePickerController *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_564_Microsoft_Maui_Media_MediaPickerImplementation_PhotoPickerDelegate_Canceled_function callback_564_Microsoft_Maui_Media_MediaPickerImplementation_PhotoPickerDelegate_Canceled;
		xamarin_registrar_dlsym ((void **) &callback_564_Microsoft_Maui_Media_MediaPickerImplementation_PhotoPickerDelegate_Canceled, "Microsoft.Maui.Essentials", "callback_564_Microsoft_Maui_Media_MediaPickerImplementation_PhotoPickerDelegate_Canceled", 7);
		callback_564_Microsoft_Maui_Media_MediaPickerImplementation_PhotoPickerDelegate_Canceled (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef id (*callback_565_Microsoft_Maui_Media_MediaPickerImplementation_PhotoPickerDelegate__ctor_function) (id self, SEL sel, bool* call_super, GCHandle* exception_gchandle);
	-(id) init
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_565_Microsoft_Maui_Media_MediaPickerImplementation_PhotoPickerDelegate__ctor_function callback_565_Microsoft_Maui_Media_MediaPickerImplementation_PhotoPickerDelegate__ctor;
		xamarin_registrar_dlsym ((void **) &callback_565_Microsoft_Maui_Media_MediaPickerImplementation_PhotoPickerDelegate__ctor, "Microsoft.Maui.Essentials", "callback_565_Microsoft_Maui_Media_MediaPickerImplementation_PhotoPickerDelegate__ctor", 8);
		rv = callback_565_Microsoft_Maui_Media_MediaPickerImplementation_PhotoPickerDelegate__ctor (self, _cmd, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_MacCatalyst__UIKit_UIDocumentPickerDelegate {
}

	typedef id (*callback_3391_UIKit_UIDocumentPickerDelegate__ctor_function) (id self, SEL sel, bool* call_super, GCHandle* exception_gchandle);
	-(id) init
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_3391_UIKit_UIDocumentPickerDelegate__ctor_function callback_3391_UIKit_UIDocumentPickerDelegate__ctor;
		xamarin_registrar_dlsym ((void **) &callback_3391_UIKit_UIDocumentPickerDelegate__ctor, "Microsoft.MacCatalyst", "callback_3391_UIKit_UIDocumentPickerDelegate__ctor", 106);
		rv = callback_3391_UIKit_UIDocumentPickerDelegate__ctor (self, _cmd, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

@interface Microsoft_Maui_Storage_FilePickerImplementation_PickerDelegate : NSObject<UIDocumentPickerDelegate> {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(void) documentPickerWasCancelled:(UIDocumentPickerViewController *)p0;
	-(void) documentPicker:(UIDocumentPickerViewController *)p0 didPickDocumentsAtURLs:(NSArray *)p1;
	-(void) documentPicker:(UIDocumentPickerViewController *)p0 didPickDocumentAtURL:(NSURL *)p1;
	-(BOOL) conformsToProtocol:(void *)p0;
	-(id) init;
@end

@implementation Microsoft_Maui_Storage_FilePickerImplementation_PickerDelegate {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	typedef void (*callback_566_Microsoft_Maui_Storage_FilePickerImplementation_PickerDelegate_WasCancelled_function) (id self, SEL sel, UIDocumentPickerViewController * p0, GCHandle* exception_gchandle);
	-(void) documentPickerWasCancelled:(UIDocumentPickerViewController *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_566_Microsoft_Maui_Storage_FilePickerImplementation_PickerDelegate_WasCancelled_function callback_566_Microsoft_Maui_Storage_FilePickerImplementation_PickerDelegate_WasCancelled;
		xamarin_registrar_dlsym ((void **) &callback_566_Microsoft_Maui_Storage_FilePickerImplementation_PickerDelegate_WasCancelled, "Microsoft.Maui.Essentials", "callback_566_Microsoft_Maui_Storage_FilePickerImplementation_PickerDelegate_WasCancelled", 9);
		callback_566_Microsoft_Maui_Storage_FilePickerImplementation_PickerDelegate_WasCancelled (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_567_Microsoft_Maui_Storage_FilePickerImplementation_PickerDelegate_DidPickDocument_function) (id self, SEL sel, UIDocumentPickerViewController * p0, NSArray * p1, GCHandle* exception_gchandle);
	-(void) documentPicker:(UIDocumentPickerViewController *)p0 didPickDocumentsAtURLs:(NSArray *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_567_Microsoft_Maui_Storage_FilePickerImplementation_PickerDelegate_DidPickDocument_function callback_567_Microsoft_Maui_Storage_FilePickerImplementation_PickerDelegate_DidPickDocument;
		xamarin_registrar_dlsym ((void **) &callback_567_Microsoft_Maui_Storage_FilePickerImplementation_PickerDelegate_DidPickDocument, "Microsoft.Maui.Essentials", "callback_567_Microsoft_Maui_Storage_FilePickerImplementation_PickerDelegate_DidPickDocument", 10);
		callback_567_Microsoft_Maui_Storage_FilePickerImplementation_PickerDelegate_DidPickDocument (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_568_Microsoft_Maui_Storage_FilePickerImplementation_PickerDelegate_DidPickDocument_function) (id self, SEL sel, UIDocumentPickerViewController * p0, NSURL * p1, GCHandle* exception_gchandle);
	-(void) documentPicker:(UIDocumentPickerViewController *)p0 didPickDocumentAtURL:(NSURL *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_568_Microsoft_Maui_Storage_FilePickerImplementation_PickerDelegate_DidPickDocument_function callback_568_Microsoft_Maui_Storage_FilePickerImplementation_PickerDelegate_DidPickDocument;
		xamarin_registrar_dlsym ((void **) &callback_568_Microsoft_Maui_Storage_FilePickerImplementation_PickerDelegate_DidPickDocument, "Microsoft.Maui.Essentials", "callback_568_Microsoft_Maui_Storage_FilePickerImplementation_PickerDelegate_DidPickDocument", 11);
		callback_568_Microsoft_Maui_Storage_FilePickerImplementation_PickerDelegate_DidPickDocument (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef id (*callback_569_Microsoft_Maui_Storage_FilePickerImplementation_PickerDelegate__ctor_function) (id self, SEL sel, bool* call_super, GCHandle* exception_gchandle);
	-(id) init
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_569_Microsoft_Maui_Storage_FilePickerImplementation_PickerDelegate__ctor_function callback_569_Microsoft_Maui_Storage_FilePickerImplementation_PickerDelegate__ctor;
		xamarin_registrar_dlsym ((void **) &callback_569_Microsoft_Maui_Storage_FilePickerImplementation_PickerDelegate__ctor, "Microsoft.Maui.Essentials", "callback_569_Microsoft_Maui_Storage_FilePickerImplementation_PickerDelegate__ctor", 12);
		rv = callback_569_Microsoft_Maui_Storage_FilePickerImplementation_PickerDelegate__ctor (self, _cmd, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_MacCatalyst__ContactsUI_CNContactPickerDelegate {
}

	typedef id (*callback_636_ContactsUI_CNContactPickerDelegate__ctor_function) (id self, SEL sel, bool* call_super, GCHandle* exception_gchandle);
	-(id) init
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_636_ContactsUI_CNContactPickerDelegate__ctor_function callback_636_ContactsUI_CNContactPickerDelegate__ctor;
		xamarin_registrar_dlsym ((void **) &callback_636_ContactsUI_CNContactPickerDelegate__ctor, "Microsoft.MacCatalyst", "callback_636_ContactsUI_CNContactPickerDelegate__ctor", 1);
		rv = callback_636_ContactsUI_CNContactPickerDelegate__ctor (self, _cmd, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

@interface Microsoft_Maui_ApplicationModel_Communication_ContactsImplementation_ContactPickerDelegate : NSObject<CNContactPickerDelegate> {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(void) contactPickerDidCancel:(CNContactPickerViewController *)p0;
	-(void) contactPicker:(CNContactPickerViewController *)p0 didSelectContact:(CNContact *)p1;
	-(void) contactPicker:(CNContactPickerViewController *)p0 didSelectContactProperty:(CNContactProperty *)p1;
	-(BOOL) conformsToProtocol:(void *)p0;
@end

@implementation Microsoft_Maui_ApplicationModel_Communication_ContactsImplementation_ContactPickerDelegate {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	typedef void (*callback_574_Microsoft_Maui_ApplicationModel_Communication_ContactsImplementation_ContactPickerDelegate_ContactPickerDidCancel_function) (id self, SEL sel, CNContactPickerViewController * p0, GCHandle* exception_gchandle);
	-(void) contactPickerDidCancel:(CNContactPickerViewController *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_574_Microsoft_Maui_ApplicationModel_Communication_ContactsImplementation_ContactPickerDelegate_ContactPickerDidCancel_function callback_574_Microsoft_Maui_ApplicationModel_Communication_ContactsImplementation_ContactPickerDelegate_ContactPickerDidCancel;
		xamarin_registrar_dlsym ((void **) &callback_574_Microsoft_Maui_ApplicationModel_Communication_ContactsImplementation_ContactPickerDelegate_ContactPickerDidCancel, "Microsoft.Maui.Essentials", "callback_574_Microsoft_Maui_ApplicationModel_Communication_ContactsImplementation_ContactPickerDelegate_ContactPickerDidCancel", 17);
		callback_574_Microsoft_Maui_ApplicationModel_Communication_ContactsImplementation_ContactPickerDelegate_ContactPickerDidCancel (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_575_Microsoft_Maui_ApplicationModel_Communication_ContactsImplementation_ContactPickerDelegate_DidSelectContact_function) (id self, SEL sel, CNContactPickerViewController * p0, CNContact * p1, GCHandle* exception_gchandle);
	-(void) contactPicker:(CNContactPickerViewController *)p0 didSelectContact:(CNContact *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_575_Microsoft_Maui_ApplicationModel_Communication_ContactsImplementation_ContactPickerDelegate_DidSelectContact_function callback_575_Microsoft_Maui_ApplicationModel_Communication_ContactsImplementation_ContactPickerDelegate_DidSelectContact;
		xamarin_registrar_dlsym ((void **) &callback_575_Microsoft_Maui_ApplicationModel_Communication_ContactsImplementation_ContactPickerDelegate_DidSelectContact, "Microsoft.Maui.Essentials", "callback_575_Microsoft_Maui_ApplicationModel_Communication_ContactsImplementation_ContactPickerDelegate_DidSelectContact", 18);
		callback_575_Microsoft_Maui_ApplicationModel_Communication_ContactsImplementation_ContactPickerDelegate_DidSelectContact (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_576_Microsoft_Maui_ApplicationModel_Communication_ContactsImplementation_ContactPickerDelegate_DidSelectContactProperty_function) (id self, SEL sel, CNContactPickerViewController * p0, CNContactProperty * p1, GCHandle* exception_gchandle);
	-(void) contactPicker:(CNContactPickerViewController *)p0 didSelectContactProperty:(CNContactProperty *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_576_Microsoft_Maui_ApplicationModel_Communication_ContactsImplementation_ContactPickerDelegate_DidSelectContactProperty_function callback_576_Microsoft_Maui_ApplicationModel_Communication_ContactsImplementation_ContactPickerDelegate_DidSelectContactProperty;
		xamarin_registrar_dlsym ((void **) &callback_576_Microsoft_Maui_ApplicationModel_Communication_ContactsImplementation_ContactPickerDelegate_DidSelectContactProperty, "Microsoft.Maui.Essentials", "callback_576_Microsoft_Maui_ApplicationModel_Communication_ContactsImplementation_ContactPickerDelegate_DidSelectContactProperty", 19);
		callback_576_Microsoft_Maui_ApplicationModel_Communication_ContactsImplementation_ContactPickerDelegate_DidSelectContactProperty (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
@end

@interface Microsoft_Maui_ApplicationModel_Permissions_LocationWhenInUse_ManagerDelegate : NSObject<CLLocationManagerDelegate> {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(void) locationManager:(CLLocationManager *)p0 didChangeAuthorizationStatus:(unsigned int)p1;
	-(void) locationManagerDidChangeAuthorization:(CLLocationManager *)p0;
	-(BOOL) conformsToProtocol:(void *)p0;
	-(id) init;
@end

@implementation Microsoft_Maui_ApplicationModel_Permissions_LocationWhenInUse_ManagerDelegate {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	typedef void (*callback_570_Microsoft_Maui_ApplicationModel_Permissions_LocationWhenInUse_ManagerDelegate_AuthorizationChanged_function) (id self, SEL sel, CLLocationManager * p0, unsigned int p1, GCHandle* exception_gchandle);
	-(void) locationManager:(CLLocationManager *)p0 didChangeAuthorizationStatus:(unsigned int)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_570_Microsoft_Maui_ApplicationModel_Permissions_LocationWhenInUse_ManagerDelegate_AuthorizationChanged_function callback_570_Microsoft_Maui_ApplicationModel_Permissions_LocationWhenInUse_ManagerDelegate_AuthorizationChanged;
		xamarin_registrar_dlsym ((void **) &callback_570_Microsoft_Maui_ApplicationModel_Permissions_LocationWhenInUse_ManagerDelegate_AuthorizationChanged, "Microsoft.Maui.Essentials", "callback_570_Microsoft_Maui_ApplicationModel_Permissions_LocationWhenInUse_ManagerDelegate_AuthorizationChanged", 13);
		callback_570_Microsoft_Maui_ApplicationModel_Permissions_LocationWhenInUse_ManagerDelegate_AuthorizationChanged (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_571_Microsoft_Maui_ApplicationModel_Permissions_LocationWhenInUse_ManagerDelegate_DidChangeAuthorization_function) (id self, SEL sel, CLLocationManager * p0, GCHandle* exception_gchandle);
	-(void) locationManagerDidChangeAuthorization:(CLLocationManager *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_571_Microsoft_Maui_ApplicationModel_Permissions_LocationWhenInUse_ManagerDelegate_DidChangeAuthorization_function callback_571_Microsoft_Maui_ApplicationModel_Permissions_LocationWhenInUse_ManagerDelegate_DidChangeAuthorization;
		xamarin_registrar_dlsym ((void **) &callback_571_Microsoft_Maui_ApplicationModel_Permissions_LocationWhenInUse_ManagerDelegate_DidChangeAuthorization, "Microsoft.Maui.Essentials", "callback_571_Microsoft_Maui_ApplicationModel_Permissions_LocationWhenInUse_ManagerDelegate_DidChangeAuthorization", 14);
		callback_571_Microsoft_Maui_ApplicationModel_Permissions_LocationWhenInUse_ManagerDelegate_DidChangeAuthorization (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef id (*callback_572_Microsoft_Maui_ApplicationModel_Permissions_LocationWhenInUse_ManagerDelegate__ctor_function) (id self, SEL sel, bool* call_super, GCHandle* exception_gchandle);
	-(id) init
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_572_Microsoft_Maui_ApplicationModel_Permissions_LocationWhenInUse_ManagerDelegate__ctor_function callback_572_Microsoft_Maui_ApplicationModel_Permissions_LocationWhenInUse_ManagerDelegate__ctor;
		xamarin_registrar_dlsym ((void **) &callback_572_Microsoft_Maui_ApplicationModel_Permissions_LocationWhenInUse_ManagerDelegate__ctor, "Microsoft.Maui.Essentials", "callback_572_Microsoft_Maui_ApplicationModel_Permissions_LocationWhenInUse_ManagerDelegate__ctor", 15);
		rv = callback_572_Microsoft_Maui_ApplicationModel_Permissions_LocationWhenInUse_ManagerDelegate__ctor (self, _cmd, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@interface Foundation_NSDispatcher : NSObject {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(void) xamarinApplySelector;
	-(BOOL) conformsToProtocol:(void *)p0;
	-(id) init;
@end

@implementation Foundation_NSDispatcher {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	typedef void (*callback_919_Foundation_NSDispatcher_Apply_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) xamarinApplySelector
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_919_Foundation_NSDispatcher_Apply_function callback_919_Foundation_NSDispatcher_Apply;
		xamarin_registrar_dlsym ((void **) &callback_919_Foundation_NSDispatcher_Apply, "Microsoft.MacCatalyst", "callback_919_Foundation_NSDispatcher_Apply", 4);
		callback_919_Foundation_NSDispatcher_Apply (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef id (*callback_918_Foundation_NSDispatcher__ctor_function) (id self, SEL sel, bool* call_super, GCHandle* exception_gchandle);
	-(id) init
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_918_Foundation_NSDispatcher__ctor_function callback_918_Foundation_NSDispatcher__ctor;
		xamarin_registrar_dlsym ((void **) &callback_918_Foundation_NSDispatcher__ctor, "Microsoft.MacCatalyst", "callback_918_Foundation_NSDispatcher__ctor", 3);
		rv = callback_918_Foundation_NSDispatcher__ctor (self, _cmd, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@interface __MonoMac_NSActionDispatcher : Foundation_NSDispatcher {
}
	-(void) xamarinApplySelector;
@end

@implementation __MonoMac_NSActionDispatcher {
}

	typedef void (*callback_920_Foundation_NSActionDispatcher_Apply_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) xamarinApplySelector
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_920_Foundation_NSActionDispatcher_Apply_function callback_920_Foundation_NSActionDispatcher_Apply;
		xamarin_registrar_dlsym ((void **) &callback_920_Foundation_NSActionDispatcher_Apply, "Microsoft.MacCatalyst", "callback_920_Foundation_NSActionDispatcher_Apply", 5);
		callback_920_Foundation_NSActionDispatcher_Apply (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}
@end

@interface __MonoMac_NSSynchronizationContextDispatcher : Foundation_NSDispatcher {
}
	-(void) xamarinApplySelector;
@end

@implementation __MonoMac_NSSynchronizationContextDispatcher {
}

	typedef void (*callback_921_Foundation_NSSynchronizationContextDispatcher_Apply_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) xamarinApplySelector
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_921_Foundation_NSSynchronizationContextDispatcher_Apply_function callback_921_Foundation_NSSynchronizationContextDispatcher_Apply;
		xamarin_registrar_dlsym ((void **) &callback_921_Foundation_NSSynchronizationContextDispatcher_Apply, "Microsoft.MacCatalyst", "callback_921_Foundation_NSSynchronizationContextDispatcher_Apply", 6);
		callback_921_Foundation_NSSynchronizationContextDispatcher_Apply (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}
@end

@interface Foundation_NSAsyncDispatcher : Foundation_NSDispatcher {
}
	-(void) xamarinApplySelector;
	-(id) init;
@end

@implementation Foundation_NSAsyncDispatcher {
}

	typedef void (*callback_924_Foundation_NSAsyncDispatcher_Apply_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) xamarinApplySelector
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_924_Foundation_NSAsyncDispatcher_Apply_function callback_924_Foundation_NSAsyncDispatcher_Apply;
		xamarin_registrar_dlsym ((void **) &callback_924_Foundation_NSAsyncDispatcher_Apply, "Microsoft.MacCatalyst", "callback_924_Foundation_NSAsyncDispatcher_Apply", 8);
		callback_924_Foundation_NSAsyncDispatcher_Apply (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef id (*callback_923_Foundation_NSAsyncDispatcher__ctor_function) (id self, SEL sel, bool* call_super, GCHandle* exception_gchandle);
	-(id) init
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_923_Foundation_NSAsyncDispatcher__ctor_function callback_923_Foundation_NSAsyncDispatcher__ctor;
		xamarin_registrar_dlsym ((void **) &callback_923_Foundation_NSAsyncDispatcher__ctor, "Microsoft.MacCatalyst", "callback_923_Foundation_NSAsyncDispatcher__ctor", 7);
		rv = callback_923_Foundation_NSAsyncDispatcher__ctor (self, _cmd, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [Foundation_NSDispatcher class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@interface __MonoMac_NSAsyncActionDispatcher : Foundation_NSAsyncDispatcher {
}
	-(void) xamarinApplySelector;
@end

@implementation __MonoMac_NSAsyncActionDispatcher {
}

	typedef void (*callback_925_Foundation_NSAsyncActionDispatcher_Apply_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) xamarinApplySelector
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_925_Foundation_NSAsyncActionDispatcher_Apply_function callback_925_Foundation_NSAsyncActionDispatcher_Apply;
		xamarin_registrar_dlsym ((void **) &callback_925_Foundation_NSAsyncActionDispatcher_Apply, "Microsoft.MacCatalyst", "callback_925_Foundation_NSAsyncActionDispatcher_Apply", 9);
		callback_925_Foundation_NSAsyncActionDispatcher_Apply (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}
@end

@interface __MonoMac_NSAsyncSynchronizationContextDispatcher : Foundation_NSAsyncDispatcher {
}
	-(void) xamarinApplySelector;
@end

@implementation __MonoMac_NSAsyncSynchronizationContextDispatcher {
}

	typedef void (*callback_926_Foundation_NSAsyncSynchronizationContextDispatcher_Apply_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) xamarinApplySelector
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_926_Foundation_NSAsyncSynchronizationContextDispatcher_Apply_function callback_926_Foundation_NSAsyncSynchronizationContextDispatcher_Apply;
		xamarin_registrar_dlsym ((void **) &callback_926_Foundation_NSAsyncSynchronizationContextDispatcher_Apply, "Microsoft.MacCatalyst", "callback_926_Foundation_NSAsyncSynchronizationContextDispatcher_Apply", 10);
		callback_926_Foundation_NSAsyncSynchronizationContextDispatcher_Apply (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}
@end

@implementation Foundation_NSExceptionError {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}

	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
@end

@interface Foundation_InternalNSNotificationHandler : NSObject {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(void) post:(NSNotification *)p0;
	-(BOOL) conformsToProtocol:(void *)p0;
@end

@implementation Foundation_InternalNSNotificationHandler {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	typedef void (*callback_950_Foundation_InternalNSNotificationHandler_Post_function) (id self, SEL sel, NSNotification * p0, GCHandle* exception_gchandle);
	-(void) post:(NSNotification *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_950_Foundation_InternalNSNotificationHandler_Post_function callback_950_Foundation_InternalNSNotificationHandler_Post;
		xamarin_registrar_dlsym ((void **) &callback_950_Foundation_InternalNSNotificationHandler_Post, "Microsoft.MacCatalyst", "callback_950_Foundation_InternalNSNotificationHandler_Post", 11);
		callback_950_Foundation_InternalNSNotificationHandler_Post (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
@end

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_MacCatalyst__Foundation_NSUrlSessionDelegate {
}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_MacCatalyst__Foundation_NSUrlSessionTaskDelegate {
}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_MacCatalyst__Foundation_NSUrlSessionDataDelegate {
}

	typedef id (*callback_987_Foundation_NSUrlSessionDataDelegate__ctor_function) (id self, SEL sel, bool* call_super, GCHandle* exception_gchandle);
	-(id) init
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_987_Foundation_NSUrlSessionDataDelegate__ctor_function callback_987_Foundation_NSUrlSessionDataDelegate__ctor;
		xamarin_registrar_dlsym ((void **) &callback_987_Foundation_NSUrlSessionDataDelegate__ctor, "Microsoft.MacCatalyst", "callback_987_Foundation_NSUrlSessionDataDelegate__ctor", 15);
		rv = callback_987_Foundation_NSUrlSessionDataDelegate__ctor (self, _cmd, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_MacCatalyst__CoreAnimation_CALayerDelegate {
}
@end
#pragma clang diagnostic pop

@interface UIKit_UIControlEventProxy : NSObject {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(void) BridgeSelector;
	-(BOOL) conformsToProtocol:(void *)p0;
@end

@implementation UIKit_UIControlEventProxy {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	typedef void (*callback_3141_UIKit_UIControlEventProxy_Activated_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) BridgeSelector
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_3141_UIKit_UIControlEventProxy_Activated_function callback_3141_UIKit_UIControlEventProxy_Activated;
		xamarin_registrar_dlsym ((void **) &callback_3141_UIKit_UIControlEventProxy_Activated, "Microsoft.MacCatalyst", "callback_3141_UIKit_UIControlEventProxy_Activated", 41);
		callback_3141_UIKit_UIControlEventProxy_Activated (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
@end

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_MacCatalyst__UIKit_UISearchResultsUpdating {
}

	typedef id (*callback_3496_UIKit_UISearchResultsUpdating__ctor_function) (id self, SEL sel, bool* call_super, GCHandle* exception_gchandle);
	-(id) init
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_3496_UIKit_UISearchResultsUpdating__ctor_function callback_3496_UIKit_UISearchResultsUpdating__ctor;
		xamarin_registrar_dlsym ((void **) &callback_3496_UIKit_UISearchResultsUpdating__ctor, "Microsoft.MacCatalyst", "callback_3496_UIKit_UISearchResultsUpdating__ctor", 127);
		rv = callback_3496_UIKit_UISearchResultsUpdating__ctor (self, _cmd, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

@interface __monomac_internal_ActionDispatcher : NSObject {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(void) __monomac_internal_ActionDispatcher_activated:(NSObject *)p0;
	-(void) __monomac_internal_ActionDispatcher_doubleActivated:(NSObject *)p0;
	-(BOOL) worksWhenModal;
	-(BOOL) conformsToProtocol:(void *)p0;
@end

@implementation __monomac_internal_ActionDispatcher {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	typedef void (*callback_3650_AppKit_ActionDispatcher_OnActivated_function) (id self, SEL sel, NSObject * p0, GCHandle* exception_gchandle);
	-(void) __monomac_internal_ActionDispatcher_activated:(NSObject *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_3650_AppKit_ActionDispatcher_OnActivated_function callback_3650_AppKit_ActionDispatcher_OnActivated;
		xamarin_registrar_dlsym ((void **) &callback_3650_AppKit_ActionDispatcher_OnActivated, "Microsoft.MacCatalyst", "callback_3650_AppKit_ActionDispatcher_OnActivated", 150);
		callback_3650_AppKit_ActionDispatcher_OnActivated (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_3651_AppKit_ActionDispatcher_OnActivated2_function) (id self, SEL sel, NSObject * p0, GCHandle* exception_gchandle);
	-(void) __monomac_internal_ActionDispatcher_doubleActivated:(NSObject *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_3651_AppKit_ActionDispatcher_OnActivated2_function callback_3651_AppKit_ActionDispatcher_OnActivated2;
		xamarin_registrar_dlsym ((void **) &callback_3651_AppKit_ActionDispatcher_OnActivated2, "Microsoft.MacCatalyst", "callback_3651_AppKit_ActionDispatcher_OnActivated2", 151);
		callback_3651_AppKit_ActionDispatcher_OnActivated2 (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef BOOL (*callback_3653_AppKit_ActionDispatcher_get_WorksWhenModal_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(BOOL) worksWhenModal
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		BOOL rv = { 0 };
		static callback_3653_AppKit_ActionDispatcher_get_WorksWhenModal_function callback_3653_AppKit_ActionDispatcher_get_WorksWhenModal;
		xamarin_registrar_dlsym ((void **) &callback_3653_AppKit_ActionDispatcher_get_WorksWhenModal, "Microsoft.MacCatalyst", "callback_3653_AppKit_ActionDispatcher_get_WorksWhenModal", 152);
		rv = callback_3653_AppKit_ActionDispatcher_get_WorksWhenModal (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
@end

@implementation UIKit_UIView_UIViewAppearance {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	typedef UIColor * (*callback_3319_UIKit_UIView_UIViewAppearance_get_BackgroundColor_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(UIColor *) backgroundColor
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		UIColor * rv = { 0 };
		static callback_3319_UIKit_UIView_UIViewAppearance_get_BackgroundColor_function callback_3319_UIKit_UIView_UIViewAppearance_get_BackgroundColor;
		xamarin_registrar_dlsym ((void **) &callback_3319_UIKit_UIView_UIViewAppearance_get_BackgroundColor, "Microsoft.MacCatalyst", "callback_3319_UIKit_UIView_UIViewAppearance_get_BackgroundColor", 100);
		rv = callback_3319_UIKit_UIView_UIViewAppearance_get_BackgroundColor (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef UIColor * (*callback_3321_UIKit_UIView_UIViewAppearance_get_TintColor_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(UIColor *) tintColor
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		UIColor * rv = { 0 };
		static callback_3321_UIKit_UIView_UIViewAppearance_get_TintColor_function callback_3321_UIKit_UIView_UIViewAppearance_get_TintColor;
		xamarin_registrar_dlsym ((void **) &callback_3321_UIKit_UIView_UIViewAppearance_get_TintColor, "Microsoft.MacCatalyst", "callback_3321_UIKit_UIView_UIViewAppearance_get_TintColor", 101);
		rv = callback_3321_UIKit_UIView_UIViewAppearance_get_TintColor (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
@end

@implementation UIKit_UIScrollView_UIScrollViewAppearance {
}
@end

@implementation UIKit_UIControl_UIControlAppearance {
}
@end

@implementation UIKit_UIButton_UIButtonAppearance {
}

	typedef UIImage * (*callback_3126_UIKit_UIButton_UIButtonAppearance_BackgroundImageForState_function) (id self, SEL sel, NSUInteger p0, GCHandle* exception_gchandle);
	-(UIImage *) backgroundImageForState:(NSUInteger)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		UIImage * rv = { 0 };
		static callback_3126_UIKit_UIButton_UIButtonAppearance_BackgroundImageForState_function callback_3126_UIKit_UIButton_UIButtonAppearance_BackgroundImageForState;
		xamarin_registrar_dlsym ((void **) &callback_3126_UIKit_UIButton_UIButtonAppearance_BackgroundImageForState, "Microsoft.MacCatalyst", "callback_3126_UIKit_UIButton_UIButtonAppearance_BackgroundImageForState", 38);
		rv = callback_3126_UIKit_UIButton_UIButtonAppearance_BackgroundImageForState (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef UIColor * (*callback_3139_UIKit_UIButton_UIButtonAppearance_TitleColor_function) (id self, SEL sel, NSUInteger p0, GCHandle* exception_gchandle);
	-(UIColor *) titleColorForState:(NSUInteger)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		UIColor * rv = { 0 };
		static callback_3139_UIKit_UIButton_UIButtonAppearance_TitleColor_function callback_3139_UIKit_UIButton_UIButtonAppearance_TitleColor;
		xamarin_registrar_dlsym ((void **) &callback_3139_UIKit_UIButton_UIButtonAppearance_TitleColor, "Microsoft.MacCatalyst", "callback_3139_UIKit_UIButton_UIButtonAppearance_TitleColor", 39);
		rv = callback_3139_UIKit_UIButton_UIButtonAppearance_TitleColor (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef UIColor * (*callback_3140_UIKit_UIButton_UIButtonAppearance_TitleShadowColor_function) (id self, SEL sel, NSUInteger p0, GCHandle* exception_gchandle);
	-(UIColor *) titleShadowColorForState:(NSUInteger)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		UIColor * rv = { 0 };
		static callback_3140_UIKit_UIButton_UIButtonAppearance_TitleShadowColor_function callback_3140_UIKit_UIButton_UIButtonAppearance_TitleShadowColor;
		xamarin_registrar_dlsym ((void **) &callback_3140_UIKit_UIButton_UIButtonAppearance_TitleShadowColor, "Microsoft.MacCatalyst", "callback_3140_UIKit_UIButton_UIButtonAppearance_TitleShadowColor", 40);
		rv = callback_3140_UIKit_UIButton_UIButtonAppearance_TitleShadowColor (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
@end

@implementation UIKit_UIBarItem_UIBarItemAppearance {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	typedef void (*callback_3125_UIKit_UIBarItem_UIBarItemAppearance__SetTitleTextAttributes_function) (id self, SEL sel, NSDictionary * p0, NSUInteger p1, GCHandle* exception_gchandle);
	-(void) setTitleTextAttributes:(NSDictionary *)p0 forState:(NSUInteger)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_3125_UIKit_UIBarItem_UIBarItemAppearance__SetTitleTextAttributes_function callback_3125_UIKit_UIBarItem_UIBarItemAppearance__SetTitleTextAttributes;
		xamarin_registrar_dlsym ((void **) &callback_3125_UIKit_UIBarItem_UIBarItemAppearance__SetTitleTextAttributes, "Microsoft.MacCatalyst", "callback_3125_UIKit_UIBarItem_UIBarItemAppearance__SetTitleTextAttributes", 37);
		callback_3125_UIKit_UIBarItem_UIBarItemAppearance__SetTitleTextAttributes (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
@end

@interface __NSObject_Disposer : NSObject {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	+(void) drain:(NSObject *)p0;
	-(BOOL) conformsToProtocol:(void *)p0;
	-(id) init;
@end

@implementation __NSObject_Disposer {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	typedef void (*callback_952_Foundation_NSObject_NSObject_Disposer_Drain_function) (id self, SEL sel, NSObject * p0, GCHandle* exception_gchandle);
	+(void) drain:(NSObject *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_952_Foundation_NSObject_NSObject_Disposer_Drain_function callback_952_Foundation_NSObject_NSObject_Disposer_Drain;
		xamarin_registrar_dlsym ((void **) &callback_952_Foundation_NSObject_NSObject_Disposer_Drain, "Microsoft.MacCatalyst", "callback_952_Foundation_NSObject_NSObject_Disposer_Drain", 13);
		callback_952_Foundation_NSObject_NSObject_Disposer_Drain (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef id (*callback_951_Foundation_NSObject_NSObject_Disposer__ctor_function) (id self, SEL sel, bool* call_super, GCHandle* exception_gchandle);
	-(id) init
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_951_Foundation_NSObject_NSObject_Disposer__ctor_function callback_951_Foundation_NSObject_NSObject_Disposer__ctor;
		xamarin_registrar_dlsym ((void **) &callback_951_Foundation_NSObject_NSObject_Disposer__ctor, "Microsoft.MacCatalyst", "callback_951_Foundation_NSObject_NSObject_Disposer__ctor", 12);
		rv = callback_951_Foundation_NSObject_NSObject_Disposer__ctor (self, _cmd, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@interface __XamarinObjectObserver : NSObject {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(void) observeValueForKeyPath:(NSString *)p0 ofObject:(NSObject *)p1 change:(NSDictionary *)p2 context:(void *)p3;
	-(BOOL) conformsToProtocol:(void *)p0;
@end

@implementation __XamarinObjectObserver {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	typedef void (*callback_953_Foundation_NSObject_Observer_ObserveValue_function) (id self, SEL sel, NSString * p0, NSObject * p1, NSDictionary * p2, void * p3, GCHandle* exception_gchandle);
	-(void) observeValueForKeyPath:(NSString *)p0 ofObject:(NSObject *)p1 change:(NSDictionary *)p2 context:(void *)p3
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_953_Foundation_NSObject_Observer_ObserveValue_function callback_953_Foundation_NSObject_Observer_ObserveValue;
		xamarin_registrar_dlsym ((void **) &callback_953_Foundation_NSObject_Observer_ObserveValue, "Microsoft.MacCatalyst", "callback_953_Foundation_NSObject_Observer_ObserveValue", 14);
		callback_953_Foundation_NSObject_Observer_ObserveValue (self, _cmd, p0, p1, p2, p3, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
@end

@interface System_Net_Http_NSUrlSessionHandler_WrappedNSInputStream : NSInputStream {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(NSUInteger) streamStatus;
	-(void) open;
	-(void) close;
	-(void *) read:(void *)p0 maxLength:(void *)p1;
	-(NSError *) streamError;
	-(BOOL) hasBytesAvailable;
	-(BOOL) getBuffer:(void **)p0 length:(void **)p1;
	-(NSObject *) propertyForKey:(NSString *)p0;
	-(BOOL) setProperty:(NSObject *)p0 forKey:(NSString *)p1;
	-(BOOL) _setCFClientFlags:(NSUInteger)p0 callback:(void *)p1 context:(void *)p2;
	-(void) scheduleInRunLoop:(NSRunLoop *)p0 forMode:(NSString *)p1;
	-(void) removeFromRunLoop:(NSRunLoop *)p0 forMode:(NSString *)p1;
	-(BOOL) conformsToProtocol:(void *)p0;
@end

@implementation System_Net_Http_NSUrlSessionHandler_WrappedNSInputStream {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	typedef NSUInteger (*callback_3070_System_Net_Http_NSUrlSessionHandler_WrappedNSInputStream_get_Status_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(NSUInteger) streamStatus
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		NSUInteger rv = { 0 };
		static callback_3070_System_Net_Http_NSUrlSessionHandler_WrappedNSInputStream_get_Status_function callback_3070_System_Net_Http_NSUrlSessionHandler_WrappedNSInputStream_get_Status;
		xamarin_registrar_dlsym ((void **) &callback_3070_System_Net_Http_NSUrlSessionHandler_WrappedNSInputStream_get_Status, "Microsoft.MacCatalyst", "callback_3070_System_Net_Http_NSUrlSessionHandler_WrappedNSInputStream_get_Status", 23);
		rv = callback_3070_System_Net_Http_NSUrlSessionHandler_WrappedNSInputStream_get_Status (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef void (*callback_3071_System_Net_Http_NSUrlSessionHandler_WrappedNSInputStream_Open_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) open
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_3071_System_Net_Http_NSUrlSessionHandler_WrappedNSInputStream_Open_function callback_3071_System_Net_Http_NSUrlSessionHandler_WrappedNSInputStream_Open;
		xamarin_registrar_dlsym ((void **) &callback_3071_System_Net_Http_NSUrlSessionHandler_WrappedNSInputStream_Open, "Microsoft.MacCatalyst", "callback_3071_System_Net_Http_NSUrlSessionHandler_WrappedNSInputStream_Open", 24);
		callback_3071_System_Net_Http_NSUrlSessionHandler_WrappedNSInputStream_Open (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_3072_System_Net_Http_NSUrlSessionHandler_WrappedNSInputStream_Close_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) close
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_3072_System_Net_Http_NSUrlSessionHandler_WrappedNSInputStream_Close_function callback_3072_System_Net_Http_NSUrlSessionHandler_WrappedNSInputStream_Close;
		xamarin_registrar_dlsym ((void **) &callback_3072_System_Net_Http_NSUrlSessionHandler_WrappedNSInputStream_Close, "Microsoft.MacCatalyst", "callback_3072_System_Net_Http_NSUrlSessionHandler_WrappedNSInputStream_Close", 25);
		callback_3072_System_Net_Http_NSUrlSessionHandler_WrappedNSInputStream_Close (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void * (*callback_3073_System_Net_Http_NSUrlSessionHandler_WrappedNSInputStream_Read_function) (id self, SEL sel, void * p0, void * p1, GCHandle* exception_gchandle);
	-(void *) read:(void *)p0 maxLength:(void *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		void * rv = { 0 };
		static callback_3073_System_Net_Http_NSUrlSessionHandler_WrappedNSInputStream_Read_function callback_3073_System_Net_Http_NSUrlSessionHandler_WrappedNSInputStream_Read;
		xamarin_registrar_dlsym ((void **) &callback_3073_System_Net_Http_NSUrlSessionHandler_WrappedNSInputStream_Read, "Microsoft.MacCatalyst", "callback_3073_System_Net_Http_NSUrlSessionHandler_WrappedNSInputStream_Read", 26);
		rv = callback_3073_System_Net_Http_NSUrlSessionHandler_WrappedNSInputStream_Read (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef NSError * (*callback_3074_System_Net_Http_NSUrlSessionHandler_WrappedNSInputStream_get_Error_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(NSError *) streamError
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		NSError * rv = { 0 };
		static callback_3074_System_Net_Http_NSUrlSessionHandler_WrappedNSInputStream_get_Error_function callback_3074_System_Net_Http_NSUrlSessionHandler_WrappedNSInputStream_get_Error;
		xamarin_registrar_dlsym ((void **) &callback_3074_System_Net_Http_NSUrlSessionHandler_WrappedNSInputStream_get_Error, "Microsoft.MacCatalyst", "callback_3074_System_Net_Http_NSUrlSessionHandler_WrappedNSInputStream_get_Error", 27);
		rv = callback_3074_System_Net_Http_NSUrlSessionHandler_WrappedNSInputStream_get_Error (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef BOOL (*callback_3075_System_Net_Http_NSUrlSessionHandler_WrappedNSInputStream_HasBytesAvailable_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(BOOL) hasBytesAvailable
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		BOOL rv = { 0 };
		static callback_3075_System_Net_Http_NSUrlSessionHandler_WrappedNSInputStream_HasBytesAvailable_function callback_3075_System_Net_Http_NSUrlSessionHandler_WrappedNSInputStream_HasBytesAvailable;
		xamarin_registrar_dlsym ((void **) &callback_3075_System_Net_Http_NSUrlSessionHandler_WrappedNSInputStream_HasBytesAvailable, "Microsoft.MacCatalyst", "callback_3075_System_Net_Http_NSUrlSessionHandler_WrappedNSInputStream_HasBytesAvailable", 28);
		rv = callback_3075_System_Net_Http_NSUrlSessionHandler_WrappedNSInputStream_HasBytesAvailable (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef BOOL (*callback_3076_System_Net_Http_NSUrlSessionHandler_WrappedNSInputStream_GetBuffer_function) (id self, SEL sel, void ** p0, void ** p1, GCHandle* exception_gchandle);
	-(BOOL) getBuffer:(void **)p0 length:(void **)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		BOOL rv = { 0 };
		static callback_3076_System_Net_Http_NSUrlSessionHandler_WrappedNSInputStream_GetBuffer_function callback_3076_System_Net_Http_NSUrlSessionHandler_WrappedNSInputStream_GetBuffer;
		xamarin_registrar_dlsym ((void **) &callback_3076_System_Net_Http_NSUrlSessionHandler_WrappedNSInputStream_GetBuffer, "Microsoft.MacCatalyst", "callback_3076_System_Net_Http_NSUrlSessionHandler_WrappedNSInputStream_GetBuffer", 29);
		rv = callback_3076_System_Net_Http_NSUrlSessionHandler_WrappedNSInputStream_GetBuffer (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef NSObject * (*callback_3077_System_Net_Http_NSUrlSessionHandler_WrappedNSInputStream_GetProperty_function) (id self, SEL sel, NSString * p0, GCHandle* exception_gchandle);
	-(NSObject *) propertyForKey:(NSString *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		NSObject * rv = { 0 };
		static callback_3077_System_Net_Http_NSUrlSessionHandler_WrappedNSInputStream_GetProperty_function callback_3077_System_Net_Http_NSUrlSessionHandler_WrappedNSInputStream_GetProperty;
		xamarin_registrar_dlsym ((void **) &callback_3077_System_Net_Http_NSUrlSessionHandler_WrappedNSInputStream_GetProperty, "Microsoft.MacCatalyst", "callback_3077_System_Net_Http_NSUrlSessionHandler_WrappedNSInputStream_GetProperty", 30);
		rv = callback_3077_System_Net_Http_NSUrlSessionHandler_WrappedNSInputStream_GetProperty (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef BOOL (*callback_3078_System_Net_Http_NSUrlSessionHandler_WrappedNSInputStream_SetProperty_function) (id self, SEL sel, NSObject * p0, NSString * p1, GCHandle* exception_gchandle);
	-(BOOL) setProperty:(NSObject *)p0 forKey:(NSString *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		BOOL rv = { 0 };
		static callback_3078_System_Net_Http_NSUrlSessionHandler_WrappedNSInputStream_SetProperty_function callback_3078_System_Net_Http_NSUrlSessionHandler_WrappedNSInputStream_SetProperty;
		xamarin_registrar_dlsym ((void **) &callback_3078_System_Net_Http_NSUrlSessionHandler_WrappedNSInputStream_SetProperty, "Microsoft.MacCatalyst", "callback_3078_System_Net_Http_NSUrlSessionHandler_WrappedNSInputStream_SetProperty", 31);
		rv = callback_3078_System_Net_Http_NSUrlSessionHandler_WrappedNSInputStream_SetProperty (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef BOOL (*callback_3079_System_Net_Http_NSUrlSessionHandler_WrappedNSInputStream_SetCFClientFlags_function) (id self, SEL sel, NSUInteger p0, void * p1, void * p2, GCHandle* exception_gchandle);
	-(BOOL) _setCFClientFlags:(NSUInteger)p0 callback:(void *)p1 context:(void *)p2
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		BOOL rv = { 0 };
		static callback_3079_System_Net_Http_NSUrlSessionHandler_WrappedNSInputStream_SetCFClientFlags_function callback_3079_System_Net_Http_NSUrlSessionHandler_WrappedNSInputStream_SetCFClientFlags;
		xamarin_registrar_dlsym ((void **) &callback_3079_System_Net_Http_NSUrlSessionHandler_WrappedNSInputStream_SetCFClientFlags, "Microsoft.MacCatalyst", "callback_3079_System_Net_Http_NSUrlSessionHandler_WrappedNSInputStream_SetCFClientFlags", 32);
		rv = callback_3079_System_Net_Http_NSUrlSessionHandler_WrappedNSInputStream_SetCFClientFlags (self, _cmd, p0, p1, p2, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef void (*callback_3080_System_Net_Http_NSUrlSessionHandler_WrappedNSInputStream_Schedule_function) (id self, SEL sel, NSRunLoop * p0, NSString * p1, GCHandle* exception_gchandle);
	-(void) scheduleInRunLoop:(NSRunLoop *)p0 forMode:(NSString *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_3080_System_Net_Http_NSUrlSessionHandler_WrappedNSInputStream_Schedule_function callback_3080_System_Net_Http_NSUrlSessionHandler_WrappedNSInputStream_Schedule;
		xamarin_registrar_dlsym ((void **) &callback_3080_System_Net_Http_NSUrlSessionHandler_WrappedNSInputStream_Schedule, "Microsoft.MacCatalyst", "callback_3080_System_Net_Http_NSUrlSessionHandler_WrappedNSInputStream_Schedule", 33);
		callback_3080_System_Net_Http_NSUrlSessionHandler_WrappedNSInputStream_Schedule (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_3081_System_Net_Http_NSUrlSessionHandler_WrappedNSInputStream_Unschedule_function) (id self, SEL sel, NSRunLoop * p0, NSString * p1, GCHandle* exception_gchandle);
	-(void) removeFromRunLoop:(NSRunLoop *)p0 forMode:(NSString *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_3081_System_Net_Http_NSUrlSessionHandler_WrappedNSInputStream_Unschedule_function callback_3081_System_Net_Http_NSUrlSessionHandler_WrappedNSInputStream_Unschedule;
		xamarin_registrar_dlsym ((void **) &callback_3081_System_Net_Http_NSUrlSessionHandler_WrappedNSInputStream_Unschedule, "Microsoft.MacCatalyst", "callback_3081_System_Net_Http_NSUrlSessionHandler_WrappedNSInputStream_Unschedule", 34);
		callback_3081_System_Net_Http_NSUrlSessionHandler_WrappedNSInputStream_Unschedule (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
@end

@interface UIKit_UIBarButtonItem_Callback : NSObject {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(void) InvokeAction:(NSObject *)p0;
	-(BOOL) conformsToProtocol:(void *)p0;
	-(id) init;
@end

@implementation UIKit_UIBarButtonItem_Callback {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	typedef void (*callback_3107_UIKit_UIBarButtonItem_Callback_Call_function) (id self, SEL sel, NSObject * p0, GCHandle* exception_gchandle);
	-(void) InvokeAction:(NSObject *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_3107_UIKit_UIBarButtonItem_Callback_Call_function callback_3107_UIKit_UIBarButtonItem_Callback_Call;
		xamarin_registrar_dlsym ((void **) &callback_3107_UIKit_UIBarButtonItem_Callback_Call, "Microsoft.MacCatalyst", "callback_3107_UIKit_UIBarButtonItem_Callback_Call", 36);
		callback_3107_UIKit_UIBarButtonItem_Callback_Call (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef id (*callback_3106_UIKit_UIBarButtonItem_Callback__ctor_function) (id self, SEL sel, bool* call_super, GCHandle* exception_gchandle);
	-(id) init
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_3106_UIKit_UIBarButtonItem_Callback__ctor_function callback_3106_UIKit_UIBarButtonItem_Callback__ctor;
		xamarin_registrar_dlsym ((void **) &callback_3106_UIKit_UIBarButtonItem_Callback__ctor, "Microsoft.MacCatalyst", "callback_3106_UIKit_UIBarButtonItem_Callback__ctor", 35);
		rv = callback_3106_UIKit_UIBarButtonItem_Callback__ctor (self, _cmd, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@interface __UIGestureRecognizerGenericCB : __UIGestureRecognizerToken {
}
	-(void) target:(UIGestureRecognizer *)p0;
@end

@implementation __UIGestureRecognizerGenericCB {
}

	typedef void (*callback_3143_UIKit_UIGestureRecognizer_Callback_1_Activated_function) (id self, SEL sel, UIGestureRecognizer * p0, GCHandle* exception_gchandle);
	-(void) target:(UIGestureRecognizer *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_3143_UIKit_UIGestureRecognizer_Callback_1_Activated_function callback_3143_UIKit_UIGestureRecognizer_Callback_1_Activated;
		xamarin_registrar_dlsym ((void **) &callback_3143_UIKit_UIGestureRecognizer_Callback_1_Activated, "Microsoft.MacCatalyst", "callback_3143_UIKit_UIGestureRecognizer_Callback_1_Activated", 43);
		callback_3143_UIKit_UIGestureRecognizer_Callback_1_Activated (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}
@end

@implementation __UIGestureRecognizerParameterlessToken {
}

	typedef void (*callback_3144_UIKit_UIGestureRecognizer_ParameterlessDispatch_Activated_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(void) target
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_3144_UIKit_UIGestureRecognizer_ParameterlessDispatch_Activated_function callback_3144_UIKit_UIGestureRecognizer_ParameterlessDispatch_Activated;
		xamarin_registrar_dlsym ((void **) &callback_3144_UIKit_UIGestureRecognizer_ParameterlessDispatch_Activated, "Microsoft.MacCatalyst", "callback_3144_UIKit_UIGestureRecognizer_ParameterlessDispatch_Activated", 44);
		callback_3144_UIKit_UIGestureRecognizer_ParameterlessDispatch_Activated (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}
@end

@implementation __UIGestureRecognizerParametrizedToken {
}

	typedef void (*callback_3145_UIKit_UIGestureRecognizer_ParametrizedDispatch_Activated_function) (id self, SEL sel, UIGestureRecognizer * p0, GCHandle* exception_gchandle);
	-(void) target:(UIGestureRecognizer *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_3145_UIKit_UIGestureRecognizer_ParametrizedDispatch_Activated_function callback_3145_UIKit_UIGestureRecognizer_ParametrizedDispatch_Activated;
		xamarin_registrar_dlsym ((void **) &callback_3145_UIKit_UIGestureRecognizer_ParametrizedDispatch_Activated, "Microsoft.MacCatalyst", "callback_3145_UIKit_UIGestureRecognizer_ParametrizedDispatch_Activated", 45);
		callback_3145_UIKit_UIGestureRecognizer_ParametrizedDispatch_Activated (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}
@end

@interface UIKit_UIGestureRecognizer__UIGestureRecognizerDelegate : NSObject<UIGestureRecognizerDelegate> {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(BOOL) gestureRecognizer:(UIGestureRecognizer *)p0 shouldBeRequiredToFailByGestureRecognizer:(UIGestureRecognizer *)p1;
	-(BOOL) gestureRecognizerShouldBegin:(UIGestureRecognizer *)p0;
	-(BOOL) gestureRecognizer:(UIGestureRecognizer *)p0 shouldReceiveEvent:(UIEvent *)p1;
	-(BOOL) gestureRecognizer:(UIGestureRecognizer *)p0 shouldReceivePress:(UIPress *)p1;
	-(BOOL) gestureRecognizer:(UIGestureRecognizer *)p0 shouldReceiveTouch:(UITouch *)p1;
	-(BOOL) gestureRecognizer:(UIGestureRecognizer *)p0 shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer *)p1;
	-(BOOL) gestureRecognizer:(UIGestureRecognizer *)p0 shouldRequireFailureOfGestureRecognizer:(UIGestureRecognizer *)p1;
	-(BOOL) conformsToProtocol:(void *)p0;
	-(id) init;
@end

@implementation UIKit_UIGestureRecognizer__UIGestureRecognizerDelegate {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	typedef BOOL (*callback_3147_UIKit_UIGestureRecognizer__UIGestureRecognizerDelegate_ShouldBeRequiredToFailBy_function) (id self, SEL sel, UIGestureRecognizer * p0, UIGestureRecognizer * p1, GCHandle* exception_gchandle);
	-(BOOL) gestureRecognizer:(UIGestureRecognizer *)p0 shouldBeRequiredToFailByGestureRecognizer:(UIGestureRecognizer *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		BOOL rv = { 0 };
		static callback_3147_UIKit_UIGestureRecognizer__UIGestureRecognizerDelegate_ShouldBeRequiredToFailBy_function callback_3147_UIKit_UIGestureRecognizer__UIGestureRecognizerDelegate_ShouldBeRequiredToFailBy;
		xamarin_registrar_dlsym ((void **) &callback_3147_UIKit_UIGestureRecognizer__UIGestureRecognizerDelegate_ShouldBeRequiredToFailBy, "Microsoft.MacCatalyst", "callback_3147_UIKit_UIGestureRecognizer__UIGestureRecognizerDelegate_ShouldBeRequiredToFailBy", 47);
		rv = callback_3147_UIKit_UIGestureRecognizer__UIGestureRecognizerDelegate_ShouldBeRequiredToFailBy (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef BOOL (*callback_3148_UIKit_UIGestureRecognizer__UIGestureRecognizerDelegate_ShouldBegin_function) (id self, SEL sel, UIGestureRecognizer * p0, GCHandle* exception_gchandle);
	-(BOOL) gestureRecognizerShouldBegin:(UIGestureRecognizer *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		BOOL rv = { 0 };
		static callback_3148_UIKit_UIGestureRecognizer__UIGestureRecognizerDelegate_ShouldBegin_function callback_3148_UIKit_UIGestureRecognizer__UIGestureRecognizerDelegate_ShouldBegin;
		xamarin_registrar_dlsym ((void **) &callback_3148_UIKit_UIGestureRecognizer__UIGestureRecognizerDelegate_ShouldBegin, "Microsoft.MacCatalyst", "callback_3148_UIKit_UIGestureRecognizer__UIGestureRecognizerDelegate_ShouldBegin", 48);
		rv = callback_3148_UIKit_UIGestureRecognizer__UIGestureRecognizerDelegate_ShouldBegin (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef BOOL (*callback_3149_UIKit_UIGestureRecognizer__UIGestureRecognizerDelegate_ShouldReceiveEvent_function) (id self, SEL sel, UIGestureRecognizer * p0, UIEvent * p1, GCHandle* exception_gchandle);
	-(BOOL) gestureRecognizer:(UIGestureRecognizer *)p0 shouldReceiveEvent:(UIEvent *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		BOOL rv = { 0 };
		static callback_3149_UIKit_UIGestureRecognizer__UIGestureRecognizerDelegate_ShouldReceiveEvent_function callback_3149_UIKit_UIGestureRecognizer__UIGestureRecognizerDelegate_ShouldReceiveEvent;
		xamarin_registrar_dlsym ((void **) &callback_3149_UIKit_UIGestureRecognizer__UIGestureRecognizerDelegate_ShouldReceiveEvent, "Microsoft.MacCatalyst", "callback_3149_UIKit_UIGestureRecognizer__UIGestureRecognizerDelegate_ShouldReceiveEvent", 49);
		rv = callback_3149_UIKit_UIGestureRecognizer__UIGestureRecognizerDelegate_ShouldReceiveEvent (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef BOOL (*callback_3150_UIKit_UIGestureRecognizer__UIGestureRecognizerDelegate_ShouldReceivePress_function) (id self, SEL sel, UIGestureRecognizer * p0, UIPress * p1, GCHandle* exception_gchandle);
	-(BOOL) gestureRecognizer:(UIGestureRecognizer *)p0 shouldReceivePress:(UIPress *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		BOOL rv = { 0 };
		static callback_3150_UIKit_UIGestureRecognizer__UIGestureRecognizerDelegate_ShouldReceivePress_function callback_3150_UIKit_UIGestureRecognizer__UIGestureRecognizerDelegate_ShouldReceivePress;
		xamarin_registrar_dlsym ((void **) &callback_3150_UIKit_UIGestureRecognizer__UIGestureRecognizerDelegate_ShouldReceivePress, "Microsoft.MacCatalyst", "callback_3150_UIKit_UIGestureRecognizer__UIGestureRecognizerDelegate_ShouldReceivePress", 50);
		rv = callback_3150_UIKit_UIGestureRecognizer__UIGestureRecognizerDelegate_ShouldReceivePress (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef BOOL (*callback_3151_UIKit_UIGestureRecognizer__UIGestureRecognizerDelegate_ShouldReceiveTouch_function) (id self, SEL sel, UIGestureRecognizer * p0, UITouch * p1, GCHandle* exception_gchandle);
	-(BOOL) gestureRecognizer:(UIGestureRecognizer *)p0 shouldReceiveTouch:(UITouch *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		BOOL rv = { 0 };
		static callback_3151_UIKit_UIGestureRecognizer__UIGestureRecognizerDelegate_ShouldReceiveTouch_function callback_3151_UIKit_UIGestureRecognizer__UIGestureRecognizerDelegate_ShouldReceiveTouch;
		xamarin_registrar_dlsym ((void **) &callback_3151_UIKit_UIGestureRecognizer__UIGestureRecognizerDelegate_ShouldReceiveTouch, "Microsoft.MacCatalyst", "callback_3151_UIKit_UIGestureRecognizer__UIGestureRecognizerDelegate_ShouldReceiveTouch", 51);
		rv = callback_3151_UIKit_UIGestureRecognizer__UIGestureRecognizerDelegate_ShouldReceiveTouch (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef BOOL (*callback_3152_UIKit_UIGestureRecognizer__UIGestureRecognizerDelegate_ShouldRecognizeSimultaneously_function) (id self, SEL sel, UIGestureRecognizer * p0, UIGestureRecognizer * p1, GCHandle* exception_gchandle);
	-(BOOL) gestureRecognizer:(UIGestureRecognizer *)p0 shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		BOOL rv = { 0 };
		static callback_3152_UIKit_UIGestureRecognizer__UIGestureRecognizerDelegate_ShouldRecognizeSimultaneously_function callback_3152_UIKit_UIGestureRecognizer__UIGestureRecognizerDelegate_ShouldRecognizeSimultaneously;
		xamarin_registrar_dlsym ((void **) &callback_3152_UIKit_UIGestureRecognizer__UIGestureRecognizerDelegate_ShouldRecognizeSimultaneously, "Microsoft.MacCatalyst", "callback_3152_UIKit_UIGestureRecognizer__UIGestureRecognizerDelegate_ShouldRecognizeSimultaneously", 52);
		rv = callback_3152_UIKit_UIGestureRecognizer__UIGestureRecognizerDelegate_ShouldRecognizeSimultaneously (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef BOOL (*callback_3153_UIKit_UIGestureRecognizer__UIGestureRecognizerDelegate_ShouldRequireFailureOf_function) (id self, SEL sel, UIGestureRecognizer * p0, UIGestureRecognizer * p1, GCHandle* exception_gchandle);
	-(BOOL) gestureRecognizer:(UIGestureRecognizer *)p0 shouldRequireFailureOfGestureRecognizer:(UIGestureRecognizer *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		BOOL rv = { 0 };
		static callback_3153_UIKit_UIGestureRecognizer__UIGestureRecognizerDelegate_ShouldRequireFailureOf_function callback_3153_UIKit_UIGestureRecognizer__UIGestureRecognizerDelegate_ShouldRequireFailureOf;
		xamarin_registrar_dlsym ((void **) &callback_3153_UIKit_UIGestureRecognizer__UIGestureRecognizerDelegate_ShouldRequireFailureOf, "Microsoft.MacCatalyst", "callback_3153_UIKit_UIGestureRecognizer__UIGestureRecognizerDelegate_ShouldRequireFailureOf", 53);
		rv = callback_3153_UIKit_UIGestureRecognizer__UIGestureRecognizerDelegate_ShouldRequireFailureOf (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef id (*callback_3146_UIKit_UIGestureRecognizer__UIGestureRecognizerDelegate__ctor_function) (id self, SEL sel, bool* call_super, GCHandle* exception_gchandle);
	-(id) init
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_3146_UIKit_UIGestureRecognizer__UIGestureRecognizerDelegate__ctor_function callback_3146_UIKit_UIGestureRecognizer__UIGestureRecognizerDelegate__ctor;
		xamarin_registrar_dlsym ((void **) &callback_3146_UIKit_UIGestureRecognizer__UIGestureRecognizerDelegate__ctor, "Microsoft.MacCatalyst", "callback_3146_UIKit_UIGestureRecognizer__UIGestureRecognizerDelegate__ctor", 46);
		rv = callback_3146_UIKit_UIGestureRecognizer__UIGestureRecognizerDelegate__ctor (self, _cmd, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@implementation UIKit_UINavigationBar_UINavigationBarAppearance {
}

	typedef UIColor * (*callback_3164_UIKit_UINavigationBar_UINavigationBarAppearance_get_BarTintColor_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(UIColor *) barTintColor
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		UIColor * rv = { 0 };
		static callback_3164_UIKit_UINavigationBar_UINavigationBarAppearance_get_BarTintColor_function callback_3164_UIKit_UINavigationBar_UINavigationBarAppearance_get_BarTintColor;
		xamarin_registrar_dlsym ((void **) &callback_3164_UIKit_UINavigationBar_UINavigationBarAppearance_get_BarTintColor, "Microsoft.MacCatalyst", "callback_3164_UIKit_UINavigationBar_UINavigationBarAppearance_get_BarTintColor", 54);
		rv = callback_3164_UIKit_UINavigationBar_UINavigationBarAppearance_get_BarTintColor (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef NSDictionary * (*callback_3186_UIKit_UINavigationBar_UINavigationBarAppearance_get__LargeTitleTextAttributes_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(NSDictionary *) largeTitleTextAttributes
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		NSDictionary * rv = { 0 };
		static callback_3186_UIKit_UINavigationBar_UINavigationBarAppearance_get__LargeTitleTextAttributes_function callback_3186_UIKit_UINavigationBar_UINavigationBarAppearance_get__LargeTitleTextAttributes;
		xamarin_registrar_dlsym ((void **) &callback_3186_UIKit_UINavigationBar_UINavigationBarAppearance_get__LargeTitleTextAttributes, "Microsoft.MacCatalyst", "callback_3186_UIKit_UINavigationBar_UINavigationBarAppearance_get__LargeTitleTextAttributes", 55);
		rv = callback_3186_UIKit_UINavigationBar_UINavigationBarAppearance_get__LargeTitleTextAttributes (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef NSDictionary * (*callback_3188_UIKit_UINavigationBar_UINavigationBarAppearance_get__TitleTextAttributes_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(NSDictionary *) titleTextAttributes
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		NSDictionary * rv = { 0 };
		static callback_3188_UIKit_UINavigationBar_UINavigationBarAppearance_get__TitleTextAttributes_function callback_3188_UIKit_UINavigationBar_UINavigationBarAppearance_get__TitleTextAttributes;
		xamarin_registrar_dlsym ((void **) &callback_3188_UIKit_UINavigationBar_UINavigationBarAppearance_get__TitleTextAttributes, "Microsoft.MacCatalyst", "callback_3188_UIKit_UINavigationBar_UINavigationBarAppearance_get__TitleTextAttributes", 56);
		rv = callback_3188_UIKit_UINavigationBar_UINavigationBarAppearance_get__TitleTextAttributes (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
@end

@interface UIKit_UIPopoverPresentationController__UIPopoverPresentationControllerDelegate : NSObject<UIAdaptivePresentationControllerDelegate, UIPopoverPresentationControllerDelegate> {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(void) popoverPresentationControllerDidDismissPopover:(UIPopoverPresentationController *)p0;
	-(void) prepareForPopoverPresentation:(UIPopoverPresentationController *)p0;
	-(BOOL) popoverPresentationControllerShouldDismissPopover:(UIPopoverPresentationController *)p0;
	-(void) popoverPresentationController:(UIPopoverPresentationController *)p0 willRepositionPopoverToRect:(CGRect*)p1 inView:(UIView **)p2;
	-(BOOL) conformsToProtocol:(void *)p0;
@end

@implementation UIKit_UIPopoverPresentationController__UIPopoverPresentationControllerDelegate {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	typedef void (*callback_3206_UIKit_UIPopoverPresentationController__UIPopoverPresentationControllerDelegate_DidDismissPopover_function) (id self, SEL sel, UIPopoverPresentationController * p0, GCHandle* exception_gchandle);
	-(void) popoverPresentationControllerDidDismissPopover:(UIPopoverPresentationController *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_3206_UIKit_UIPopoverPresentationController__UIPopoverPresentationControllerDelegate_DidDismissPopover_function callback_3206_UIKit_UIPopoverPresentationController__UIPopoverPresentationControllerDelegate_DidDismissPopover;
		xamarin_registrar_dlsym ((void **) &callback_3206_UIKit_UIPopoverPresentationController__UIPopoverPresentationControllerDelegate_DidDismissPopover, "Microsoft.MacCatalyst", "callback_3206_UIKit_UIPopoverPresentationController__UIPopoverPresentationControllerDelegate_DidDismissPopover", 57);
		callback_3206_UIKit_UIPopoverPresentationController__UIPopoverPresentationControllerDelegate_DidDismissPopover (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_3207_UIKit_UIPopoverPresentationController__UIPopoverPresentationControllerDelegate_PrepareForPopoverPresentation_function) (id self, SEL sel, UIPopoverPresentationController * p0, GCHandle* exception_gchandle);
	-(void) prepareForPopoverPresentation:(UIPopoverPresentationController *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_3207_UIKit_UIPopoverPresentationController__UIPopoverPresentationControllerDelegate_PrepareForPopoverPresentation_function callback_3207_UIKit_UIPopoverPresentationController__UIPopoverPresentationControllerDelegate_PrepareForPopoverPresentation;
		xamarin_registrar_dlsym ((void **) &callback_3207_UIKit_UIPopoverPresentationController__UIPopoverPresentationControllerDelegate_PrepareForPopoverPresentation, "Microsoft.MacCatalyst", "callback_3207_UIKit_UIPopoverPresentationController__UIPopoverPresentationControllerDelegate_PrepareForPopoverPresentation", 58);
		callback_3207_UIKit_UIPopoverPresentationController__UIPopoverPresentationControllerDelegate_PrepareForPopoverPresentation (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef BOOL (*callback_3208_UIKit_UIPopoverPresentationController__UIPopoverPresentationControllerDelegate_ShouldDismissPopover_function) (id self, SEL sel, UIPopoverPresentationController * p0, GCHandle* exception_gchandle);
	-(BOOL) popoverPresentationControllerShouldDismissPopover:(UIPopoverPresentationController *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		BOOL rv = { 0 };
		static callback_3208_UIKit_UIPopoverPresentationController__UIPopoverPresentationControllerDelegate_ShouldDismissPopover_function callback_3208_UIKit_UIPopoverPresentationController__UIPopoverPresentationControllerDelegate_ShouldDismissPopover;
		xamarin_registrar_dlsym ((void **) &callback_3208_UIKit_UIPopoverPresentationController__UIPopoverPresentationControllerDelegate_ShouldDismissPopover, "Microsoft.MacCatalyst", "callback_3208_UIKit_UIPopoverPresentationController__UIPopoverPresentationControllerDelegate_ShouldDismissPopover", 59);
		rv = callback_3208_UIKit_UIPopoverPresentationController__UIPopoverPresentationControllerDelegate_ShouldDismissPopover (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef void (*callback_3209_UIKit_UIPopoverPresentationController__UIPopoverPresentationControllerDelegate_WillRepositionPopover_function) (id self, SEL sel, UIPopoverPresentationController * p0, CGRect* p1, UIView ** p2, GCHandle* exception_gchandle);
	-(void) popoverPresentationController:(UIPopoverPresentationController *)p0 willRepositionPopoverToRect:(CGRect*)p1 inView:(UIView **)p2
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_3209_UIKit_UIPopoverPresentationController__UIPopoverPresentationControllerDelegate_WillRepositionPopover_function callback_3209_UIKit_UIPopoverPresentationController__UIPopoverPresentationControllerDelegate_WillRepositionPopover;
		xamarin_registrar_dlsym ((void **) &callback_3209_UIKit_UIPopoverPresentationController__UIPopoverPresentationControllerDelegate_WillRepositionPopover, "Microsoft.MacCatalyst", "callback_3209_UIKit_UIPopoverPresentationController__UIPopoverPresentationControllerDelegate_WillRepositionPopover", 60);
		callback_3209_UIKit_UIPopoverPresentationController__UIPopoverPresentationControllerDelegate_WillRepositionPopover (self, _cmd, p0, p1, p2, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
@end

@implementation UIKit_UISearchBar_UISearchBarAppearance {
}

	typedef UIColor * (*callback_3213_UIKit_UISearchBar_UISearchBarAppearance_get_BarTintColor_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(UIColor *) barTintColor
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		UIColor * rv = { 0 };
		static callback_3213_UIKit_UISearchBar_UISearchBarAppearance_get_BarTintColor_function callback_3213_UIKit_UISearchBar_UISearchBarAppearance_get_BarTintColor;
		xamarin_registrar_dlsym ((void **) &callback_3213_UIKit_UISearchBar_UISearchBarAppearance_get_BarTintColor, "Microsoft.MacCatalyst", "callback_3213_UIKit_UISearchBar_UISearchBarAppearance_get_BarTintColor", 61);
		rv = callback_3213_UIKit_UISearchBar_UISearchBarAppearance_get_BarTintColor (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
@end

@interface UIKit_UISearchBar__UISearchBarDelegate : NSObject<UIBarPositioningDelegate, UISearchBarDelegate> {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(void) searchBarBookmarkButtonClicked:(UISearchBar *)p0;
	-(void) searchBarCancelButtonClicked:(UISearchBar *)p0;
	-(void) searchBarResultsListButtonClicked:(UISearchBar *)p0;
	-(void) searchBarTextDidBeginEditing:(UISearchBar *)p0;
	-(void) searchBarTextDidEndEditing:(UISearchBar *)p0;
	-(void) searchBarSearchButtonClicked:(UISearchBar *)p0;
	-(void) searchBar:(UISearchBar *)p0 selectedScopeButtonIndexDidChange:(void *)p1;
	-(BOOL) searchBarShouldBeginEditing:(UISearchBar *)p0;
	-(BOOL) searchBar:(UISearchBar *)p0 shouldChangeTextInRange:(NSRange)p1 replacementText:(NSString *)p2;
	-(BOOL) searchBarShouldEndEditing:(UISearchBar *)p0;
	-(void) searchBar:(UISearchBar *)p0 textDidChange:(NSString *)p1;
	-(BOOL) conformsToProtocol:(void *)p0;
	-(id) init;
@end

@implementation UIKit_UISearchBar__UISearchBarDelegate {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	typedef void (*callback_3235_UIKit_UISearchBar__UISearchBarDelegate_BookmarkButtonClicked_function) (id self, SEL sel, UISearchBar * p0, GCHandle* exception_gchandle);
	-(void) searchBarBookmarkButtonClicked:(UISearchBar *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_3235_UIKit_UISearchBar__UISearchBarDelegate_BookmarkButtonClicked_function callback_3235_UIKit_UISearchBar__UISearchBarDelegate_BookmarkButtonClicked;
		xamarin_registrar_dlsym ((void **) &callback_3235_UIKit_UISearchBar__UISearchBarDelegate_BookmarkButtonClicked, "Microsoft.MacCatalyst", "callback_3235_UIKit_UISearchBar__UISearchBarDelegate_BookmarkButtonClicked", 63);
		callback_3235_UIKit_UISearchBar__UISearchBarDelegate_BookmarkButtonClicked (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_3236_UIKit_UISearchBar__UISearchBarDelegate_CancelButtonClicked_function) (id self, SEL sel, UISearchBar * p0, GCHandle* exception_gchandle);
	-(void) searchBarCancelButtonClicked:(UISearchBar *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_3236_UIKit_UISearchBar__UISearchBarDelegate_CancelButtonClicked_function callback_3236_UIKit_UISearchBar__UISearchBarDelegate_CancelButtonClicked;
		xamarin_registrar_dlsym ((void **) &callback_3236_UIKit_UISearchBar__UISearchBarDelegate_CancelButtonClicked, "Microsoft.MacCatalyst", "callback_3236_UIKit_UISearchBar__UISearchBarDelegate_CancelButtonClicked", 64);
		callback_3236_UIKit_UISearchBar__UISearchBarDelegate_CancelButtonClicked (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_3237_UIKit_UISearchBar__UISearchBarDelegate_ListButtonClicked_function) (id self, SEL sel, UISearchBar * p0, GCHandle* exception_gchandle);
	-(void) searchBarResultsListButtonClicked:(UISearchBar *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_3237_UIKit_UISearchBar__UISearchBarDelegate_ListButtonClicked_function callback_3237_UIKit_UISearchBar__UISearchBarDelegate_ListButtonClicked;
		xamarin_registrar_dlsym ((void **) &callback_3237_UIKit_UISearchBar__UISearchBarDelegate_ListButtonClicked, "Microsoft.MacCatalyst", "callback_3237_UIKit_UISearchBar__UISearchBarDelegate_ListButtonClicked", 65);
		callback_3237_UIKit_UISearchBar__UISearchBarDelegate_ListButtonClicked (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_3238_UIKit_UISearchBar__UISearchBarDelegate_OnEditingStarted_function) (id self, SEL sel, UISearchBar * p0, GCHandle* exception_gchandle);
	-(void) searchBarTextDidBeginEditing:(UISearchBar *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_3238_UIKit_UISearchBar__UISearchBarDelegate_OnEditingStarted_function callback_3238_UIKit_UISearchBar__UISearchBarDelegate_OnEditingStarted;
		xamarin_registrar_dlsym ((void **) &callback_3238_UIKit_UISearchBar__UISearchBarDelegate_OnEditingStarted, "Microsoft.MacCatalyst", "callback_3238_UIKit_UISearchBar__UISearchBarDelegate_OnEditingStarted", 66);
		callback_3238_UIKit_UISearchBar__UISearchBarDelegate_OnEditingStarted (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_3239_UIKit_UISearchBar__UISearchBarDelegate_OnEditingStopped_function) (id self, SEL sel, UISearchBar * p0, GCHandle* exception_gchandle);
	-(void) searchBarTextDidEndEditing:(UISearchBar *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_3239_UIKit_UISearchBar__UISearchBarDelegate_OnEditingStopped_function callback_3239_UIKit_UISearchBar__UISearchBarDelegate_OnEditingStopped;
		xamarin_registrar_dlsym ((void **) &callback_3239_UIKit_UISearchBar__UISearchBarDelegate_OnEditingStopped, "Microsoft.MacCatalyst", "callback_3239_UIKit_UISearchBar__UISearchBarDelegate_OnEditingStopped", 67);
		callback_3239_UIKit_UISearchBar__UISearchBarDelegate_OnEditingStopped (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_3240_UIKit_UISearchBar__UISearchBarDelegate_SearchButtonClicked_function) (id self, SEL sel, UISearchBar * p0, GCHandle* exception_gchandle);
	-(void) searchBarSearchButtonClicked:(UISearchBar *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_3240_UIKit_UISearchBar__UISearchBarDelegate_SearchButtonClicked_function callback_3240_UIKit_UISearchBar__UISearchBarDelegate_SearchButtonClicked;
		xamarin_registrar_dlsym ((void **) &callback_3240_UIKit_UISearchBar__UISearchBarDelegate_SearchButtonClicked, "Microsoft.MacCatalyst", "callback_3240_UIKit_UISearchBar__UISearchBarDelegate_SearchButtonClicked", 68);
		callback_3240_UIKit_UISearchBar__UISearchBarDelegate_SearchButtonClicked (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_3241_UIKit_UISearchBar__UISearchBarDelegate_SelectedScopeButtonIndexChanged_function) (id self, SEL sel, UISearchBar * p0, void * p1, GCHandle* exception_gchandle);
	-(void) searchBar:(UISearchBar *)p0 selectedScopeButtonIndexDidChange:(void *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_3241_UIKit_UISearchBar__UISearchBarDelegate_SelectedScopeButtonIndexChanged_function callback_3241_UIKit_UISearchBar__UISearchBarDelegate_SelectedScopeButtonIndexChanged;
		xamarin_registrar_dlsym ((void **) &callback_3241_UIKit_UISearchBar__UISearchBarDelegate_SelectedScopeButtonIndexChanged, "Microsoft.MacCatalyst", "callback_3241_UIKit_UISearchBar__UISearchBarDelegate_SelectedScopeButtonIndexChanged", 69);
		callback_3241_UIKit_UISearchBar__UISearchBarDelegate_SelectedScopeButtonIndexChanged (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef BOOL (*callback_3242_UIKit_UISearchBar__UISearchBarDelegate_ShouldBeginEditing_function) (id self, SEL sel, UISearchBar * p0, GCHandle* exception_gchandle);
	-(BOOL) searchBarShouldBeginEditing:(UISearchBar *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		BOOL rv = { 0 };
		static callback_3242_UIKit_UISearchBar__UISearchBarDelegate_ShouldBeginEditing_function callback_3242_UIKit_UISearchBar__UISearchBarDelegate_ShouldBeginEditing;
		xamarin_registrar_dlsym ((void **) &callback_3242_UIKit_UISearchBar__UISearchBarDelegate_ShouldBeginEditing, "Microsoft.MacCatalyst", "callback_3242_UIKit_UISearchBar__UISearchBarDelegate_ShouldBeginEditing", 70);
		rv = callback_3242_UIKit_UISearchBar__UISearchBarDelegate_ShouldBeginEditing (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef BOOL (*callback_3243_UIKit_UISearchBar__UISearchBarDelegate_ShouldChangeTextInRange_function) (id self, SEL sel, UISearchBar * p0, NSRange p1, NSString * p2, GCHandle* exception_gchandle);
	-(BOOL) searchBar:(UISearchBar *)p0 shouldChangeTextInRange:(NSRange)p1 replacementText:(NSString *)p2
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		BOOL rv = { 0 };
		static callback_3243_UIKit_UISearchBar__UISearchBarDelegate_ShouldChangeTextInRange_function callback_3243_UIKit_UISearchBar__UISearchBarDelegate_ShouldChangeTextInRange;
		xamarin_registrar_dlsym ((void **) &callback_3243_UIKit_UISearchBar__UISearchBarDelegate_ShouldChangeTextInRange, "Microsoft.MacCatalyst", "callback_3243_UIKit_UISearchBar__UISearchBarDelegate_ShouldChangeTextInRange", 71);
		rv = callback_3243_UIKit_UISearchBar__UISearchBarDelegate_ShouldChangeTextInRange (self, _cmd, p0, p1, p2, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef BOOL (*callback_3244_UIKit_UISearchBar__UISearchBarDelegate_ShouldEndEditing_function) (id self, SEL sel, UISearchBar * p0, GCHandle* exception_gchandle);
	-(BOOL) searchBarShouldEndEditing:(UISearchBar *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		BOOL rv = { 0 };
		static callback_3244_UIKit_UISearchBar__UISearchBarDelegate_ShouldEndEditing_function callback_3244_UIKit_UISearchBar__UISearchBarDelegate_ShouldEndEditing;
		xamarin_registrar_dlsym ((void **) &callback_3244_UIKit_UISearchBar__UISearchBarDelegate_ShouldEndEditing, "Microsoft.MacCatalyst", "callback_3244_UIKit_UISearchBar__UISearchBarDelegate_ShouldEndEditing", 72);
		rv = callback_3244_UIKit_UISearchBar__UISearchBarDelegate_ShouldEndEditing (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef void (*callback_3245_UIKit_UISearchBar__UISearchBarDelegate_TextChanged_function) (id self, SEL sel, UISearchBar * p0, NSString * p1, GCHandle* exception_gchandle);
	-(void) searchBar:(UISearchBar *)p0 textDidChange:(NSString *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_3245_UIKit_UISearchBar__UISearchBarDelegate_TextChanged_function callback_3245_UIKit_UISearchBar__UISearchBarDelegate_TextChanged;
		xamarin_registrar_dlsym ((void **) &callback_3245_UIKit_UISearchBar__UISearchBarDelegate_TextChanged, "Microsoft.MacCatalyst", "callback_3245_UIKit_UISearchBar__UISearchBarDelegate_TextChanged", 73);
		callback_3245_UIKit_UISearchBar__UISearchBarDelegate_TextChanged (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef id (*callback_3234_UIKit_UISearchBar__UISearchBarDelegate__ctor_function) (id self, SEL sel, bool* call_super, GCHandle* exception_gchandle);
	-(id) init
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_3234_UIKit_UISearchBar__UISearchBarDelegate__ctor_function callback_3234_UIKit_UISearchBar__UISearchBarDelegate__ctor;
		xamarin_registrar_dlsym ((void **) &callback_3234_UIKit_UISearchBar__UISearchBarDelegate__ctor, "Microsoft.MacCatalyst", "callback_3234_UIKit_UISearchBar__UISearchBarDelegate__ctor", 62);
		rv = callback_3234_UIKit_UISearchBar__UISearchBarDelegate__ctor (self, _cmd, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@interface UIKit_UISearchController___Xamarin_UISearchResultsUpdating : NSObject<UISearchResultsUpdating> {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(void) updateSearchResultsForSearchController:(UISearchController *)p0;
	-(BOOL) conformsToProtocol:(void *)p0;
@end

@implementation UIKit_UISearchController___Xamarin_UISearchResultsUpdating {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	typedef void (*callback_3246_UIKit_UISearchController___Xamarin_UISearchResultsUpdating_UpdateSearchResultsForSearchController_function) (id self, SEL sel, UISearchController * p0, GCHandle* exception_gchandle);
	-(void) updateSearchResultsForSearchController:(UISearchController *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_3246_UIKit_UISearchController___Xamarin_UISearchResultsUpdating_UpdateSearchResultsForSearchController_function callback_3246_UIKit_UISearchController___Xamarin_UISearchResultsUpdating_UpdateSearchResultsForSearchController;
		xamarin_registrar_dlsym ((void **) &callback_3246_UIKit_UISearchController___Xamarin_UISearchResultsUpdating_UpdateSearchResultsForSearchController, "Microsoft.MacCatalyst", "callback_3246_UIKit_UISearchController___Xamarin_UISearchResultsUpdating_UpdateSearchResultsForSearchController", 74);
		callback_3246_UIKit_UISearchController___Xamarin_UISearchResultsUpdating_UpdateSearchResultsForSearchController (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
@end

@implementation UIKit_UITableView_UITableViewAppearance {
}
@end

@interface UIKit_UITextField__UITextFieldDelegate : NSObject<UITextFieldDelegate> {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(void) textFieldDidEndEditing:(UITextField *)p0;
	-(void) textFieldDidEndEditing:(UITextField *)p0 reason:(NSInteger)p1;
	-(void) textFieldDidBeginEditing:(UITextField *)p0;
	-(BOOL) textFieldShouldBeginEditing:(UITextField *)p0;
	-(BOOL) textField:(UITextField *)p0 shouldChangeCharactersInRange:(NSRange)p1 replacementString:(NSString *)p2;
	-(BOOL) textFieldShouldClear:(UITextField *)p0;
	-(BOOL) textFieldShouldEndEditing:(UITextField *)p0;
	-(BOOL) textFieldShouldReturn:(UITextField *)p0;
	-(BOOL) conformsToProtocol:(void *)p0;
	-(id) init;
@end

@implementation UIKit_UITextField__UITextFieldDelegate {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	typedef void (*callback_3274_UIKit_UITextField__UITextFieldDelegate_EditingEnded_function) (id self, SEL sel, UITextField * p0, GCHandle* exception_gchandle);
	-(void) textFieldDidEndEditing:(UITextField *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_3274_UIKit_UITextField__UITextFieldDelegate_EditingEnded_function callback_3274_UIKit_UITextField__UITextFieldDelegate_EditingEnded;
		xamarin_registrar_dlsym ((void **) &callback_3274_UIKit_UITextField__UITextFieldDelegate_EditingEnded, "Microsoft.MacCatalyst", "callback_3274_UIKit_UITextField__UITextFieldDelegate_EditingEnded", 76);
		callback_3274_UIKit_UITextField__UITextFieldDelegate_EditingEnded (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_3275_UIKit_UITextField__UITextFieldDelegate_EditingEnded_function) (id self, SEL sel, UITextField * p0, NSInteger p1, GCHandle* exception_gchandle);
	-(void) textFieldDidEndEditing:(UITextField *)p0 reason:(NSInteger)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_3275_UIKit_UITextField__UITextFieldDelegate_EditingEnded_function callback_3275_UIKit_UITextField__UITextFieldDelegate_EditingEnded;
		xamarin_registrar_dlsym ((void **) &callback_3275_UIKit_UITextField__UITextFieldDelegate_EditingEnded, "Microsoft.MacCatalyst", "callback_3275_UIKit_UITextField__UITextFieldDelegate_EditingEnded", 77);
		callback_3275_UIKit_UITextField__UITextFieldDelegate_EditingEnded (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_3276_UIKit_UITextField__UITextFieldDelegate_EditingStarted_function) (id self, SEL sel, UITextField * p0, GCHandle* exception_gchandle);
	-(void) textFieldDidBeginEditing:(UITextField *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_3276_UIKit_UITextField__UITextFieldDelegate_EditingStarted_function callback_3276_UIKit_UITextField__UITextFieldDelegate_EditingStarted;
		xamarin_registrar_dlsym ((void **) &callback_3276_UIKit_UITextField__UITextFieldDelegate_EditingStarted, "Microsoft.MacCatalyst", "callback_3276_UIKit_UITextField__UITextFieldDelegate_EditingStarted", 78);
		callback_3276_UIKit_UITextField__UITextFieldDelegate_EditingStarted (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef BOOL (*callback_3277_UIKit_UITextField__UITextFieldDelegate_ShouldBeginEditing_function) (id self, SEL sel, UITextField * p0, GCHandle* exception_gchandle);
	-(BOOL) textFieldShouldBeginEditing:(UITextField *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		BOOL rv = { 0 };
		static callback_3277_UIKit_UITextField__UITextFieldDelegate_ShouldBeginEditing_function callback_3277_UIKit_UITextField__UITextFieldDelegate_ShouldBeginEditing;
		xamarin_registrar_dlsym ((void **) &callback_3277_UIKit_UITextField__UITextFieldDelegate_ShouldBeginEditing, "Microsoft.MacCatalyst", "callback_3277_UIKit_UITextField__UITextFieldDelegate_ShouldBeginEditing", 79);
		rv = callback_3277_UIKit_UITextField__UITextFieldDelegate_ShouldBeginEditing (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef BOOL (*callback_3278_UIKit_UITextField__UITextFieldDelegate_ShouldChangeCharacters_function) (id self, SEL sel, UITextField * p0, NSRange p1, NSString * p2, GCHandle* exception_gchandle);
	-(BOOL) textField:(UITextField *)p0 shouldChangeCharactersInRange:(NSRange)p1 replacementString:(NSString *)p2
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		BOOL rv = { 0 };
		static callback_3278_UIKit_UITextField__UITextFieldDelegate_ShouldChangeCharacters_function callback_3278_UIKit_UITextField__UITextFieldDelegate_ShouldChangeCharacters;
		xamarin_registrar_dlsym ((void **) &callback_3278_UIKit_UITextField__UITextFieldDelegate_ShouldChangeCharacters, "Microsoft.MacCatalyst", "callback_3278_UIKit_UITextField__UITextFieldDelegate_ShouldChangeCharacters", 80);
		rv = callback_3278_UIKit_UITextField__UITextFieldDelegate_ShouldChangeCharacters (self, _cmd, p0, p1, p2, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef BOOL (*callback_3279_UIKit_UITextField__UITextFieldDelegate_ShouldClear_function) (id self, SEL sel, UITextField * p0, GCHandle* exception_gchandle);
	-(BOOL) textFieldShouldClear:(UITextField *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		BOOL rv = { 0 };
		static callback_3279_UIKit_UITextField__UITextFieldDelegate_ShouldClear_function callback_3279_UIKit_UITextField__UITextFieldDelegate_ShouldClear;
		xamarin_registrar_dlsym ((void **) &callback_3279_UIKit_UITextField__UITextFieldDelegate_ShouldClear, "Microsoft.MacCatalyst", "callback_3279_UIKit_UITextField__UITextFieldDelegate_ShouldClear", 81);
		rv = callback_3279_UIKit_UITextField__UITextFieldDelegate_ShouldClear (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef BOOL (*callback_3280_UIKit_UITextField__UITextFieldDelegate_ShouldEndEditing_function) (id self, SEL sel, UITextField * p0, GCHandle* exception_gchandle);
	-(BOOL) textFieldShouldEndEditing:(UITextField *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		BOOL rv = { 0 };
		static callback_3280_UIKit_UITextField__UITextFieldDelegate_ShouldEndEditing_function callback_3280_UIKit_UITextField__UITextFieldDelegate_ShouldEndEditing;
		xamarin_registrar_dlsym ((void **) &callback_3280_UIKit_UITextField__UITextFieldDelegate_ShouldEndEditing, "Microsoft.MacCatalyst", "callback_3280_UIKit_UITextField__UITextFieldDelegate_ShouldEndEditing", 82);
		rv = callback_3280_UIKit_UITextField__UITextFieldDelegate_ShouldEndEditing (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef BOOL (*callback_3281_UIKit_UITextField__UITextFieldDelegate_ShouldReturn_function) (id self, SEL sel, UITextField * p0, GCHandle* exception_gchandle);
	-(BOOL) textFieldShouldReturn:(UITextField *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		BOOL rv = { 0 };
		static callback_3281_UIKit_UITextField__UITextFieldDelegate_ShouldReturn_function callback_3281_UIKit_UITextField__UITextFieldDelegate_ShouldReturn;
		xamarin_registrar_dlsym ((void **) &callback_3281_UIKit_UITextField__UITextFieldDelegate_ShouldReturn, "Microsoft.MacCatalyst", "callback_3281_UIKit_UITextField__UITextFieldDelegate_ShouldReturn", 83);
		rv = callback_3281_UIKit_UITextField__UITextFieldDelegate_ShouldReturn (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef id (*callback_3273_UIKit_UITextField__UITextFieldDelegate__ctor_function) (id self, SEL sel, bool* call_super, GCHandle* exception_gchandle);
	-(id) init
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_3273_UIKit_UITextField__UITextFieldDelegate__ctor_function callback_3273_UIKit_UITextField__UITextFieldDelegate__ctor;
		xamarin_registrar_dlsym ((void **) &callback_3273_UIKit_UITextField__UITextFieldDelegate__ctor, "Microsoft.MacCatalyst", "callback_3273_UIKit_UITextField__UITextFieldDelegate__ctor", 75);
		rv = callback_3273_UIKit_UITextField__UITextFieldDelegate__ctor (self, _cmd, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@interface UIKit_UIScrollView__UIScrollViewDelegate : NSObject<UIScrollViewDelegate> {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(void) scrollViewDidEndDecelerating:(UIScrollView *)p0;
	-(void) scrollViewWillBeginDecelerating:(UIScrollView *)p0;
	-(void) scrollViewDidChangeAdjustedContentInset:(UIScrollView *)p0;
	-(void) scrollViewDidZoom:(UIScrollView *)p0;
	-(void) scrollViewDidEndDragging:(UIScrollView *)p0 willDecelerate:(BOOL)p1;
	-(void) scrollViewWillBeginDragging:(UIScrollView *)p0;
	-(void) scrollViewDidEndScrollingAnimation:(UIScrollView *)p0;
	-(void) scrollViewDidScroll:(UIScrollView *)p0;
	-(void) scrollViewDidScrollToTop:(UIScrollView *)p0;
	-(BOOL) scrollViewShouldScrollToTop:(UIScrollView *)p0;
	-(UIView *) viewForZoomingInScrollView:(UIScrollView *)p0;
	-(void) scrollViewWillEndDragging:(UIScrollView *)p0 withVelocity:(CGPoint)p1 targetContentOffset:(CGPoint*)p2;
	-(void) scrollViewDidEndZooming:(UIScrollView *)p0 withView:(UIView *)p1 atScale:(CGFloat)p2;
	-(void) scrollViewWillBeginZooming:(UIScrollView *)p0 withView:(UIView *)p1;
	-(BOOL) conformsToProtocol:(void *)p0;
	-(id) init;
@end

@implementation UIKit_UIScrollView__UIScrollViewDelegate {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	typedef void (*callback_3477_UIKit_UIScrollView__UIScrollViewDelegate_DecelerationEnded_function) (id self, SEL sel, UIScrollView * p0, GCHandle* exception_gchandle);
	-(void) scrollViewDidEndDecelerating:(UIScrollView *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_3477_UIKit_UIScrollView__UIScrollViewDelegate_DecelerationEnded_function callback_3477_UIKit_UIScrollView__UIScrollViewDelegate_DecelerationEnded;
		xamarin_registrar_dlsym ((void **) &callback_3477_UIKit_UIScrollView__UIScrollViewDelegate_DecelerationEnded, "Microsoft.MacCatalyst", "callback_3477_UIKit_UIScrollView__UIScrollViewDelegate_DecelerationEnded", 112);
		callback_3477_UIKit_UIScrollView__UIScrollViewDelegate_DecelerationEnded (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_3478_UIKit_UIScrollView__UIScrollViewDelegate_DecelerationStarted_function) (id self, SEL sel, UIScrollView * p0, GCHandle* exception_gchandle);
	-(void) scrollViewWillBeginDecelerating:(UIScrollView *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_3478_UIKit_UIScrollView__UIScrollViewDelegate_DecelerationStarted_function callback_3478_UIKit_UIScrollView__UIScrollViewDelegate_DecelerationStarted;
		xamarin_registrar_dlsym ((void **) &callback_3478_UIKit_UIScrollView__UIScrollViewDelegate_DecelerationStarted, "Microsoft.MacCatalyst", "callback_3478_UIKit_UIScrollView__UIScrollViewDelegate_DecelerationStarted", 113);
		callback_3478_UIKit_UIScrollView__UIScrollViewDelegate_DecelerationStarted (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_3479_UIKit_UIScrollView__UIScrollViewDelegate_DidChangeAdjustedContentInset_function) (id self, SEL sel, UIScrollView * p0, GCHandle* exception_gchandle);
	-(void) scrollViewDidChangeAdjustedContentInset:(UIScrollView *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_3479_UIKit_UIScrollView__UIScrollViewDelegate_DidChangeAdjustedContentInset_function callback_3479_UIKit_UIScrollView__UIScrollViewDelegate_DidChangeAdjustedContentInset;
		xamarin_registrar_dlsym ((void **) &callback_3479_UIKit_UIScrollView__UIScrollViewDelegate_DidChangeAdjustedContentInset, "Microsoft.MacCatalyst", "callback_3479_UIKit_UIScrollView__UIScrollViewDelegate_DidChangeAdjustedContentInset", 114);
		callback_3479_UIKit_UIScrollView__UIScrollViewDelegate_DidChangeAdjustedContentInset (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_3480_UIKit_UIScrollView__UIScrollViewDelegate_DidZoom_function) (id self, SEL sel, UIScrollView * p0, GCHandle* exception_gchandle);
	-(void) scrollViewDidZoom:(UIScrollView *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_3480_UIKit_UIScrollView__UIScrollViewDelegate_DidZoom_function callback_3480_UIKit_UIScrollView__UIScrollViewDelegate_DidZoom;
		xamarin_registrar_dlsym ((void **) &callback_3480_UIKit_UIScrollView__UIScrollViewDelegate_DidZoom, "Microsoft.MacCatalyst", "callback_3480_UIKit_UIScrollView__UIScrollViewDelegate_DidZoom", 115);
		callback_3480_UIKit_UIScrollView__UIScrollViewDelegate_DidZoom (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_3481_UIKit_UIScrollView__UIScrollViewDelegate_DraggingEnded_function) (id self, SEL sel, UIScrollView * p0, BOOL p1, GCHandle* exception_gchandle);
	-(void) scrollViewDidEndDragging:(UIScrollView *)p0 willDecelerate:(BOOL)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_3481_UIKit_UIScrollView__UIScrollViewDelegate_DraggingEnded_function callback_3481_UIKit_UIScrollView__UIScrollViewDelegate_DraggingEnded;
		xamarin_registrar_dlsym ((void **) &callback_3481_UIKit_UIScrollView__UIScrollViewDelegate_DraggingEnded, "Microsoft.MacCatalyst", "callback_3481_UIKit_UIScrollView__UIScrollViewDelegate_DraggingEnded", 116);
		callback_3481_UIKit_UIScrollView__UIScrollViewDelegate_DraggingEnded (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_3482_UIKit_UIScrollView__UIScrollViewDelegate_DraggingStarted_function) (id self, SEL sel, UIScrollView * p0, GCHandle* exception_gchandle);
	-(void) scrollViewWillBeginDragging:(UIScrollView *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_3482_UIKit_UIScrollView__UIScrollViewDelegate_DraggingStarted_function callback_3482_UIKit_UIScrollView__UIScrollViewDelegate_DraggingStarted;
		xamarin_registrar_dlsym ((void **) &callback_3482_UIKit_UIScrollView__UIScrollViewDelegate_DraggingStarted, "Microsoft.MacCatalyst", "callback_3482_UIKit_UIScrollView__UIScrollViewDelegate_DraggingStarted", 117);
		callback_3482_UIKit_UIScrollView__UIScrollViewDelegate_DraggingStarted (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_3483_UIKit_UIScrollView__UIScrollViewDelegate_ScrollAnimationEnded_function) (id self, SEL sel, UIScrollView * p0, GCHandle* exception_gchandle);
	-(void) scrollViewDidEndScrollingAnimation:(UIScrollView *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_3483_UIKit_UIScrollView__UIScrollViewDelegate_ScrollAnimationEnded_function callback_3483_UIKit_UIScrollView__UIScrollViewDelegate_ScrollAnimationEnded;
		xamarin_registrar_dlsym ((void **) &callback_3483_UIKit_UIScrollView__UIScrollViewDelegate_ScrollAnimationEnded, "Microsoft.MacCatalyst", "callback_3483_UIKit_UIScrollView__UIScrollViewDelegate_ScrollAnimationEnded", 118);
		callback_3483_UIKit_UIScrollView__UIScrollViewDelegate_ScrollAnimationEnded (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_3484_UIKit_UIScrollView__UIScrollViewDelegate_Scrolled_function) (id self, SEL sel, UIScrollView * p0, GCHandle* exception_gchandle);
	-(void) scrollViewDidScroll:(UIScrollView *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_3484_UIKit_UIScrollView__UIScrollViewDelegate_Scrolled_function callback_3484_UIKit_UIScrollView__UIScrollViewDelegate_Scrolled;
		xamarin_registrar_dlsym ((void **) &callback_3484_UIKit_UIScrollView__UIScrollViewDelegate_Scrolled, "Microsoft.MacCatalyst", "callback_3484_UIKit_UIScrollView__UIScrollViewDelegate_Scrolled", 119);
		callback_3484_UIKit_UIScrollView__UIScrollViewDelegate_Scrolled (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_3485_UIKit_UIScrollView__UIScrollViewDelegate_ScrolledToTop_function) (id self, SEL sel, UIScrollView * p0, GCHandle* exception_gchandle);
	-(void) scrollViewDidScrollToTop:(UIScrollView *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_3485_UIKit_UIScrollView__UIScrollViewDelegate_ScrolledToTop_function callback_3485_UIKit_UIScrollView__UIScrollViewDelegate_ScrolledToTop;
		xamarin_registrar_dlsym ((void **) &callback_3485_UIKit_UIScrollView__UIScrollViewDelegate_ScrolledToTop, "Microsoft.MacCatalyst", "callback_3485_UIKit_UIScrollView__UIScrollViewDelegate_ScrolledToTop", 120);
		callback_3485_UIKit_UIScrollView__UIScrollViewDelegate_ScrolledToTop (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef BOOL (*callback_3486_UIKit_UIScrollView__UIScrollViewDelegate_ShouldScrollToTop_function) (id self, SEL sel, UIScrollView * p0, GCHandle* exception_gchandle);
	-(BOOL) scrollViewShouldScrollToTop:(UIScrollView *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		BOOL rv = { 0 };
		static callback_3486_UIKit_UIScrollView__UIScrollViewDelegate_ShouldScrollToTop_function callback_3486_UIKit_UIScrollView__UIScrollViewDelegate_ShouldScrollToTop;
		xamarin_registrar_dlsym ((void **) &callback_3486_UIKit_UIScrollView__UIScrollViewDelegate_ShouldScrollToTop, "Microsoft.MacCatalyst", "callback_3486_UIKit_UIScrollView__UIScrollViewDelegate_ShouldScrollToTop", 121);
		rv = callback_3486_UIKit_UIScrollView__UIScrollViewDelegate_ShouldScrollToTop (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef UIView * (*callback_3487_UIKit_UIScrollView__UIScrollViewDelegate_ViewForZoomingInScrollView_function) (id self, SEL sel, UIScrollView * p0, GCHandle* exception_gchandle);
	-(UIView *) viewForZoomingInScrollView:(UIScrollView *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		UIView * rv = { 0 };
		static callback_3487_UIKit_UIScrollView__UIScrollViewDelegate_ViewForZoomingInScrollView_function callback_3487_UIKit_UIScrollView__UIScrollViewDelegate_ViewForZoomingInScrollView;
		xamarin_registrar_dlsym ((void **) &callback_3487_UIKit_UIScrollView__UIScrollViewDelegate_ViewForZoomingInScrollView, "Microsoft.MacCatalyst", "callback_3487_UIKit_UIScrollView__UIScrollViewDelegate_ViewForZoomingInScrollView", 122);
		rv = callback_3487_UIKit_UIScrollView__UIScrollViewDelegate_ViewForZoomingInScrollView (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef void (*callback_3488_UIKit_UIScrollView__UIScrollViewDelegate_WillEndDragging_function) (id self, SEL sel, UIScrollView * p0, CGPoint p1, CGPoint* p2, GCHandle* exception_gchandle);
	-(void) scrollViewWillEndDragging:(UIScrollView *)p0 withVelocity:(CGPoint)p1 targetContentOffset:(CGPoint*)p2
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_3488_UIKit_UIScrollView__UIScrollViewDelegate_WillEndDragging_function callback_3488_UIKit_UIScrollView__UIScrollViewDelegate_WillEndDragging;
		xamarin_registrar_dlsym ((void **) &callback_3488_UIKit_UIScrollView__UIScrollViewDelegate_WillEndDragging, "Microsoft.MacCatalyst", "callback_3488_UIKit_UIScrollView__UIScrollViewDelegate_WillEndDragging", 123);
		callback_3488_UIKit_UIScrollView__UIScrollViewDelegate_WillEndDragging (self, _cmd, p0, p1, p2, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_3489_UIKit_UIScrollView__UIScrollViewDelegate_ZoomingEnded_function) (id self, SEL sel, UIScrollView * p0, UIView * p1, CGFloat p2, GCHandle* exception_gchandle);
	-(void) scrollViewDidEndZooming:(UIScrollView *)p0 withView:(UIView *)p1 atScale:(CGFloat)p2
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_3489_UIKit_UIScrollView__UIScrollViewDelegate_ZoomingEnded_function callback_3489_UIKit_UIScrollView__UIScrollViewDelegate_ZoomingEnded;
		xamarin_registrar_dlsym ((void **) &callback_3489_UIKit_UIScrollView__UIScrollViewDelegate_ZoomingEnded, "Microsoft.MacCatalyst", "callback_3489_UIKit_UIScrollView__UIScrollViewDelegate_ZoomingEnded", 124);
		callback_3489_UIKit_UIScrollView__UIScrollViewDelegate_ZoomingEnded (self, _cmd, p0, p1, p2, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_3490_UIKit_UIScrollView__UIScrollViewDelegate_ZoomingStarted_function) (id self, SEL sel, UIScrollView * p0, UIView * p1, GCHandle* exception_gchandle);
	-(void) scrollViewWillBeginZooming:(UIScrollView *)p0 withView:(UIView *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_3490_UIKit_UIScrollView__UIScrollViewDelegate_ZoomingStarted_function callback_3490_UIKit_UIScrollView__UIScrollViewDelegate_ZoomingStarted;
		xamarin_registrar_dlsym ((void **) &callback_3490_UIKit_UIScrollView__UIScrollViewDelegate_ZoomingStarted, "Microsoft.MacCatalyst", "callback_3490_UIKit_UIScrollView__UIScrollViewDelegate_ZoomingStarted", 125);
		callback_3490_UIKit_UIScrollView__UIScrollViewDelegate_ZoomingStarted (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef id (*callback_3476_UIKit_UIScrollView__UIScrollViewDelegate__ctor_function) (id self, SEL sel, bool* call_super, GCHandle* exception_gchandle);
	-(id) init
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_3476_UIKit_UIScrollView__UIScrollViewDelegate__ctor_function callback_3476_UIKit_UIScrollView__UIScrollViewDelegate__ctor;
		xamarin_registrar_dlsym ((void **) &callback_3476_UIKit_UIScrollView__UIScrollViewDelegate__ctor, "Microsoft.MacCatalyst", "callback_3476_UIKit_UIScrollView__UIScrollViewDelegate__ctor", 111);
		rv = callback_3476_UIKit_UIScrollView__UIScrollViewDelegate__ctor (self, _cmd, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@interface UIKit_UITextView__UITextViewDelegate : UIKit_UIScrollView__UIScrollViewDelegate<UIScrollViewDelegate, UITextViewDelegate> {
}
	-(void) textViewDidChange:(UITextView *)p0;
	-(void) textViewDidEndEditing:(UITextView *)p0;
	-(void) textViewDidBeginEditing:(UITextView *)p0;
	-(NSArray *) textView:(UITextView *)p0 writingToolsIgnoredRangesInEnclosingRange:(NSRange)p1;
	-(void) textViewDidChangeSelection:(UITextView *)p0;
	-(BOOL) textViewShouldBeginEditing:(UITextView *)p0;
	-(BOOL) textView:(UITextView *)p0 shouldChangeTextInRange:(NSRange)p1 replacementText:(NSString *)p2;
	-(BOOL) textViewShouldEndEditing:(UITextView *)p0;
	-(BOOL) textView:(UITextView *)p0 shouldInteractWithTextAttachment:(NSTextAttachment *)p1 inRange:(NSRange)p2;
	-(BOOL) textView:(UITextView *)p0 shouldInteractWithTextAttachment:(NSTextAttachment *)p1 inRange:(NSRange)p2 interaction:(NSInteger)p3;
	-(BOOL) textView:(UITextView *)p0 shouldInteractWithURL:(NSURL *)p1 inRange:(NSRange)p2;
	-(BOOL) textView:(UITextView *)p0 shouldInteractWithURL:(NSURL *)p1 inRange:(NSRange)p2 interaction:(NSInteger)p3;
	-(void) textViewWritingToolsDidEnd:(UITextView *)p0;
	-(void) textViewWritingToolsWillBegin:(UITextView *)p0;
	-(BOOL) respondsToSelector:(SEL)p0;
	-(id) init;
@end

@implementation UIKit_UITextView__UITextViewDelegate {
}

	typedef void (*callback_3283_UIKit_UITextView__UITextViewDelegate_Changed_function) (id self, SEL sel, UITextView * p0, GCHandle* exception_gchandle);
	-(void) textViewDidChange:(UITextView *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_3283_UIKit_UITextView__UITextViewDelegate_Changed_function callback_3283_UIKit_UITextView__UITextViewDelegate_Changed;
		xamarin_registrar_dlsym ((void **) &callback_3283_UIKit_UITextView__UITextViewDelegate_Changed, "Microsoft.MacCatalyst", "callback_3283_UIKit_UITextView__UITextViewDelegate_Changed", 85);
		callback_3283_UIKit_UITextView__UITextViewDelegate_Changed (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_3284_UIKit_UITextView__UITextViewDelegate_EditingEnded_function) (id self, SEL sel, UITextView * p0, GCHandle* exception_gchandle);
	-(void) textViewDidEndEditing:(UITextView *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_3284_UIKit_UITextView__UITextViewDelegate_EditingEnded_function callback_3284_UIKit_UITextView__UITextViewDelegate_EditingEnded;
		xamarin_registrar_dlsym ((void **) &callback_3284_UIKit_UITextView__UITextViewDelegate_EditingEnded, "Microsoft.MacCatalyst", "callback_3284_UIKit_UITextView__UITextViewDelegate_EditingEnded", 86);
		callback_3284_UIKit_UITextView__UITextViewDelegate_EditingEnded (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_3285_UIKit_UITextView__UITextViewDelegate_EditingStarted_function) (id self, SEL sel, UITextView * p0, GCHandle* exception_gchandle);
	-(void) textViewDidBeginEditing:(UITextView *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_3285_UIKit_UITextView__UITextViewDelegate_EditingStarted_function callback_3285_UIKit_UITextView__UITextViewDelegate_EditingStarted;
		xamarin_registrar_dlsym ((void **) &callback_3285_UIKit_UITextView__UITextViewDelegate_EditingStarted, "Microsoft.MacCatalyst", "callback_3285_UIKit_UITextView__UITextViewDelegate_EditingStarted", 87);
		callback_3285_UIKit_UITextView__UITextViewDelegate_EditingStarted (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef NSArray * (*callback_3286_UIKit_UITextView__UITextViewDelegate_GetWritingToolsIgnoredRangesInEnclosingRange_function) (id self, SEL sel, UITextView * p0, NSRange p1, GCHandle* exception_gchandle);
	-(NSArray *) textView:(UITextView *)p0 writingToolsIgnoredRangesInEnclosingRange:(NSRange)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		NSArray * rv = { 0 };
		static callback_3286_UIKit_UITextView__UITextViewDelegate_GetWritingToolsIgnoredRangesInEnclosingRange_function callback_3286_UIKit_UITextView__UITextViewDelegate_GetWritingToolsIgnoredRangesInEnclosingRange;
		xamarin_registrar_dlsym ((void **) &callback_3286_UIKit_UITextView__UITextViewDelegate_GetWritingToolsIgnoredRangesInEnclosingRange, "Microsoft.MacCatalyst", "callback_3286_UIKit_UITextView__UITextViewDelegate_GetWritingToolsIgnoredRangesInEnclosingRange", 88);
		rv = callback_3286_UIKit_UITextView__UITextViewDelegate_GetWritingToolsIgnoredRangesInEnclosingRange (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef void (*callback_3287_UIKit_UITextView__UITextViewDelegate_SelectionChanged_function) (id self, SEL sel, UITextView * p0, GCHandle* exception_gchandle);
	-(void) textViewDidChangeSelection:(UITextView *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_3287_UIKit_UITextView__UITextViewDelegate_SelectionChanged_function callback_3287_UIKit_UITextView__UITextViewDelegate_SelectionChanged;
		xamarin_registrar_dlsym ((void **) &callback_3287_UIKit_UITextView__UITextViewDelegate_SelectionChanged, "Microsoft.MacCatalyst", "callback_3287_UIKit_UITextView__UITextViewDelegate_SelectionChanged", 89);
		callback_3287_UIKit_UITextView__UITextViewDelegate_SelectionChanged (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef BOOL (*callback_3288_UIKit_UITextView__UITextViewDelegate_ShouldBeginEditing_function) (id self, SEL sel, UITextView * p0, GCHandle* exception_gchandle);
	-(BOOL) textViewShouldBeginEditing:(UITextView *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		BOOL rv = { 0 };
		static callback_3288_UIKit_UITextView__UITextViewDelegate_ShouldBeginEditing_function callback_3288_UIKit_UITextView__UITextViewDelegate_ShouldBeginEditing;
		xamarin_registrar_dlsym ((void **) &callback_3288_UIKit_UITextView__UITextViewDelegate_ShouldBeginEditing, "Microsoft.MacCatalyst", "callback_3288_UIKit_UITextView__UITextViewDelegate_ShouldBeginEditing", 90);
		rv = callback_3288_UIKit_UITextView__UITextViewDelegate_ShouldBeginEditing (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef BOOL (*callback_3289_UIKit_UITextView__UITextViewDelegate_ShouldChangeText_function) (id self, SEL sel, UITextView * p0, NSRange p1, NSString * p2, GCHandle* exception_gchandle);
	-(BOOL) textView:(UITextView *)p0 shouldChangeTextInRange:(NSRange)p1 replacementText:(NSString *)p2
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		BOOL rv = { 0 };
		static callback_3289_UIKit_UITextView__UITextViewDelegate_ShouldChangeText_function callback_3289_UIKit_UITextView__UITextViewDelegate_ShouldChangeText;
		xamarin_registrar_dlsym ((void **) &callback_3289_UIKit_UITextView__UITextViewDelegate_ShouldChangeText, "Microsoft.MacCatalyst", "callback_3289_UIKit_UITextView__UITextViewDelegate_ShouldChangeText", 91);
		rv = callback_3289_UIKit_UITextView__UITextViewDelegate_ShouldChangeText (self, _cmd, p0, p1, p2, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef BOOL (*callback_3290_UIKit_UITextView__UITextViewDelegate_ShouldEndEditing_function) (id self, SEL sel, UITextView * p0, GCHandle* exception_gchandle);
	-(BOOL) textViewShouldEndEditing:(UITextView *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		BOOL rv = { 0 };
		static callback_3290_UIKit_UITextView__UITextViewDelegate_ShouldEndEditing_function callback_3290_UIKit_UITextView__UITextViewDelegate_ShouldEndEditing;
		xamarin_registrar_dlsym ((void **) &callback_3290_UIKit_UITextView__UITextViewDelegate_ShouldEndEditing, "Microsoft.MacCatalyst", "callback_3290_UIKit_UITextView__UITextViewDelegate_ShouldEndEditing", 92);
		rv = callback_3290_UIKit_UITextView__UITextViewDelegate_ShouldEndEditing (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef BOOL (*callback_3291_UIKit_UITextView__UITextViewDelegate_ShouldInteractWithTextAttachment_function) (id self, SEL sel, UITextView * p0, NSTextAttachment * p1, NSRange p2, GCHandle* exception_gchandle);
	-(BOOL) textView:(UITextView *)p0 shouldInteractWithTextAttachment:(NSTextAttachment *)p1 inRange:(NSRange)p2
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		BOOL rv = { 0 };
		static callback_3291_UIKit_UITextView__UITextViewDelegate_ShouldInteractWithTextAttachment_function callback_3291_UIKit_UITextView__UITextViewDelegate_ShouldInteractWithTextAttachment;
		xamarin_registrar_dlsym ((void **) &callback_3291_UIKit_UITextView__UITextViewDelegate_ShouldInteractWithTextAttachment, "Microsoft.MacCatalyst", "callback_3291_UIKit_UITextView__UITextViewDelegate_ShouldInteractWithTextAttachment", 93);
		rv = callback_3291_UIKit_UITextView__UITextViewDelegate_ShouldInteractWithTextAttachment (self, _cmd, p0, p1, p2, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef BOOL (*callback_3292_UIKit_UITextView__UITextViewDelegate_ShouldInteractWithTextAttachment_function) (id self, SEL sel, UITextView * p0, NSTextAttachment * p1, NSRange p2, NSInteger p3, GCHandle* exception_gchandle);
	-(BOOL) textView:(UITextView *)p0 shouldInteractWithTextAttachment:(NSTextAttachment *)p1 inRange:(NSRange)p2 interaction:(NSInteger)p3
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		BOOL rv = { 0 };
		static callback_3292_UIKit_UITextView__UITextViewDelegate_ShouldInteractWithTextAttachment_function callback_3292_UIKit_UITextView__UITextViewDelegate_ShouldInteractWithTextAttachment;
		xamarin_registrar_dlsym ((void **) &callback_3292_UIKit_UITextView__UITextViewDelegate_ShouldInteractWithTextAttachment, "Microsoft.MacCatalyst", "callback_3292_UIKit_UITextView__UITextViewDelegate_ShouldInteractWithTextAttachment", 94);
		rv = callback_3292_UIKit_UITextView__UITextViewDelegate_ShouldInteractWithTextAttachment (self, _cmd, p0, p1, p2, p3, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef BOOL (*callback_3293_UIKit_UITextView__UITextViewDelegate_ShouldInteractWithUrl_function) (id self, SEL sel, UITextView * p0, NSURL * p1, NSRange p2, GCHandle* exception_gchandle);
	-(BOOL) textView:(UITextView *)p0 shouldInteractWithURL:(NSURL *)p1 inRange:(NSRange)p2
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		BOOL rv = { 0 };
		static callback_3293_UIKit_UITextView__UITextViewDelegate_ShouldInteractWithUrl_function callback_3293_UIKit_UITextView__UITextViewDelegate_ShouldInteractWithUrl;
		xamarin_registrar_dlsym ((void **) &callback_3293_UIKit_UITextView__UITextViewDelegate_ShouldInteractWithUrl, "Microsoft.MacCatalyst", "callback_3293_UIKit_UITextView__UITextViewDelegate_ShouldInteractWithUrl", 95);
		rv = callback_3293_UIKit_UITextView__UITextViewDelegate_ShouldInteractWithUrl (self, _cmd, p0, p1, p2, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef BOOL (*callback_3294_UIKit_UITextView__UITextViewDelegate_ShouldInteractWithUrl_function) (id self, SEL sel, UITextView * p0, NSURL * p1, NSRange p2, NSInteger p3, GCHandle* exception_gchandle);
	-(BOOL) textView:(UITextView *)p0 shouldInteractWithURL:(NSURL *)p1 inRange:(NSRange)p2 interaction:(NSInteger)p3
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		BOOL rv = { 0 };
		static callback_3294_UIKit_UITextView__UITextViewDelegate_ShouldInteractWithUrl_function callback_3294_UIKit_UITextView__UITextViewDelegate_ShouldInteractWithUrl;
		xamarin_registrar_dlsym ((void **) &callback_3294_UIKit_UITextView__UITextViewDelegate_ShouldInteractWithUrl, "Microsoft.MacCatalyst", "callback_3294_UIKit_UITextView__UITextViewDelegate_ShouldInteractWithUrl", 96);
		rv = callback_3294_UIKit_UITextView__UITextViewDelegate_ShouldInteractWithUrl (self, _cmd, p0, p1, p2, p3, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef void (*callback_3295_UIKit_UITextView__UITextViewDelegate_WritingToolsDidEnd_function) (id self, SEL sel, UITextView * p0, GCHandle* exception_gchandle);
	-(void) textViewWritingToolsDidEnd:(UITextView *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_3295_UIKit_UITextView__UITextViewDelegate_WritingToolsDidEnd_function callback_3295_UIKit_UITextView__UITextViewDelegate_WritingToolsDidEnd;
		xamarin_registrar_dlsym ((void **) &callback_3295_UIKit_UITextView__UITextViewDelegate_WritingToolsDidEnd, "Microsoft.MacCatalyst", "callback_3295_UIKit_UITextView__UITextViewDelegate_WritingToolsDidEnd", 97);
		callback_3295_UIKit_UITextView__UITextViewDelegate_WritingToolsDidEnd (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_3296_UIKit_UITextView__UITextViewDelegate_WritingToolsWillBegin_function) (id self, SEL sel, UITextView * p0, GCHandle* exception_gchandle);
	-(void) textViewWritingToolsWillBegin:(UITextView *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_3296_UIKit_UITextView__UITextViewDelegate_WritingToolsWillBegin_function callback_3296_UIKit_UITextView__UITextViewDelegate_WritingToolsWillBegin;
		xamarin_registrar_dlsym ((void **) &callback_3296_UIKit_UITextView__UITextViewDelegate_WritingToolsWillBegin, "Microsoft.MacCatalyst", "callback_3296_UIKit_UITextView__UITextViewDelegate_WritingToolsWillBegin", 98);
		callback_3296_UIKit_UITextView__UITextViewDelegate_WritingToolsWillBegin (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef BOOL (*callback_3297_UIKit_UITextView__UITextViewDelegate_RespondsToSelector_function) (id self, SEL sel, SEL p0, GCHandle* exception_gchandle);
	-(BOOL) respondsToSelector:(SEL)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		BOOL rv = { 0 };
		static callback_3297_UIKit_UITextView__UITextViewDelegate_RespondsToSelector_function callback_3297_UIKit_UITextView__UITextViewDelegate_RespondsToSelector;
		xamarin_registrar_dlsym ((void **) &callback_3297_UIKit_UITextView__UITextViewDelegate_RespondsToSelector, "Microsoft.MacCatalyst", "callback_3297_UIKit_UITextView__UITextViewDelegate_RespondsToSelector", 99);
		rv = callback_3297_UIKit_UITextView__UITextViewDelegate_RespondsToSelector (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef id (*callback_3282_UIKit_UITextView__UITextViewDelegate__ctor_function) (id self, SEL sel, bool* call_super, GCHandle* exception_gchandle);
	-(id) init
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_3282_UIKit_UITextView__UITextViewDelegate__ctor_function callback_3282_UIKit_UITextView__UITextViewDelegate__ctor;
		xamarin_registrar_dlsym ((void **) &callback_3282_UIKit_UITextView__UITextViewDelegate__ctor, "Microsoft.MacCatalyst", "callback_3282_UIKit_UITextView__UITextViewDelegate__ctor", 84);
		rv = callback_3282_UIKit_UITextView__UITextViewDelegate__ctor (self, _cmd, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [UIKit_UIScrollView__UIScrollViewDelegate class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@implementation UIKit_UISwitch_UISwitchAppearance {
}

	typedef UIColor * (*callback_3552_UIKit_UISwitch_UISwitchAppearance_get_OnTintColor_function) (id self, SEL sel, GCHandle* exception_gchandle);
	-(UIColor *) onTintColor
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		UIColor * rv = { 0 };
		static callback_3552_UIKit_UISwitch_UISwitchAppearance_get_OnTintColor_function callback_3552_UIKit_UISwitch_UISwitchAppearance_get_OnTintColor;
		xamarin_registrar_dlsym ((void **) &callback_3552_UIKit_UISwitch_UISwitchAppearance_get_OnTintColor, "Microsoft.MacCatalyst", "callback_3552_UIKit_UISwitch_UISwitchAppearance_get_OnTintColor", 128);
		rv = callback_3552_UIKit_UISwitch_UISwitchAppearance_get_OnTintColor (self, _cmd, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
@end

@implementation UIKit_UITabBar_UITabBarAppearance {
}
@end

@interface UIKit_UITabBarController__UITabBarControllerDelegate : NSObject<UITabBarControllerDelegate> {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(void) tabBarController:(UITabBarController *)p0 tab:(UITab *)p1 acceptItemsFromDropSession:(id)p2;
	-(void) tabBarControllerDidEndEditing:(UITabBarController *)p0;
	-(void) tabBarController:(UITabBarController *)p0 didSelectTab:(UITab *)p1 previousTab:(UITab *)p2;
	-(void) tabBarController:(UITabBarController *)p0 displayOrderDidChangeForGroup:(UITabGroup *)p1;
	-(void) tabBarController:(UITabBarController *)p0 didEndCustomizingViewControllers:(NSArray *)p1 changed:(BOOL)p2;
	-(id) tabBarController:(UITabBarController *)p0 animationControllerForTransitionFromViewController:(UIViewController *)p1 toViewController:(UIViewController *)p2;
	-(NSArray *) tabBarController:(UITabBarController *)p0 displayedViewControllersForTab:(UITab *)p1 proposedViewControllers:(NSArray *)p2;
	-(id) tabBarController:(UITabBarController *)p0 interactionControllerForAnimationController:(id)p1;
	-(NSUInteger) tabBarController:(UITabBarController *)p0 tab:(UITab *)p1 operationForAcceptingItemsFromDropSession:(id)p2;
	-(NSInteger) tabBarControllerPreferredInterfaceOrientationForPresentation:(UITabBarController *)p0;
	-(void) tabBarController:(UITabBarController *)p0 willBeginCustomizingViewControllers:(NSArray *)p1;
	-(void) tabBarController:(UITabBarController *)p0 willEndCustomizingViewControllers:(NSArray *)p1 changed:(BOOL)p2;
	-(BOOL) tabBarController:(UITabBarController *)p0 shouldSelectTab:(UITab *)p1;
	-(BOOL) tabBarController:(UITabBarController *)p0 shouldSelectViewController:(UIViewController *)p1;
	-(NSUInteger) tabBarControllerSupportedInterfaceOrientations:(UITabBarController *)p0;
	-(void) tabBarController:(UITabBarController *)p0 didSelectViewController:(UIViewController *)p1;
	-(void) tabBarController:(UITabBarController *)p0 visibilityDidChangeForTabs:(NSArray *)p1;
	-(void) tabBarControllerWillBeginEditing:(UITabBarController *)p0;
	-(BOOL) respondsToSelector:(SEL)p0;
	-(BOOL) conformsToProtocol:(void *)p0;
	-(id) init;
@end

@implementation UIKit_UITabBarController__UITabBarControllerDelegate {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	typedef void (*callback_3587_UIKit_UITabBarController__UITabBarControllerDelegate_AcceptItemsFromDropSession_function) (id self, SEL sel, UITabBarController * p0, UITab * p1, id p2, GCHandle* exception_gchandle);
	-(void) tabBarController:(UITabBarController *)p0 tab:(UITab *)p1 acceptItemsFromDropSession:(id)p2
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_3587_UIKit_UITabBarController__UITabBarControllerDelegate_AcceptItemsFromDropSession_function callback_3587_UIKit_UITabBarController__UITabBarControllerDelegate_AcceptItemsFromDropSession;
		xamarin_registrar_dlsym ((void **) &callback_3587_UIKit_UITabBarController__UITabBarControllerDelegate_AcceptItemsFromDropSession, "Microsoft.MacCatalyst", "callback_3587_UIKit_UITabBarController__UITabBarControllerDelegate_AcceptItemsFromDropSession", 130);
		callback_3587_UIKit_UITabBarController__UITabBarControllerDelegate_AcceptItemsFromDropSession (self, _cmd, p0, p1, p2, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_3588_UIKit_UITabBarController__UITabBarControllerDelegate_DidBeginEditing_function) (id self, SEL sel, UITabBarController * p0, GCHandle* exception_gchandle);
	-(void) tabBarControllerDidEndEditing:(UITabBarController *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_3588_UIKit_UITabBarController__UITabBarControllerDelegate_DidBeginEditing_function callback_3588_UIKit_UITabBarController__UITabBarControllerDelegate_DidBeginEditing;
		xamarin_registrar_dlsym ((void **) &callback_3588_UIKit_UITabBarController__UITabBarControllerDelegate_DidBeginEditing, "Microsoft.MacCatalyst", "callback_3588_UIKit_UITabBarController__UITabBarControllerDelegate_DidBeginEditing", 131);
		callback_3588_UIKit_UITabBarController__UITabBarControllerDelegate_DidBeginEditing (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_3589_UIKit_UITabBarController__UITabBarControllerDelegate_DidSelectTab_function) (id self, SEL sel, UITabBarController * p0, UITab * p1, UITab * p2, GCHandle* exception_gchandle);
	-(void) tabBarController:(UITabBarController *)p0 didSelectTab:(UITab *)p1 previousTab:(UITab *)p2
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_3589_UIKit_UITabBarController__UITabBarControllerDelegate_DidSelectTab_function callback_3589_UIKit_UITabBarController__UITabBarControllerDelegate_DidSelectTab;
		xamarin_registrar_dlsym ((void **) &callback_3589_UIKit_UITabBarController__UITabBarControllerDelegate_DidSelectTab, "Microsoft.MacCatalyst", "callback_3589_UIKit_UITabBarController__UITabBarControllerDelegate_DidSelectTab", 132);
		callback_3589_UIKit_UITabBarController__UITabBarControllerDelegate_DidSelectTab (self, _cmd, p0, p1, p2, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_3590_UIKit_UITabBarController__UITabBarControllerDelegate_DisplayOrderDidChangeForGroup_function) (id self, SEL sel, UITabBarController * p0, UITabGroup * p1, GCHandle* exception_gchandle);
	-(void) tabBarController:(UITabBarController *)p0 displayOrderDidChangeForGroup:(UITabGroup *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_3590_UIKit_UITabBarController__UITabBarControllerDelegate_DisplayOrderDidChangeForGroup_function callback_3590_UIKit_UITabBarController__UITabBarControllerDelegate_DisplayOrderDidChangeForGroup;
		xamarin_registrar_dlsym ((void **) &callback_3590_UIKit_UITabBarController__UITabBarControllerDelegate_DisplayOrderDidChangeForGroup, "Microsoft.MacCatalyst", "callback_3590_UIKit_UITabBarController__UITabBarControllerDelegate_DisplayOrderDidChangeForGroup", 133);
		callback_3590_UIKit_UITabBarController__UITabBarControllerDelegate_DisplayOrderDidChangeForGroup (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_3591_UIKit_UITabBarController__UITabBarControllerDelegate_FinishedCustomizingViewControllers_function) (id self, SEL sel, UITabBarController * p0, NSArray * p1, BOOL p2, GCHandle* exception_gchandle);
	-(void) tabBarController:(UITabBarController *)p0 didEndCustomizingViewControllers:(NSArray *)p1 changed:(BOOL)p2
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_3591_UIKit_UITabBarController__UITabBarControllerDelegate_FinishedCustomizingViewControllers_function callback_3591_UIKit_UITabBarController__UITabBarControllerDelegate_FinishedCustomizingViewControllers;
		xamarin_registrar_dlsym ((void **) &callback_3591_UIKit_UITabBarController__UITabBarControllerDelegate_FinishedCustomizingViewControllers, "Microsoft.MacCatalyst", "callback_3591_UIKit_UITabBarController__UITabBarControllerDelegate_FinishedCustomizingViewControllers", 134);
		callback_3591_UIKit_UITabBarController__UITabBarControllerDelegate_FinishedCustomizingViewControllers (self, _cmd, p0, p1, p2, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef id (*callback_3592_UIKit_UITabBarController__UITabBarControllerDelegate_GetAnimationControllerForTransition_function) (id self, SEL sel, UITabBarController * p0, UIViewController * p1, UIViewController * p2, GCHandle* exception_gchandle);
	-(id) tabBarController:(UITabBarController *)p0 animationControllerForTransitionFromViewController:(UIViewController *)p1 toViewController:(UIViewController *)p2
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		id rv = { 0 };
		static callback_3592_UIKit_UITabBarController__UITabBarControllerDelegate_GetAnimationControllerForTransition_function callback_3592_UIKit_UITabBarController__UITabBarControllerDelegate_GetAnimationControllerForTransition;
		xamarin_registrar_dlsym ((void **) &callback_3592_UIKit_UITabBarController__UITabBarControllerDelegate_GetAnimationControllerForTransition, "Microsoft.MacCatalyst", "callback_3592_UIKit_UITabBarController__UITabBarControllerDelegate_GetAnimationControllerForTransition", 135);
		rv = callback_3592_UIKit_UITabBarController__UITabBarControllerDelegate_GetAnimationControllerForTransition (self, _cmd, p0, p1, p2, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef NSArray * (*callback_3593_UIKit_UITabBarController__UITabBarControllerDelegate_GetDisplayedViewControllers_function) (id self, SEL sel, UITabBarController * p0, UITab * p1, NSArray * p2, GCHandle* exception_gchandle);
	-(NSArray *) tabBarController:(UITabBarController *)p0 displayedViewControllersForTab:(UITab *)p1 proposedViewControllers:(NSArray *)p2
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		NSArray * rv = { 0 };
		static callback_3593_UIKit_UITabBarController__UITabBarControllerDelegate_GetDisplayedViewControllers_function callback_3593_UIKit_UITabBarController__UITabBarControllerDelegate_GetDisplayedViewControllers;
		xamarin_registrar_dlsym ((void **) &callback_3593_UIKit_UITabBarController__UITabBarControllerDelegate_GetDisplayedViewControllers, "Microsoft.MacCatalyst", "callback_3593_UIKit_UITabBarController__UITabBarControllerDelegate_GetDisplayedViewControllers", 136);
		rv = callback_3593_UIKit_UITabBarController__UITabBarControllerDelegate_GetDisplayedViewControllers (self, _cmd, p0, p1, p2, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef id (*callback_3594_UIKit_UITabBarController__UITabBarControllerDelegate_GetInteractionControllerForAnimationController_function) (id self, SEL sel, UITabBarController * p0, id p1, GCHandle* exception_gchandle);
	-(id) tabBarController:(UITabBarController *)p0 interactionControllerForAnimationController:(id)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		id rv = { 0 };
		static callback_3594_UIKit_UITabBarController__UITabBarControllerDelegate_GetInteractionControllerForAnimationController_function callback_3594_UIKit_UITabBarController__UITabBarControllerDelegate_GetInteractionControllerForAnimationController;
		xamarin_registrar_dlsym ((void **) &callback_3594_UIKit_UITabBarController__UITabBarControllerDelegate_GetInteractionControllerForAnimationController, "Microsoft.MacCatalyst", "callback_3594_UIKit_UITabBarController__UITabBarControllerDelegate_GetInteractionControllerForAnimationController", 137);
		rv = callback_3594_UIKit_UITabBarController__UITabBarControllerDelegate_GetInteractionControllerForAnimationController (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef NSUInteger (*callback_3595_UIKit_UITabBarController__UITabBarControllerDelegate_GetOperationForAcceptingItemsFromDropSession_function) (id self, SEL sel, UITabBarController * p0, UITab * p1, id p2, GCHandle* exception_gchandle);
	-(NSUInteger) tabBarController:(UITabBarController *)p0 tab:(UITab *)p1 operationForAcceptingItemsFromDropSession:(id)p2
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		NSUInteger rv = { 0 };
		static callback_3595_UIKit_UITabBarController__UITabBarControllerDelegate_GetOperationForAcceptingItemsFromDropSession_function callback_3595_UIKit_UITabBarController__UITabBarControllerDelegate_GetOperationForAcceptingItemsFromDropSession;
		xamarin_registrar_dlsym ((void **) &callback_3595_UIKit_UITabBarController__UITabBarControllerDelegate_GetOperationForAcceptingItemsFromDropSession, "Microsoft.MacCatalyst", "callback_3595_UIKit_UITabBarController__UITabBarControllerDelegate_GetOperationForAcceptingItemsFromDropSession", 138);
		rv = callback_3595_UIKit_UITabBarController__UITabBarControllerDelegate_GetOperationForAcceptingItemsFromDropSession (self, _cmd, p0, p1, p2, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef NSInteger (*callback_3596_UIKit_UITabBarController__UITabBarControllerDelegate_GetPreferredInterfaceOrientation_function) (id self, SEL sel, UITabBarController * p0, GCHandle* exception_gchandle);
	-(NSInteger) tabBarControllerPreferredInterfaceOrientationForPresentation:(UITabBarController *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		NSInteger rv = { 0 };
		static callback_3596_UIKit_UITabBarController__UITabBarControllerDelegate_GetPreferredInterfaceOrientation_function callback_3596_UIKit_UITabBarController__UITabBarControllerDelegate_GetPreferredInterfaceOrientation;
		xamarin_registrar_dlsym ((void **) &callback_3596_UIKit_UITabBarController__UITabBarControllerDelegate_GetPreferredInterfaceOrientation, "Microsoft.MacCatalyst", "callback_3596_UIKit_UITabBarController__UITabBarControllerDelegate_GetPreferredInterfaceOrientation", 139);
		rv = callback_3596_UIKit_UITabBarController__UITabBarControllerDelegate_GetPreferredInterfaceOrientation (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef void (*callback_3597_UIKit_UITabBarController__UITabBarControllerDelegate_OnCustomizingViewControllers_function) (id self, SEL sel, UITabBarController * p0, NSArray * p1, GCHandle* exception_gchandle);
	-(void) tabBarController:(UITabBarController *)p0 willBeginCustomizingViewControllers:(NSArray *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_3597_UIKit_UITabBarController__UITabBarControllerDelegate_OnCustomizingViewControllers_function callback_3597_UIKit_UITabBarController__UITabBarControllerDelegate_OnCustomizingViewControllers;
		xamarin_registrar_dlsym ((void **) &callback_3597_UIKit_UITabBarController__UITabBarControllerDelegate_OnCustomizingViewControllers, "Microsoft.MacCatalyst", "callback_3597_UIKit_UITabBarController__UITabBarControllerDelegate_OnCustomizingViewControllers", 140);
		callback_3597_UIKit_UITabBarController__UITabBarControllerDelegate_OnCustomizingViewControllers (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_3598_UIKit_UITabBarController__UITabBarControllerDelegate_OnEndCustomizingViewControllers_function) (id self, SEL sel, UITabBarController * p0, NSArray * p1, BOOL p2, GCHandle* exception_gchandle);
	-(void) tabBarController:(UITabBarController *)p0 willEndCustomizingViewControllers:(NSArray *)p1 changed:(BOOL)p2
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_3598_UIKit_UITabBarController__UITabBarControllerDelegate_OnEndCustomizingViewControllers_function callback_3598_UIKit_UITabBarController__UITabBarControllerDelegate_OnEndCustomizingViewControllers;
		xamarin_registrar_dlsym ((void **) &callback_3598_UIKit_UITabBarController__UITabBarControllerDelegate_OnEndCustomizingViewControllers, "Microsoft.MacCatalyst", "callback_3598_UIKit_UITabBarController__UITabBarControllerDelegate_OnEndCustomizingViewControllers", 141);
		callback_3598_UIKit_UITabBarController__UITabBarControllerDelegate_OnEndCustomizingViewControllers (self, _cmd, p0, p1, p2, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef BOOL (*callback_3599_UIKit_UITabBarController__UITabBarControllerDelegate_ShouldSelectTab_function) (id self, SEL sel, UITabBarController * p0, UITab * p1, GCHandle* exception_gchandle);
	-(BOOL) tabBarController:(UITabBarController *)p0 shouldSelectTab:(UITab *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		BOOL rv = { 0 };
		static callback_3599_UIKit_UITabBarController__UITabBarControllerDelegate_ShouldSelectTab_function callback_3599_UIKit_UITabBarController__UITabBarControllerDelegate_ShouldSelectTab;
		xamarin_registrar_dlsym ((void **) &callback_3599_UIKit_UITabBarController__UITabBarControllerDelegate_ShouldSelectTab, "Microsoft.MacCatalyst", "callback_3599_UIKit_UITabBarController__UITabBarControllerDelegate_ShouldSelectTab", 142);
		rv = callback_3599_UIKit_UITabBarController__UITabBarControllerDelegate_ShouldSelectTab (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef BOOL (*callback_3600_UIKit_UITabBarController__UITabBarControllerDelegate_ShouldSelectViewController_function) (id self, SEL sel, UITabBarController * p0, UIViewController * p1, GCHandle* exception_gchandle);
	-(BOOL) tabBarController:(UITabBarController *)p0 shouldSelectViewController:(UIViewController *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		BOOL rv = { 0 };
		static callback_3600_UIKit_UITabBarController__UITabBarControllerDelegate_ShouldSelectViewController_function callback_3600_UIKit_UITabBarController__UITabBarControllerDelegate_ShouldSelectViewController;
		xamarin_registrar_dlsym ((void **) &callback_3600_UIKit_UITabBarController__UITabBarControllerDelegate_ShouldSelectViewController, "Microsoft.MacCatalyst", "callback_3600_UIKit_UITabBarController__UITabBarControllerDelegate_ShouldSelectViewController", 143);
		rv = callback_3600_UIKit_UITabBarController__UITabBarControllerDelegate_ShouldSelectViewController (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef NSUInteger (*callback_3601_UIKit_UITabBarController__UITabBarControllerDelegate_SupportedInterfaceOrientations_function) (id self, SEL sel, UITabBarController * p0, GCHandle* exception_gchandle);
	-(NSUInteger) tabBarControllerSupportedInterfaceOrientations:(UITabBarController *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		NSUInteger rv = { 0 };
		static callback_3601_UIKit_UITabBarController__UITabBarControllerDelegate_SupportedInterfaceOrientations_function callback_3601_UIKit_UITabBarController__UITabBarControllerDelegate_SupportedInterfaceOrientations;
		xamarin_registrar_dlsym ((void **) &callback_3601_UIKit_UITabBarController__UITabBarControllerDelegate_SupportedInterfaceOrientations, "Microsoft.MacCatalyst", "callback_3601_UIKit_UITabBarController__UITabBarControllerDelegate_SupportedInterfaceOrientations", 144);
		rv = callback_3601_UIKit_UITabBarController__UITabBarControllerDelegate_SupportedInterfaceOrientations (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef void (*callback_3602_UIKit_UITabBarController__UITabBarControllerDelegate_ViewControllerSelected_function) (id self, SEL sel, UITabBarController * p0, UIViewController * p1, GCHandle* exception_gchandle);
	-(void) tabBarController:(UITabBarController *)p0 didSelectViewController:(UIViewController *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_3602_UIKit_UITabBarController__UITabBarControllerDelegate_ViewControllerSelected_function callback_3602_UIKit_UITabBarController__UITabBarControllerDelegate_ViewControllerSelected;
		xamarin_registrar_dlsym ((void **) &callback_3602_UIKit_UITabBarController__UITabBarControllerDelegate_ViewControllerSelected, "Microsoft.MacCatalyst", "callback_3602_UIKit_UITabBarController__UITabBarControllerDelegate_ViewControllerSelected", 145);
		callback_3602_UIKit_UITabBarController__UITabBarControllerDelegate_ViewControllerSelected (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_3603_UIKit_UITabBarController__UITabBarControllerDelegate_VisibilityDidChangeForTabs_function) (id self, SEL sel, UITabBarController * p0, NSArray * p1, GCHandle* exception_gchandle);
	-(void) tabBarController:(UITabBarController *)p0 visibilityDidChangeForTabs:(NSArray *)p1
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_3603_UIKit_UITabBarController__UITabBarControllerDelegate_VisibilityDidChangeForTabs_function callback_3603_UIKit_UITabBarController__UITabBarControllerDelegate_VisibilityDidChangeForTabs;
		xamarin_registrar_dlsym ((void **) &callback_3603_UIKit_UITabBarController__UITabBarControllerDelegate_VisibilityDidChangeForTabs, "Microsoft.MacCatalyst", "callback_3603_UIKit_UITabBarController__UITabBarControllerDelegate_VisibilityDidChangeForTabs", 146);
		callback_3603_UIKit_UITabBarController__UITabBarControllerDelegate_VisibilityDidChangeForTabs (self, _cmd, p0, p1, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_3604_UIKit_UITabBarController__UITabBarControllerDelegate_WillBeginEditing_function) (id self, SEL sel, UITabBarController * p0, GCHandle* exception_gchandle);
	-(void) tabBarControllerWillBeginEditing:(UITabBarController *)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_3604_UIKit_UITabBarController__UITabBarControllerDelegate_WillBeginEditing_function callback_3604_UIKit_UITabBarController__UITabBarControllerDelegate_WillBeginEditing;
		xamarin_registrar_dlsym ((void **) &callback_3604_UIKit_UITabBarController__UITabBarControllerDelegate_WillBeginEditing, "Microsoft.MacCatalyst", "callback_3604_UIKit_UITabBarController__UITabBarControllerDelegate_WillBeginEditing", 147);
		callback_3604_UIKit_UITabBarController__UITabBarControllerDelegate_WillBeginEditing (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef BOOL (*callback_3605_UIKit_UITabBarController__UITabBarControllerDelegate_RespondsToSelector_function) (id self, SEL sel, SEL p0, GCHandle* exception_gchandle);
	-(BOOL) respondsToSelector:(SEL)p0
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		BOOL rv = { 0 };
		static callback_3605_UIKit_UITabBarController__UITabBarControllerDelegate_RespondsToSelector_function callback_3605_UIKit_UITabBarController__UITabBarControllerDelegate_RespondsToSelector;
		xamarin_registrar_dlsym ((void **) &callback_3605_UIKit_UITabBarController__UITabBarControllerDelegate_RespondsToSelector, "Microsoft.MacCatalyst", "callback_3605_UIKit_UITabBarController__UITabBarControllerDelegate_RespondsToSelector", 148);
		rv = callback_3605_UIKit_UITabBarController__UITabBarControllerDelegate_RespondsToSelector (self, _cmd, p0, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	typedef id (*callback_3586_UIKit_UITabBarController__UITabBarControllerDelegate__ctor_function) (id self, SEL sel, bool* call_super, GCHandle* exception_gchandle);
	-(id) init
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		bool call_super = false;
		id rv = { 0 };
		static callback_3586_UIKit_UITabBarController__UITabBarControllerDelegate__ctor_function callback_3586_UIKit_UITabBarController__UITabBarControllerDelegate__ctor;
		xamarin_registrar_dlsym ((void **) &callback_3586_UIKit_UITabBarController__UITabBarControllerDelegate__ctor, "Microsoft.MacCatalyst", "callback_3586_UIKit_UITabBarController__UITabBarControllerDelegate__ctor", 129);
		rv = callback_3586_UIKit_UITabBarController__UITabBarControllerDelegate__ctor (self, _cmd, &call_super, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@implementation UIKit_UITabBarItem_UITabBarItemAppearance {
}
@end

@interface System_Net_Http_NSUrlSessionHandler_NSUrlSessionHandlerDelegate : NSObject<NSURLSessionDataDelegate, NSURLSessionDelegate, NSURLSessionTaskDelegate> {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(void) URLSession:(NSURLSession *)p0 dataTask:(NSURLSessionDataTask *)p1 didReceiveResponse:(NSURLResponse *)p2 completionHandler:(void (^)(void *))p3;
	-(void) URLSession:(NSURLSession *)p0 dataTask:(NSURLSessionDataTask *)p1 didReceiveData:(NSData *)p2;
	-(void) URLSession:(NSURLSession *)p0 task:(NSURLSessionTask *)p1 didCompleteWithError:(NSError *)p2;
	-(void) URLSession:(NSURLSession *)p0 dataTask:(NSURLSessionDataTask *)p1 willCacheResponse:(NSCachedURLResponse *)p2 completionHandler:(void (^)(void *))p3;
	-(void) URLSession:(NSURLSession *)p0 task:(NSURLSessionTask *)p1 willPerformHTTPRedirection:(NSHTTPURLResponse *)p2 newRequest:(NSURLRequest *)p3 completionHandler:(void (^)(void *))p4;
	-(void) URLSession:(NSURLSession *)p0 task:(NSURLSessionTask *)p1 didReceiveChallenge:(NSURLAuthenticationChallenge *)p2 completionHandler:(void (^)(void *, void *))p3;
	-(BOOL) conformsToProtocol:(void *)p0;
@end

@implementation System_Net_Http_NSUrlSessionHandler_NSUrlSessionHandlerDelegate {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	typedef void (*callback_3064_System_Net_Http_NSUrlSessionHandler_NSUrlSessionHandlerDelegate_DidReceiveResponse_function) (id self, SEL sel, NSURLSession * p0, NSURLSessionDataTask * p1, NSURLResponse * p2, void (^p3)(void *), GCHandle* exception_gchandle);
	-(void) URLSession:(NSURLSession *)p0 dataTask:(NSURLSessionDataTask *)p1 didReceiveResponse:(NSURLResponse *)p2 completionHandler:(void (^)(void *))p3
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_3064_System_Net_Http_NSUrlSessionHandler_NSUrlSessionHandlerDelegate_DidReceiveResponse_function callback_3064_System_Net_Http_NSUrlSessionHandler_NSUrlSessionHandlerDelegate_DidReceiveResponse;
		xamarin_registrar_dlsym ((void **) &callback_3064_System_Net_Http_NSUrlSessionHandler_NSUrlSessionHandlerDelegate_DidReceiveResponse, "Microsoft.MacCatalyst", "callback_3064_System_Net_Http_NSUrlSessionHandler_NSUrlSessionHandlerDelegate_DidReceiveResponse", 17);
		callback_3064_System_Net_Http_NSUrlSessionHandler_NSUrlSessionHandlerDelegate_DidReceiveResponse (self, _cmd, p0, p1, p2, p3, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_3065_System_Net_Http_NSUrlSessionHandler_NSUrlSessionHandlerDelegate_DidReceiveData_function) (id self, SEL sel, NSURLSession * p0, NSURLSessionDataTask * p1, NSData * p2, GCHandle* exception_gchandle);
	-(void) URLSession:(NSURLSession *)p0 dataTask:(NSURLSessionDataTask *)p1 didReceiveData:(NSData *)p2
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_3065_System_Net_Http_NSUrlSessionHandler_NSUrlSessionHandlerDelegate_DidReceiveData_function callback_3065_System_Net_Http_NSUrlSessionHandler_NSUrlSessionHandlerDelegate_DidReceiveData;
		xamarin_registrar_dlsym ((void **) &callback_3065_System_Net_Http_NSUrlSessionHandler_NSUrlSessionHandlerDelegate_DidReceiveData, "Microsoft.MacCatalyst", "callback_3065_System_Net_Http_NSUrlSessionHandler_NSUrlSessionHandlerDelegate_DidReceiveData", 18);
		callback_3065_System_Net_Http_NSUrlSessionHandler_NSUrlSessionHandlerDelegate_DidReceiveData (self, _cmd, p0, p1, p2, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_3066_System_Net_Http_NSUrlSessionHandler_NSUrlSessionHandlerDelegate_DidCompleteWithError_function) (id self, SEL sel, NSURLSession * p0, NSURLSessionTask * p1, NSError * p2, GCHandle* exception_gchandle);
	-(void) URLSession:(NSURLSession *)p0 task:(NSURLSessionTask *)p1 didCompleteWithError:(NSError *)p2
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_3066_System_Net_Http_NSUrlSessionHandler_NSUrlSessionHandlerDelegate_DidCompleteWithError_function callback_3066_System_Net_Http_NSUrlSessionHandler_NSUrlSessionHandlerDelegate_DidCompleteWithError;
		xamarin_registrar_dlsym ((void **) &callback_3066_System_Net_Http_NSUrlSessionHandler_NSUrlSessionHandlerDelegate_DidCompleteWithError, "Microsoft.MacCatalyst", "callback_3066_System_Net_Http_NSUrlSessionHandler_NSUrlSessionHandlerDelegate_DidCompleteWithError", 19);
		callback_3066_System_Net_Http_NSUrlSessionHandler_NSUrlSessionHandlerDelegate_DidCompleteWithError (self, _cmd, p0, p1, p2, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_3067_System_Net_Http_NSUrlSessionHandler_NSUrlSessionHandlerDelegate_WillCacheResponse_function) (id self, SEL sel, NSURLSession * p0, NSURLSessionDataTask * p1, NSCachedURLResponse * p2, void (^p3)(void *), GCHandle* exception_gchandle);
	-(void) URLSession:(NSURLSession *)p0 dataTask:(NSURLSessionDataTask *)p1 willCacheResponse:(NSCachedURLResponse *)p2 completionHandler:(void (^)(void *))p3
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_3067_System_Net_Http_NSUrlSessionHandler_NSUrlSessionHandlerDelegate_WillCacheResponse_function callback_3067_System_Net_Http_NSUrlSessionHandler_NSUrlSessionHandlerDelegate_WillCacheResponse;
		xamarin_registrar_dlsym ((void **) &callback_3067_System_Net_Http_NSUrlSessionHandler_NSUrlSessionHandlerDelegate_WillCacheResponse, "Microsoft.MacCatalyst", "callback_3067_System_Net_Http_NSUrlSessionHandler_NSUrlSessionHandlerDelegate_WillCacheResponse", 20);
		callback_3067_System_Net_Http_NSUrlSessionHandler_NSUrlSessionHandlerDelegate_WillCacheResponse (self, _cmd, p0, p1, p2, p3, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_3068_System_Net_Http_NSUrlSessionHandler_NSUrlSessionHandlerDelegate_WillPerformHttpRedirection_function) (id self, SEL sel, NSURLSession * p0, NSURLSessionTask * p1, NSHTTPURLResponse * p2, NSURLRequest * p3, void (^p4)(void *), GCHandle* exception_gchandle);
	-(void) URLSession:(NSURLSession *)p0 task:(NSURLSessionTask *)p1 willPerformHTTPRedirection:(NSHTTPURLResponse *)p2 newRequest:(NSURLRequest *)p3 completionHandler:(void (^)(void *))p4
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_3068_System_Net_Http_NSUrlSessionHandler_NSUrlSessionHandlerDelegate_WillPerformHttpRedirection_function callback_3068_System_Net_Http_NSUrlSessionHandler_NSUrlSessionHandlerDelegate_WillPerformHttpRedirection;
		xamarin_registrar_dlsym ((void **) &callback_3068_System_Net_Http_NSUrlSessionHandler_NSUrlSessionHandlerDelegate_WillPerformHttpRedirection, "Microsoft.MacCatalyst", "callback_3068_System_Net_Http_NSUrlSessionHandler_NSUrlSessionHandlerDelegate_WillPerformHttpRedirection", 21);
		callback_3068_System_Net_Http_NSUrlSessionHandler_NSUrlSessionHandlerDelegate_WillPerformHttpRedirection (self, _cmd, p0, p1, p2, p3, p4, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}

	typedef void (*callback_3069_System_Net_Http_NSUrlSessionHandler_NSUrlSessionHandlerDelegate_DidReceiveChallenge_function) (id self, SEL sel, NSURLSession * p0, NSURLSessionTask * p1, NSURLAuthenticationChallenge * p2, void (^p3)(void *, void *), GCHandle* exception_gchandle);
	-(void) URLSession:(NSURLSession *)p0 task:(NSURLSessionTask *)p1 didReceiveChallenge:(NSURLAuthenticationChallenge *)p2 completionHandler:(void (^)(void *, void *))p3
	{
		GCHandle exception_gchandle = INVALID_GCHANDLE;
		static callback_3069_System_Net_Http_NSUrlSessionHandler_NSUrlSessionHandlerDelegate_DidReceiveChallenge_function callback_3069_System_Net_Http_NSUrlSessionHandler_NSUrlSessionHandlerDelegate_DidReceiveChallenge;
		xamarin_registrar_dlsym ((void **) &callback_3069_System_Net_Http_NSUrlSessionHandler_NSUrlSessionHandlerDelegate_DidReceiveChallenge, "Microsoft.MacCatalyst", "callback_3069_System_Net_Http_NSUrlSessionHandler_NSUrlSessionHandlerDelegate_DidReceiveChallenge", 22);
		callback_3069_System_Net_Http_NSUrlSessionHandler_NSUrlSessionHandlerDelegate_DidReceiveChallenge (self, _cmd, p0, p1, p2, p3, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
@end

	static MTClassMap __xamarin_class_map [] = {
		{ NULL, 0x1 /* #0 'NSObject' => 'Foundation.NSObject, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3 /* #1 'UIResponder' => 'UIKit.UIResponder, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x9 /* #2 'Microsoft_Maui_MauiUIApplicationDelegate' => 'Microsoft.Maui.MauiUIApplicationDelegate, Microsoft.Maui' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0xB /* #3 'AppDelegate' => 'MiniProject.AppDelegate, MiniProject' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0xD /* #4 'UIGestureRecognizer' => 'UIKit.UIGestureRecognizer, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xF /* #5 'Microsoft_Maui_Controls_Compatibility_Platform_iOS_GlobalCloseContextGestureRecognizer' => 'Microsoft.Maui.Controls.Compatibility.Platform.iOS.GlobalCloseContextGestureRecognizer, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x11 /* #6 'Microsoft_Maui_Controls_Compatibility_Platform_iOS_NativeViewPropertyListener' => 'Microsoft.Maui.Controls.Compatibility.Platform.iOS.NativeViewPropertyListener, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x13 /* #7 'UIViewController' => 'UIKit.UIViewController, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x15 /* #8 'Microsoft_Maui_Platform_ModalWrapper' => 'Microsoft.Maui.Platform.ModalWrapper, Microsoft.Maui' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x1B /* #9 'Microsoft_Maui_Controls_Platform_ControlsModalWrapper' => 'Microsoft.Maui.Controls.Platform.ControlsModalWrapper, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x29 /* #10 'UIView' => 'UIKit.UIView, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2B /* #11 'Microsoft_Maui_Controls_Platform_Compatibility_UIContainerView' => 'Microsoft.Maui.Controls.Platform.Compatibility.UIContainerView, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x2D /* #12 'Microsoft_Maui_Controls_Platform_Compatibility_ShellFlyoutHeaderContainer' => 'Microsoft.Maui.Controls.Platform.Compatibility.ShellFlyoutHeaderContainer, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x2F /* #13 'UITabBarController' => 'UIKit.UITabBarController, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x35 /* #14 'Microsoft_Maui_Controls_Platform_Compatibility_ShellItemRenderer' => 'Microsoft.Maui.Controls.Platform.Compatibility.ShellItemRenderer, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x3F /* #15 'UITableViewController' => 'UIKit.UITableViewController, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x41 /* #16 'Microsoft_Maui_Controls_Platform_Compatibility_ShellTableViewController' => 'Microsoft.Maui.Controls.Platform.Compatibility.ShellTableViewController, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x47 /* #17 'UITableViewCell' => 'UIKit.UITableViewCell, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x49 /* #18 'Microsoft_Maui_Controls_Platform_Compatibility_UIContainerCell' => 'Microsoft.Maui.Controls.Platform.Compatibility.UIContainerCell, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x4B /* #19 'UICollectionReusableView' => 'UIKit.UICollectionReusableView, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x4D /* #20 'UICollectionViewCell' => 'UIKit.UICollectionViewCell, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x4F /* #21 'Microsoft_Maui_Controls_Handlers_Items_ItemsViewCell' => 'Microsoft.Maui.Controls.Handlers.Items.ItemsViewCell, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x51 /* #22 'Microsoft_Maui_Controls_Handlers_Items_TemplatedCell' => 'Microsoft.Maui.Controls.Handlers.Items.TemplatedCell, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x53 /* #23 'Microsoft_Maui_Controls_Handlers_Items_CarouselTemplatedCell' => 'Microsoft.Maui.Controls.Handlers.Items.CarouselTemplatedCell, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x59 /* #24 'UICollectionViewController' => 'UIKit.UICollectionViewController, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x5B /* #25 'Microsoft_Maui_Controls_Handlers_Items_ItemsViewController_1' => 'Microsoft.Maui.Controls.Handlers.Items.ItemsViewController`1, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x5D /* #26 'Microsoft_Maui_Controls_Handlers_Items_CarouselViewController' => 'Microsoft.Maui.Controls.Handlers.Items.CarouselViewController, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x5F /* #27 'Microsoft_MacCatalyst__UIKit_UICollectionViewDelegate' => 'UIKit.UICollectionViewDelegate, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x61 /* #28 'Microsoft_MacCatalyst__UIKit_UICollectionViewDelegateFlowLayout' => 'UIKit.UICollectionViewDelegateFlowLayout, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x63 /* #29 'Microsoft_Maui_Controls_Handlers_Items_ItemsViewDelegator_2' => 'Microsoft.Maui.Controls.Handlers.Items.ItemsViewDelegator`2, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x65 /* #30 'Microsoft_Maui_Controls_Handlers_Items_CarouselViewDelegator' => 'Microsoft.Maui.Controls.Handlers.Items.CarouselViewDelegator, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x67 /* #31 'UICollectionViewLayout' => 'UIKit.UICollectionViewLayout, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x69 /* #32 'UICollectionViewFlowLayout' => 'UIKit.UICollectionViewFlowLayout, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x6B /* #33 'Microsoft_Maui_Controls_Handlers_Items_ItemsViewLayout' => 'Microsoft.Maui.Controls.Handlers.Items.ItemsViewLayout, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x6D /* #34 'Microsoft_Maui_Controls_Handlers_Items_CarouselViewLayout' => 'Microsoft.Maui.Controls.Handlers.Items.CarouselViewLayout, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x6F /* #35 'Microsoft_Maui_Controls_Handlers_Items_DefaultCell' => 'Microsoft.Maui.Controls.Handlers.Items.DefaultCell, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x71 /* #36 'Microsoft_Maui_Controls_Handlers_Items_GridViewLayout' => 'Microsoft.Maui.Controls.Handlers.Items.GridViewLayout, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x73 /* #37 'Microsoft_Maui_Controls_Handlers_Items_StructuredItemsViewController_1' => 'Microsoft.Maui.Controls.Handlers.Items.StructuredItemsViewController`1, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x75 /* #38 'Microsoft_Maui_Controls_Handlers_Items_SelectableItemsViewController_1' => 'Microsoft.Maui.Controls.Handlers.Items.SelectableItemsViewController`1, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x77 /* #39 'Microsoft_Maui_Controls_Handlers_Items_GroupableItemsViewController_1' => 'Microsoft.Maui.Controls.Handlers.Items.GroupableItemsViewController`1, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x79 /* #40 'Microsoft_Maui_Controls_Handlers_Items_SelectableItemsViewDelegator_2' => 'Microsoft.Maui.Controls.Handlers.Items.SelectableItemsViewDelegator`2, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x7B /* #41 'Microsoft_Maui_Controls_Handlers_Items_GroupableItemsViewDelegator_2' => 'Microsoft.Maui.Controls.Handlers.Items.GroupableItemsViewDelegator`2, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x7D /* #42 'Microsoft_Maui_Controls_Handlers_Items_HeightConstrainedTemplatedCell' => 'Microsoft.Maui.Controls.Handlers.Items.HeightConstrainedTemplatedCell, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x7F /* #43 'Microsoft_Maui_Controls_Handlers_Items_HorizontalCell' => 'Microsoft.Maui.Controls.Handlers.Items.HorizontalCell, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x81 /* #44 'Microsoft_Maui_Controls_Handlers_Items_HorizontalDefaultCell' => 'Microsoft.Maui.Controls.Handlers.Items.HorizontalDefaultCell, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x83 /* #45 'Microsoft_Maui_Controls_Handlers_Items_HorizontalDefaultSupplementalView' => 'Microsoft.Maui.Controls.Handlers.Items.HorizontalDefaultSupplementalView, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x85 /* #46 'Microsoft_Maui_Controls_Handlers_Items_HorizontalSupplementaryView' => 'Microsoft.Maui.Controls.Handlers.Items.HorizontalSupplementaryView, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x87 /* #47 'Microsoft_Maui_Controls_Handlers_Items_ListViewLayout' => 'Microsoft.Maui.Controls.Handlers.Items.ListViewLayout, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x89 /* #48 'Microsoft_Maui_Controls_Handlers_Items_ReorderableItemsViewController_1' => 'Microsoft.Maui.Controls.Handlers.Items.ReorderableItemsViewController`1, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x8B /* #49 'Microsoft_Maui_Controls_Handlers_Items_ReorderableItemsViewDelegator_2' => 'Microsoft.Maui.Controls.Handlers.Items.ReorderableItemsViewDelegator`2, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x8D /* #50 'Microsoft_Maui_Controls_Handlers_Items_WidthConstrainedTemplatedCell' => 'Microsoft.Maui.Controls.Handlers.Items.WidthConstrainedTemplatedCell, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x8F /* #51 'Microsoft_Maui_Controls_Handlers_Items_VerticalCell' => 'Microsoft.Maui.Controls.Handlers.Items.VerticalCell, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x91 /* #52 'Microsoft_Maui_Controls_Handlers_Items_VerticalDefaultCell' => 'Microsoft.Maui.Controls.Handlers.Items.VerticalDefaultCell, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x93 /* #53 'Microsoft_Maui_Controls_Handlers_Items_VerticalDefaultSupplementalView' => 'Microsoft.Maui.Controls.Handlers.Items.VerticalDefaultSupplementalView, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x95 /* #54 'Microsoft_Maui_Controls_Handlers_Items_VerticalSupplementaryView' => 'Microsoft.Maui.Controls.Handlers.Items.VerticalSupplementaryView, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x97 /* #55 'Microsoft_Maui_Controls_Handlers_Items2_ItemsViewDelegator2_2' => 'Microsoft.Maui.Controls.Handlers.Items2.ItemsViewDelegator2`2, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x99 /* #56 'Microsoft_Maui_Controls_Handlers_Items2_CarouselViewDelegator2' => 'Microsoft.Maui.Controls.Handlers.Items2.CarouselViewDelegator2, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x9B /* #57 'Microsoft_Maui_Controls_Handlers_Items2_ItemsViewCell2' => 'Microsoft.Maui.Controls.Handlers.Items2.ItemsViewCell2, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x9D /* #58 'Microsoft_Maui_Controls_Handlers_Items2_DefaultCell2' => 'Microsoft.Maui.Controls.Handlers.Items2.DefaultCell2, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x9F /* #59 'Microsoft_Maui_Controls_Handlers_Items2_ItemsViewController2_1' => 'Microsoft.Maui.Controls.Handlers.Items2.ItemsViewController2`1, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0xA1 /* #60 'Microsoft_Maui_Controls_Handlers_Items2_StructuredItemsViewController2_1' => 'Microsoft.Maui.Controls.Handlers.Items2.StructuredItemsViewController2`1, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0xA3 /* #61 'Microsoft_Maui_Controls_Handlers_Items2_SelectableItemsViewController2_1' => 'Microsoft.Maui.Controls.Handlers.Items2.SelectableItemsViewController2`1, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0xA5 /* #62 'Microsoft_Maui_Controls_Handlers_Items2_GroupableItemsViewController2_1' => 'Microsoft.Maui.Controls.Handlers.Items2.GroupableItemsViewController2`1, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0xA7 /* #63 'Microsoft_Maui_Controls_Handlers_Items2_SelectableItemsViewDelegator2_2' => 'Microsoft.Maui.Controls.Handlers.Items2.SelectableItemsViewDelegator2`2, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0xA9 /* #64 'Microsoft_Maui_Controls_Handlers_Items2_GroupableItemsViewDelegator2_2' => 'Microsoft.Maui.Controls.Handlers.Items2.GroupableItemsViewDelegator2`2, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0xAB /* #65 'Microsoft_Maui_Controls_Handlers_Items2_TemplatedCell2' => 'Microsoft.Maui.Controls.Handlers.Items2.TemplatedCell2, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0xAD /* #66 'Microsoft_Maui_Controls_Handlers_Items2_HeightConstrainedTemplatedCell2' => 'Microsoft.Maui.Controls.Handlers.Items2.HeightConstrainedTemplatedCell2, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0xAF /* #67 'Microsoft_Maui_Controls_Handlers_Items2_HorizontalCell2' => 'Microsoft.Maui.Controls.Handlers.Items2.HorizontalCell2, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0xB1 /* #68 'Microsoft_Maui_Controls_Handlers_Items2_HorizontalDefaultCell2' => 'Microsoft.Maui.Controls.Handlers.Items2.HorizontalDefaultCell2, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0xB3 /* #69 'Microsoft_Maui_Controls_Handlers_Items2_HorizontalDefaultSupplementalView2' => 'Microsoft.Maui.Controls.Handlers.Items2.HorizontalDefaultSupplementalView2, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0xB5 /* #70 'Microsoft_Maui_Controls_Handlers_Items2_HorizontalSupplementaryView2' => 'Microsoft.Maui.Controls.Handlers.Items2.HorizontalSupplementaryView2, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0xB7 /* #71 'Microsoft_Maui_Controls_Handlers_Items2_ReorderableItemsViewController2_1' => 'Microsoft.Maui.Controls.Handlers.Items2.ReorderableItemsViewController2`1, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0xB9 /* #72 'Microsoft_Maui_Controls_Handlers_Items2_ReorderableItemsViewDelegator2_2' => 'Microsoft.Maui.Controls.Handlers.Items2.ReorderableItemsViewDelegator2`2, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0xBB /* #73 'Microsoft_Maui_Controls_Handlers_Items2_UIContainerView2' => 'Microsoft.Maui.Controls.Handlers.Items2.UIContainerView2, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0xBD /* #74 'Microsoft_Maui_Controls_Handlers_Items2_WidthConstrainedTemplatedCell2' => 'Microsoft.Maui.Controls.Handlers.Items2.WidthConstrainedTemplatedCell2, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0xBF /* #75 'Microsoft_Maui_Controls_Handlers_Items2_VerticalCell2' => 'Microsoft.Maui.Controls.Handlers.Items2.VerticalCell2, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0xC1 /* #76 'Microsoft_Maui_Controls_Handlers_Items2_VerticalDefaultCell2' => 'Microsoft.Maui.Controls.Handlers.Items2.VerticalDefaultCell2, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0xC3 /* #77 'Microsoft_Maui_Controls_Handlers_Items2_VerticalDefaultSupplementalView2' => 'Microsoft.Maui.Controls.Handlers.Items2.VerticalDefaultSupplementalView2, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0xC5 /* #78 'Microsoft_Maui_Controls_Handlers_Items2_VerticalSupplementaryView2' => 'Microsoft.Maui.Controls.Handlers.Items2.VerticalSupplementaryView2, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0xC7 /* #79 'Microsoft_Maui_Controls_Handlers_Compatibility_VisualElementRenderer_1' => 'Microsoft.Maui.Controls.Handlers.Compatibility.VisualElementRenderer`1, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0xC9 /* #80 'Microsoft_Maui_Controls_Handlers_Compatibility_ViewRenderer_2' => 'Microsoft.Maui.Controls.Handlers.Compatibility.ViewRenderer`2, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0xCB /* #81 'Microsoft_Maui_Controls_Handlers_Compatibility_ViewRenderer' => 'Microsoft.Maui.Controls.Handlers.Compatibility.ViewRenderer, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0xCD /* #82 'Microsoft_Maui_Controls_Handlers_Compatibility_CellTableViewCell' => 'Microsoft.Maui.Controls.Handlers.Compatibility.CellTableViewCell, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0xCF /* #83 'Microsoft_Maui_Controls_Handlers_Compatibility_iOS7ButtonContainer' => 'Microsoft.Maui.Controls.Handlers.Compatibility.iOS7ButtonContainer, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0xD1 /* #84 'UITableViewHeaderFooterView' => 'UIKit.UITableViewHeaderFooterView, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xD3 /* #85 'Microsoft_Maui_Controls_Handlers_Compatibility_HeaderWrapperView' => 'Microsoft.Maui.Controls.Handlers.Compatibility.HeaderWrapperView, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0xD9 /* #86 'UIControl' => 'UIKit.UIControl, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xDB /* #87 'UIRefreshControl' => 'UIKit.UIRefreshControl, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xDD /* #88 'Microsoft_Maui_Controls_Handlers_Compatibility_FormsRefreshControl' => 'Microsoft.Maui.Controls.Handlers.Compatibility.FormsRefreshControl, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0xDF /* #89 'Microsoft_MacCatalyst__UIKit_UIScrollViewDelegate' => 'UIKit.UIScrollViewDelegate, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xE1 /* #90 'Microsoft_MacCatalyst__UIKit_UITableViewSource' => 'UIKit.UITableViewSource, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xE3 /* #91 'Microsoft_Maui_Controls_Handlers_Compatibility_TableViewModelRenderer' => 'Microsoft.Maui.Controls.Handlers.Compatibility.TableViewModelRenderer, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0xE5 /* #92 'Microsoft_Maui_Controls_Handlers_Compatibility_UnEvenTableViewModelRenderer' => 'Microsoft.Maui.Controls.Handlers.Compatibility.UnEvenTableViewModelRenderer, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0xE7 /* #93 'Microsoft_Maui_Controls_Handlers_Compatibility_TableViewRenderer' => 'Microsoft.Maui.Controls.Handlers.Compatibility.TableViewRenderer, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0xE9 /* #94 'UITapGestureRecognizer' => 'UIKit.UITapGestureRecognizer, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xEB /* #95 'Microsoft_Maui_Platform_ResignFirstResponderTouchGestureRecognizer' => 'Microsoft.Maui.Platform.ResignFirstResponderTouchGestureRecognizer, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0xED /* #96 'UIBarItem' => 'UIKit.UIBarItem, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xEF /* #97 'UIBarButtonItem' => 'UIKit.UIBarButtonItem, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xF1 /* #98 'Microsoft_Maui_Controls_Compatibility_Platform_iOS_ToolbarItemExtensions_PrimaryToolbarItem' => 'Microsoft.Maui.Controls.Compatibility.Platform.iOS.ToolbarItemExtensions+PrimaryToolbarItem, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0xF3 /* #99 'Microsoft_Maui_Controls_Platform_DragAndDropDelegate_CustomLocalStateData' => 'Microsoft.Maui.Controls.Platform.DragAndDropDelegate+CustomLocalStateData, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0xFD /* #100 'Microsoft_Maui_Controls_Platform_DragAndDropDelegate' => 'Microsoft.Maui.Controls.Platform.DragAndDropDelegate, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0xFF /* #101 '__UIGestureRecognizerToken' => 'UIKit.UIGestureRecognizer+Token, Microsoft.MacCatalyst' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x101 /* #102 '__UIGestureRecognizer' => 'Microsoft.Maui.Controls.Platform.iOS.CustomPressGestureRecognizer+Callback, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x103 /* #103 'Microsoft_Maui_Controls_Platform_iOS_CustomPressGestureRecognizer' => 'Microsoft.Maui.Controls.Platform.iOS.CustomPressGestureRecognizer, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x105 /* #104 'Microsoft_Maui_Controls_Platform_Compatibility_ShellFlyoutContentRenderer' => 'Microsoft.Maui.Controls.Platform.Compatibility.ShellFlyoutContentRenderer, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x107 /* #105 'Microsoft_Maui_Controls_Platform_Compatibility_ShellFlyoutRenderer' => 'Microsoft.Maui.Controls.Platform.Compatibility.ShellFlyoutRenderer, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x109 /* #106 'Microsoft_Maui_Controls_Platform_Compatibility_ShellPageRendererTracker_TitleViewContainer' => 'Microsoft.Maui.Controls.Platform.Compatibility.ShellPageRendererTracker+TitleViewContainer, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x10B /* #107 'Microsoft_Maui_Controls_Platform_Compatibility_ShellSearchResultsRenderer' => 'Microsoft.Maui.Controls.Platform.Compatibility.ShellSearchResultsRenderer, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x10D /* #108 'Microsoft_MacCatalyst__UIKit_UIGestureRecognizerDelegate' => 'UIKit.UIGestureRecognizerDelegate, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x10F /* #109 'Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRenderer_GestureDelegate' => 'Microsoft.Maui.Controls.Platform.Compatibility.ShellSectionRenderer+GestureDelegate, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x111 /* #110 'Microsoft_MacCatalyst__UIKit_UINavigationControllerDelegate' => 'UIKit.UINavigationControllerDelegate, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x113 /* #111 'Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRenderer_NavDelegate' => 'Microsoft.Maui.Controls.Platform.Compatibility.ShellSectionRenderer+NavDelegate, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x115 /* #112 'UINavigationController' => 'UIKit.UINavigationController, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x117 /* #113 'Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRenderer' => 'Microsoft.Maui.Controls.Platform.Compatibility.ShellSectionRenderer, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x119 /* #114 'Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootHeader_ShellSectionHeaderCell' => 'Microsoft.Maui.Controls.Platform.Compatibility.ShellSectionRootHeader+ShellSectionHeaderCell, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x11B /* #115 'Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootHeader' => 'Microsoft.Maui.Controls.Platform.Compatibility.ShellSectionRootHeader, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x11D /* #116 'Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootRenderer' => 'Microsoft.Maui.Controls.Platform.Compatibility.ShellSectionRootRenderer, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x11F /* #117 'Microsoft_Maui_Controls_Platform_Compatibility_ShellTableViewSource_SeparatorView' => 'Microsoft.Maui.Controls.Platform.Compatibility.ShellTableViewSource+SeparatorView, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x121 /* #118 'Microsoft_Maui_Controls_Platform_Compatibility_ShellTableViewSource' => 'Microsoft.Maui.Controls.Platform.Compatibility.ShellTableViewSource, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x123 /* #119 'UIScrollView' => 'UIKit.UIScrollView, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x125 /* #120 'UICollectionView' => 'UIKit.UICollectionView, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x127 /* #121 'Microsoft_Maui_Controls_Handlers_Items_MauiCollectionView' => 'Microsoft.Maui.Controls.Handlers.Items.MauiCollectionView, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x129 /* #122 'Microsoft_Maui_Controls_Handlers_Items2_CarouselViewController2' => 'Microsoft.Maui.Controls.Handlers.Items2.CarouselViewController2, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x12B /* #123 'UICollectionViewCompositionalLayout' => 'UIKit.UICollectionViewCompositionalLayout, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x12D /* #124 'Microsoft_Maui_Controls_Handlers_Items2_LayoutFactory2_CustomUICollectionViewCompositionalLayout' => 'Microsoft.Maui.Controls.Handlers.Items2.LayoutFactory2+CustomUICollectionViewCompositionalLayout, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x12F /* #125 'Microsoft_Maui_Controls_Handlers_Compatibility_PhoneFlyoutPageRenderer_ChildViewController' => 'Microsoft.Maui.Controls.Handlers.Compatibility.PhoneFlyoutPageRenderer+ChildViewController, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x131 /* #126 'Microsoft_Maui_Controls_Handlers_Compatibility_PhoneFlyoutPageRenderer' => 'Microsoft.Maui.Controls.Handlers.Compatibility.PhoneFlyoutPageRenderer, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x133 /* #127 'Microsoft_Maui_Platform_MauiView' => 'Microsoft.Maui.Platform.MauiView, Microsoft.Maui' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x135 /* #128 'Microsoft_Maui_Platform_ContentView' => 'Microsoft.Maui.Platform.ContentView, Microsoft.Maui' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x137 /* #129 'Microsoft_Maui_Controls_Handlers_Compatibility_FrameRenderer_FrameView' => 'Microsoft.Maui.Controls.Handlers.Compatibility.FrameRenderer+FrameView, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x139 /* #130 'Microsoft_Maui_Controls_Handlers_Compatibility_FrameRenderer' => 'Microsoft.Maui.Controls.Handlers.Compatibility.FrameRenderer, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x13B /* #131 'UIAlertController' => 'UIKit.UIAlertController, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x13D /* #132 'Microsoft_Maui_Controls_Handlers_Compatibility_ContextActionsCell_MoreActionSheetController' => 'Microsoft.Maui.Controls.Handlers.Compatibility.ContextActionsCell+MoreActionSheetController, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x13F /* #133 'Microsoft_Maui_Controls_Handlers_Compatibility_ContextActionsCell' => 'Microsoft.Maui.Controls.Handlers.Compatibility.ContextActionsCell, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x141 /* #134 'Microsoft_Maui_Controls_Handlers_Compatibility_ContextScrollViewDelegate' => 'Microsoft.Maui.Controls.Handlers.Compatibility.ContextScrollViewDelegate, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x143 /* #135 'Microsoft_Maui_Controls_Handlers_Compatibility_ListViewRenderer_ListViewDataSource' => 'Microsoft.Maui.Controls.Handlers.Compatibility.ListViewRenderer+ListViewDataSource, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x145 /* #136 'Microsoft_Maui_Controls_Handlers_Compatibility_ListViewRenderer_UnevenListViewDataSource' => 'Microsoft.Maui.Controls.Handlers.Compatibility.ListViewRenderer+UnevenListViewDataSource, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x147 /* #137 'Microsoft_Maui_Controls_Handlers_Compatibility_ListViewRenderer' => 'Microsoft.Maui.Controls.Handlers.Compatibility.ListViewRenderer, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x149 /* #138 'Microsoft_Maui_Controls_Handlers_Compatibility_FormsUITableViewController' => 'Microsoft.Maui.Controls.Handlers.Compatibility.FormsUITableViewController, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x14B /* #139 'Microsoft_Maui_Controls_Handlers_Compatibility_ViewCellRenderer_ViewTableCell' => 'Microsoft.Maui.Controls.Handlers.Compatibility.ViewCellRenderer+ViewTableCell, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x14D /* #140 'Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_MauiNavigationDelegate' => 'Microsoft.Maui.Controls.Handlers.Compatibility.NavigationRenderer+MauiNavigationDelegate, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x14F /* #141 'UINavigationBar' => 'UIKit.UINavigationBar, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x151 /* #142 'Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_MauiControlsNavigationBar' => 'Microsoft.Maui.Controls.Handlers.Compatibility.NavigationRenderer+MauiControlsNavigationBar, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x153 /* #143 'Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_Container' => 'Microsoft.Maui.Controls.Handlers.Compatibility.NavigationRenderer+Container, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x155 /* #144 'Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer' => 'Microsoft.Maui.Controls.Handlers.Compatibility.NavigationRenderer, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x157 /* #145 'Microsoft_Maui_Controls_Handlers_Compatibility_ShellRenderer' => 'Microsoft.Maui.Controls.Handlers.Compatibility.ShellRenderer, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x159 /* #146 'Microsoft_Maui_Controls_Handlers_Compatibility_TabbedRenderer' => 'Microsoft.Maui.Controls.Handlers.Compatibility.TabbedRenderer, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x15B /* #147 'Microsoft_Maui_Controls_Compatibility_Platform_iOS_ToolbarItemExtensions_SecondaryToolbarItem_SecondaryToolbarItemContent' => 'Microsoft.Maui.Controls.Compatibility.Platform.iOS.ToolbarItemExtensions+SecondaryToolbarItem+SecondaryToolbarItemContent, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x15D /* #148 'Microsoft_Maui_Controls_Compatibility_Platform_iOS_ToolbarItemExtensions_SecondaryToolbarItem' => 'Microsoft.Maui.Controls.Compatibility.Platform.iOS.ToolbarItemExtensions+SecondaryToolbarItem, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x15F /* #149 'Microsoft_MacCatalyst__UIKit_UIContextMenuInteractionDelegate' => 'UIKit.UIContextMenuInteractionDelegate, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x161 /* #150 'Microsoft_Maui_Controls_Platform_GesturePlatformManager_FakeRightClickContextMenuInteraction_FakeRightClickDelegate' => 'Microsoft.Maui.Controls.Platform.GesturePlatformManager+FakeRightClickContextMenuInteraction+FakeRightClickDelegate, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x167 /* #151 'UIContextMenuInteraction' => 'UIKit.UIContextMenuInteraction, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x169 /* #152 'Microsoft_Maui_Controls_Platform_GesturePlatformManager_FakeRightClickContextMenuInteraction' => 'Microsoft.Maui.Controls.Platform.GesturePlatformManager+FakeRightClickContextMenuInteraction, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x16B /* #153 'Microsoft_Maui_Controls_Handlers_Compatibility_ContextActionsCell_SelectGestureRecognizer' => 'Microsoft.Maui.Controls.Handlers.Compatibility.ContextActionsCell+SelectGestureRecognizer, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x16D /* #154 'Microsoft_Maui_Controls_Handlers_Compatibility_EntryCellRenderer_EntryCellTableViewCell' => 'Microsoft.Maui.Controls.Handlers.Compatibility.EntryCellRenderer+EntryCellTableViewCell, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x16F /* #155 'UIToolbar' => 'UIKit.UIToolbar, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x171 /* #156 'Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_SecondaryToolbar' => 'Microsoft.Maui.Controls.Handlers.Compatibility.NavigationRenderer+SecondaryToolbar, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x173 /* #157 'Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ParentingViewController' => 'Microsoft.Maui.Controls.Handlers.Compatibility.NavigationRenderer+ParentingViewController, Microsoft.Maui.Controls' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x175 /* #158 'NSLayoutConstraint' => 'UIKit.NSLayoutConstraint, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x177 /* #159 'Microsoft_Maui_Platform_CollapseConstraint' => 'Microsoft.Maui.Platform.CollapseConstraint, Microsoft.Maui' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x179 /* #160 'Microsoft_Maui_Platform_ContainerViewController' => 'Microsoft.Maui.Platform.ContainerViewController, Microsoft.Maui' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x17B /* #161 'Microsoft_Maui_Platform_LayoutView' => 'Microsoft.Maui.Platform.LayoutView, Microsoft.Maui' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x17D /* #162 'UIActivityIndicatorView' => 'UIKit.UIActivityIndicatorView, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x17F /* #163 'Microsoft_Maui_Platform_MauiActivityIndicator' => 'Microsoft.Maui.Platform.MauiActivityIndicator, Microsoft.Maui' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x181 /* #164 'PlatformGraphicsView' => 'Microsoft.Maui.Graphics.Platform.PlatformGraphicsView, Microsoft.Maui.Graphics' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x183 /* #165 'Microsoft_Maui_Platform_MauiBoxView' => 'Microsoft.Maui.Platform.MauiBoxView, Microsoft.Maui' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x185 /* #166 'CALayer' => 'CoreAnimation.CALayer, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x187 /* #167 'Microsoft_Maui_Platform_MauiCALayer' => 'Microsoft.Maui.Platform.MauiCALayer, Microsoft.Maui' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x189 /* #168 'UIButton' => 'UIKit.UIButton, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x18B /* #169 'Microsoft_Maui_Platform_MauiCheckBox' => 'Microsoft.Maui.Platform.MauiCheckBox, Microsoft.Maui' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x195 /* #170 'UITextField' => 'UIKit.UITextField, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x197 /* #171 'Microsoft_Maui_Platform_NoCaretField' => 'Microsoft.Maui.Platform.NoCaretField, Microsoft.Maui' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x199 /* #172 'Microsoft_Maui_Platform_MauiDatePicker' => 'Microsoft.Maui.Platform.MauiDatePicker, Microsoft.Maui' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x19B /* #173 'UIImageView' => 'UIKit.UIImageView, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x19D /* #174 'Microsoft_Maui_Platform_MauiImageView' => 'Microsoft.Maui.Platform.MauiImageView, Microsoft.Maui' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x19F /* #175 'UILabel' => 'UIKit.UILabel, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1A1 /* #176 'Microsoft_Maui_Platform_MauiLabel' => 'Microsoft.Maui.Platform.MauiLabel, Microsoft.Maui' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x1A3 /* #177 'UIPageControl' => 'UIKit.UIPageControl, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1A5 /* #178 'Microsoft_Maui_Platform_MauiPageControl' => 'Microsoft.Maui.Platform.MauiPageControl, Microsoft.Maui' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x1A7 /* #179 'Microsoft_Maui_Platform_MauiPicker' => 'Microsoft.Maui.Platform.MauiPicker, Microsoft.Maui' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x1A9 /* #180 'Microsoft_Maui_Platform_MauiRefreshView' => 'Microsoft.Maui.Platform.MauiRefreshView, Microsoft.Maui' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x1AB /* #181 'Microsoft_Maui_Platform_MauiScrollView' => 'Microsoft.Maui.Platform.MauiScrollView, Microsoft.Maui' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x1AD /* #182 'UISearchBar' => 'UIKit.UISearchBar, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1AF /* #183 'Microsoft_Maui_Platform_MauiSearchBar' => 'Microsoft.Maui.Platform.MauiSearchBar, Microsoft.Maui' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x1B1 /* #184 'Microsoft_Maui_Platform_MauiShapeView' => 'Microsoft.Maui.Platform.MauiShapeView, Microsoft.Maui' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x1B3 /* #185 'Microsoft_Maui_Platform_MauiTextField' => 'Microsoft.Maui.Platform.MauiTextField, Microsoft.Maui' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x1B5 /* #186 'UITextView' => 'UIKit.UITextView, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1B7 /* #187 'Microsoft_Maui_Platform_MauiTextView' => 'Microsoft.Maui.Platform.MauiTextView, Microsoft.Maui' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x1B9 /* #188 'Microsoft_Maui_Platform_MauiTimePicker' => 'Microsoft.Maui.Platform.MauiTimePicker, Microsoft.Maui' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x1BF /* #189 'Microsoft_Maui_Platform_MauiWebViewNavigationDelegate' => 'Microsoft.Maui.Platform.MauiWebViewNavigationDelegate, Microsoft.Maui' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x1C1 /* #190 'Microsoft_Maui_Platform_PageViewController' => 'Microsoft.Maui.Platform.PageViewController, Microsoft.Maui' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x1C3 /* #191 'Microsoft_Maui_Platform_SemanticSwitchContentView' => 'Microsoft.Maui.Platform.SemanticSwitchContentView, Microsoft.Maui' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x1C5 /* #192 'CAGradientLayer' => 'CoreAnimation.CAGradientLayer, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1C7 /* #193 'Microsoft_Maui_Platform_StaticCAGradientLayer' => 'Microsoft.Maui.Platform.StaticCAGradientLayer, Microsoft.Maui' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x1C9 /* #194 'Microsoft_Maui_Platform_StaticCALayer' => 'Microsoft.Maui.Platform.StaticCALayer, Microsoft.Maui' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x1CB /* #195 'CAShapeLayer' => 'CoreAnimation.CAShapeLayer, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1CD /* #196 'Microsoft_Maui_Platform_StaticCAShapeLayer' => 'Microsoft.Maui.Platform.StaticCAShapeLayer, Microsoft.Maui' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x1CF /* #197 'Microsoft_Maui_Platform_WrapperView' => 'Microsoft.Maui.Platform.WrapperView, Microsoft.Maui' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x1D5 /* #198 'Microsoft_MacCatalyst__UIKit_UIPickerViewModel' => 'UIKit.UIPickerViewModel, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1D7 /* #199 'Microsoft_Maui_Handlers_PickerSource' => 'Microsoft.Maui.Handlers.PickerSource, Microsoft.Maui' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x1D9 /* #200 'Microsoft_Maui_Handlers_SwipeItemButton' => 'Microsoft.Maui.Handlers.SwipeItemButton, Microsoft.Maui' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x1E3 /* #201 'Microsoft_Maui_MauiUISceneDelegate' => 'Microsoft.Maui.MauiUISceneDelegate, Microsoft.Maui' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x1E5 /* #202 'Microsoft_Maui_WindowOverlay_OverlayGraphicsView' => 'Microsoft.Maui.WindowOverlay+OverlayGraphicsView, Microsoft.Maui' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x1E7 /* #203 'WKWebView' => 'WebKit.WKWebView, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1E9 /* #204 'Microsoft_Maui_Platform_MauiHybridWebView' => 'Microsoft.Maui.Platform.MauiHybridWebView, Microsoft.Maui' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x1EB /* #205 'Microsoft_Maui_Platform_MauiSwipeView' => 'Microsoft.Maui.Platform.MauiSwipeView, Microsoft.Maui' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x1ED /* #206 'Microsoft_Maui_Platform_MauiUIContextMenuInteraction_FlyoutUIContextMenuInteractionDelegate' => 'Microsoft.Maui.Platform.MauiUIContextMenuInteraction+FlyoutUIContextMenuInteractionDelegate, Microsoft.Maui' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x1EF /* #207 'Microsoft_Maui_Platform_MauiUIContextMenuInteraction' => 'Microsoft.Maui.Platform.MauiUIContextMenuInteraction, Microsoft.Maui' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x1F5 /* #208 'Microsoft_MacCatalyst__WebKit_WKUIDelegate' => 'WebKit.WKUIDelegate, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1F7 /* #209 'Microsoft_Maui_Platform_MauiWebViewUIDelegate' => 'Microsoft.Maui.Platform.MauiWebViewUIDelegate, Microsoft.Maui' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x1F9 /* #210 'Microsoft_Maui_Platform_MauiWKWebView' => 'Microsoft.Maui.Platform.MauiWKWebView, Microsoft.Maui' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x1FB /* #211 'Microsoft_Maui_Platform_PlatformTouchGraphicsView' => 'Microsoft.Maui.Platform.PlatformTouchGraphicsView, Microsoft.Maui' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x201 /* #212 'Microsoft_Maui_Handlers_HybridWebViewHandler_WebViewScriptMessageHandler' => 'Microsoft.Maui.Handlers.HybridWebViewHandler+WebViewScriptMessageHandler, Microsoft.Maui' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x207 /* #213 'Microsoft_Maui_Handlers_HybridWebViewHandler_SchemeHandler' => 'Microsoft.Maui.Handlers.HybridWebViewHandler+SchemeHandler, Microsoft.Maui' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x209 /* #214 'Microsoft_Maui_WindowOverlay_PassthroughView' => 'Microsoft.Maui.WindowOverlay+PassthroughView, Microsoft.Maui' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x213 /* #215 'Microsoft_Maui_Authentication_AuthManager' => 'Microsoft.Maui.Authentication.AuthManager, Microsoft.Maui.Essentials' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x215 /* #216 'Microsoft_MacCatalyst__UIKit_UIAdaptivePresentationControllerDelegate' => 'UIKit.UIAdaptivePresentationControllerDelegate, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x217 /* #217 'Microsoft_Maui_ApplicationModel_UIPresentationControllerDelegate' => 'Microsoft.Maui.ApplicationModel.UIPresentationControllerDelegate, Microsoft.Maui.Essentials' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x219 /* #218 'Microsoft_MacCatalyst__UIKit_UIActivityItemSource' => 'UIKit.UIActivityItemSource, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x21B /* #219 'Microsoft_Maui_ApplicationModel_DataTransfer_ShareActivityItemSource' => 'Microsoft.Maui.ApplicationModel.DataTransfer.ShareActivityItemSource, Microsoft.Maui.Essentials' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x221 /* #220 'Microsoft_MacCatalyst__CoreLocation_CLLocationManagerDelegate' => 'CoreLocation.CLLocationManagerDelegate, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x223 /* #221 'Microsoft_Maui_Devices_Sensors_SingleLocationListener' => 'Microsoft.Maui.Devices.Sensors.SingleLocationListener, Microsoft.Maui.Essentials' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x225 /* #222 'Microsoft_Maui_Devices_Sensors_ContinuousLocationListener' => 'Microsoft.Maui.Devices.Sensors.ContinuousLocationListener, Microsoft.Maui.Essentials' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x227 /* #223 'Microsoft_MacCatalyst__SafariServices_SFSafariViewControllerDelegate' => 'SafariServices.SFSafariViewControllerDelegate, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x229 /* #224 'Microsoft_Maui_Authentication_WebAuthenticatorImplementation_NativeSFSafariViewControllerDelegate' => 'Microsoft.Maui.Authentication.WebAuthenticatorImplementation+NativeSFSafariViewControllerDelegate, Microsoft.Maui.Essentials' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x22F /* #225 'Microsoft_Maui_Authentication_WebAuthenticatorImplementation_ContextProvider' => 'Microsoft.Maui.Authentication.WebAuthenticatorImplementation+ContextProvider, Microsoft.Maui.Essentials' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x231 /* #226 'Microsoft_MacCatalyst__UIKit_UIImagePickerControllerDelegate' => 'UIKit.UIImagePickerControllerDelegate, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x233 /* #227 'Microsoft_Maui_Media_MediaPickerImplementation_PhotoPickerDelegate' => 'Microsoft.Maui.Media.MediaPickerImplementation+PhotoPickerDelegate, Microsoft.Maui.Essentials' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x235 /* #228 'Microsoft_MacCatalyst__UIKit_UIDocumentPickerDelegate' => 'UIKit.UIDocumentPickerDelegate, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x237 /* #229 'Microsoft_Maui_Storage_FilePickerImplementation_PickerDelegate' => 'Microsoft.Maui.Storage.FilePickerImplementation+PickerDelegate, Microsoft.Maui.Essentials' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x239 /* #230 'Microsoft_MacCatalyst__ContactsUI_CNContactPickerDelegate' => 'ContactsUI.CNContactPickerDelegate, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x23B /* #231 'Microsoft_Maui_ApplicationModel_Communication_ContactsImplementation_ContactPickerDelegate' => 'Microsoft.Maui.ApplicationModel.Communication.ContactsImplementation+ContactPickerDelegate, Microsoft.Maui.Essentials' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x23D /* #232 'Microsoft_Maui_ApplicationModel_Permissions_LocationWhenInUse_ManagerDelegate' => 'Microsoft.Maui.ApplicationModel.Permissions+LocationWhenInUse+ManagerDelegate, Microsoft.Maui.Essentials' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x243 /* #233 'SFSafariViewController' => 'SafariServices.SFSafariViewController, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x245 /* #234 'UIWindowSceneActivationConfiguration' => 'UIKit.UIWindowSceneActivationConfiguration, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x247 /* #235 'NSEnumerator' => 'Foundation.NSEnumerator, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x249 /* #236 'LPLinkMetadata' => 'LinkPresentation.LPLinkMetadata, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x24B /* #237 'CNContactPickerViewController' => 'ContactsUI.CNContactPickerViewController, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x255 /* #238 'NSCoder' => 'Foundation.NSCoder, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x257 /* #239 'NSFormatter' => 'Foundation.NSFormatter, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x259 /* #240 'INIntentResponse' => 'Intents.INIntentResponse, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x25B /* #241 'INIntent' => 'Intents.INIntent, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x25D /* #242 'WKPreferences' => 'WebKit.WKPreferences, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x25F /* #243 'WKWindowFeatures' => 'WebKit.WKWindowFeatures, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x261 /* #244 'WKContextMenuElementInfo' => 'WebKit.WKContextMenuElementInfo, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x263 /* #245 'WKFrameInfo' => 'WebKit.WKFrameInfo, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x265 /* #246 'WKNavigation' => 'WebKit.WKNavigation, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x267 /* #247 'WKNavigationAction' => 'WebKit.WKNavigationAction, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x269 /* #248 'WKNavigationResponse' => 'WebKit.WKNavigationResponse, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x26F /* #249 'WKPreviewElementInfo' => 'WebKit.WKPreviewElementInfo, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x271 /* #250 'WKProcessPool' => 'WebKit.WKProcessPool, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x273 /* #251 'WKScriptMessage' => 'WebKit.WKScriptMessage, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x275 /* #252 'WKSecurityOrigin' => 'WebKit.WKSecurityOrigin, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x27B /* #253 'WKUserContentController' => 'WebKit.WKUserContentController, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x27D /* #254 'WKUserScript' => 'WebKit.WKUserScript, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x27F /* #255 'WKWebpagePreferences' => 'WebKit.WKWebpagePreferences, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x281 /* #256 'WKWebsiteDataRecord' => 'WebKit.WKWebsiteDataRecord, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x283 /* #257 'WKWebViewConfiguration' => 'WebKit.WKWebViewConfiguration, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x285 /* #258 'Foundation_NSDispatcher' => 'Foundation.NSDispatcher, Microsoft.MacCatalyst' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x287 /* #259 '__MonoMac_NSActionDispatcher' => 'Foundation.NSActionDispatcher, Microsoft.MacCatalyst' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x289 /* #260 '__MonoMac_NSSynchronizationContextDispatcher' => 'Foundation.NSSynchronizationContextDispatcher, Microsoft.MacCatalyst' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x28B /* #261 'Foundation_NSAsyncDispatcher' => 'Foundation.NSAsyncDispatcher, Microsoft.MacCatalyst' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x28D /* #262 '__MonoMac_NSAsyncActionDispatcher' => 'Foundation.NSAsyncActionDispatcher, Microsoft.MacCatalyst' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x28F /* #263 '__MonoMac_NSAsyncSynchronizationContextDispatcher' => 'Foundation.NSAsyncSynchronizationContextDispatcher, Microsoft.MacCatalyst' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x291 /* #264 'NSArray' => 'Foundation.NSArray, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x293 /* #265 'NSDateComponents' => 'Foundation.NSDateComponents, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x295 /* #266 'NSError' => 'Foundation.NSError, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x297 /* #267 'Foundation_NSExceptionError' => 'Foundation.NSExceptionError, Microsoft.MacCatalyst' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x299 /* #268 'NSHTTPCookie' => 'Foundation.NSHttpCookie, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x29B /* #269 'NSStream' => 'Foundation.NSStream, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x29D /* #270 'NSInputStream' => 'Foundation.NSInputStream, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2A3 /* #271 'NSAttributedString' => 'Foundation.NSAttributedString, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2A5 /* #272 'NSMutableAttributedString' => 'Foundation.NSMutableAttributedString, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2A7 /* #273 'NSSet' => 'Foundation.NSSet, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2A9 /* #274 'NSMutableSet' => 'Foundation.NSMutableSet, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2AB /* #275 'NSString' => 'Foundation.NSString, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2AD /* #276 'NSURLRequest' => 'Foundation.NSUrlRequest, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2AF /* #277 'NSMutableURLRequest' => 'Foundation.NSMutableUrlRequest, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2B1 /* #278 'Foundation_InternalNSNotificationHandler' => 'Foundation.InternalNSNotificationHandler, Microsoft.MacCatalyst' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x2B3 /* #279 'NSNull' => 'Foundation.NSNull, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2B5 /* #280 'NSValue' => 'Foundation.NSValue, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2B7 /* #281 'NSNumber' => 'Foundation.NSNumber, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2B9 /* #282 'NSProxy' => 'Foundation.NSProxy, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2BB /* #283 'NSRunLoop' => 'Foundation.NSRunLoop, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2BD /* #284 'NSURLCredential' => 'Foundation.NSUrlCredential, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2BF /* #285 'NSURLProtectionSpace' => 'Foundation.NSUrlProtectionSpace, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2C1 /* #286 'NSAutoreleasePool' => 'Foundation.NSAutoreleasePool, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2C3 /* #287 'NSCachedURLResponse' => 'Foundation.NSCachedUrlResponse, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2C5 /* #288 'NSDateFormatter' => 'Foundation.NSDateFormatter, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2C7 /* #289 'NSNotificationCenter' => 'Foundation.NSNotificationCenter, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2C9 /* #290 'NSException' => 'Foundation.NSException, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2CB /* #291 'NSURLResponse' => 'Foundation.NSUrlResponse, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2CD /* #292 'NSHTTPURLResponse' => 'Foundation.NSHttpUrlResponse, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2CF /* #293 'NSIndexSet' => 'Foundation.NSIndexSet, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2D1 /* #294 'NSNotification' => 'Foundation.NSNotification, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2D3 /* #295 'NSOperationQueue' => 'Foundation.NSOperationQueue, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2D5 /* #296 'NSData' => 'Foundation.NSData, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2D7 /* #297 'NSMutableData' => 'Foundation.NSMutableData, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2D9 /* #298 'NSStringDrawingContext' => 'Foundation.NSStringDrawingContext, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2DB /* #299 'NSURLAuthenticationChallenge' => 'Foundation.NSUrlAuthenticationChallenge, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2E1 /* #300 'Microsoft_MacCatalyst__Foundation_NSUrlSessionDelegate' => 'Foundation.NSUrlSessionDelegate, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2E3 /* #301 'Microsoft_MacCatalyst__Foundation_NSUrlSessionTaskDelegate' => 'Foundation.NSUrlSessionTaskDelegate, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2E5 /* #302 'Microsoft_MacCatalyst__Foundation_NSUrlSessionDataDelegate' => 'Foundation.NSUrlSessionDataDelegate, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2E7 /* #303 'NSURLSessionTask' => 'Foundation.NSUrlSessionTask, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2E9 /* #304 'NSURLSessionDataTask' => 'Foundation.NSUrlSessionDataTask, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2EB /* #305 'CLBeacon' => 'CoreLocation.CLBeacon, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2ED /* #306 'CLBeaconIdentityConstraint' => 'CoreLocation.CLBeaconIdentityConstraint, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2EF /* #307 'CLRegion' => 'CoreLocation.CLRegion, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2F1 /* #308 'CLBeaconRegion' => 'CoreLocation.CLBeaconRegion, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2F3 /* #309 'CLHeading' => 'CoreLocation.CLHeading, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2F5 /* #310 'CLLocation' => 'CoreLocation.CLLocation, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2F7 /* #311 'CLVisit' => 'CoreLocation.CLVisit, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2F9 /* #312 'CAAnimation' => 'CoreAnimation.CAAnimation, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2FB /* #313 'CAPropertyAnimation' => 'CoreAnimation.CAPropertyAnimation, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2FD /* #314 'CABasicAnimation' => 'CoreAnimation.CABasicAnimation, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2FF /* #315 'CADisplayLink' => 'CoreAnimation.CADisplayLink, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x301 /* #316 'Microsoft_MacCatalyst__CoreAnimation_CALayerDelegate' => 'CoreAnimation.CALayerDelegate, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x303 /* #317 'CNContactProperty' => 'Contacts.CNContactProperty, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x305 /* #318 'CNContact' => 'Contacts.CNContact, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x307 /* #319 'CKShareMetadata' => 'CloudKit.CKShareMetadata, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x309 /* #320 'ASAuthorization' => 'AuthenticationServices.ASAuthorization, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x30B /* #321 'ASAuthorizationController' => 'AuthenticationServices.ASAuthorizationController, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x311 /* #322 'ASWebAuthenticationSession' => 'AuthenticationServices.ASWebAuthenticationSession, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x313 /* #323 'NSLayoutManager' => 'UIKit.NSLayoutManager, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x315 /* #324 'Microsoft_MacCatalyst__UIKit_UIAppearance' => 'UIKit.UIAppearance, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x317 /* #325 'UIBezierPath' => 'UIKit.UIBezierPath, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x319 /* #326 'UICollectionViewLayoutAttributes' => 'UIKit.UICollectionViewLayoutAttributes, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x31B /* #327 'UIKit_UIControlEventProxy' => 'UIKit.UIControlEventProxy, Microsoft.MacCatalyst' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x31D /* #328 'UIEvent' => 'UIKit.UIEvent, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x31F /* #329 'UIFont' => 'UIKit.UIFont, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x321 /* #330 'UIFontDescriptor' => 'UIKit.UIFontDescriptor, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x323 /* #331 'UILongPressGestureRecognizer' => 'UIKit.UILongPressGestureRecognizer, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x325 /* #332 'UIPanGestureRecognizer' => 'UIKit.UIPanGestureRecognizer, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x327 /* #333 'UIPinchGestureRecognizer' => 'UIKit.UIPinchGestureRecognizer, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x329 /* #334 'UISwipeGestureRecognizer' => 'UIKit.UISwipeGestureRecognizer, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x32B /* #335 'UIHoverGestureRecognizer' => 'UIKit.UIHoverGestureRecognizer, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x32D /* #336 'UIMenuElement' => 'UIKit.UIMenuElement, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x32F /* #337 'UIMenu' => 'UIKit.UIMenu, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x331 /* #338 'UIPresentationController' => 'UIKit.UIPresentationController, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x333 /* #339 'UIScene' => 'UIKit.UIScene, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x335 /* #340 'UIWindowScene' => 'UIKit.UIWindowScene, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x337 /* #341 'UITraitCollection' => 'UIKit.UITraitCollection, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x341 /* #342 'UIVisualEffect' => 'UIKit.UIVisualEffect, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x343 /* #343 'NSAdaptiveImageGlyph' => 'UIKit.NSAdaptiveImageGlyph, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x345 /* #344 'NSCollectionLayoutItem' => 'UIKit.NSCollectionLayoutItem, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x347 /* #345 'NSCollectionLayoutSupplementaryItem' => 'UIKit.NSCollectionLayoutSupplementaryItem, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x349 /* #346 'NSCollectionLayoutBoundarySupplementaryItem' => 'UIKit.NSCollectionLayoutBoundarySupplementaryItem, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x34F /* #347 'NSCollectionLayoutDimension' => 'UIKit.NSCollectionLayoutDimension, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x355 /* #348 'NSCollectionLayoutGroup' => 'UIKit.NSCollectionLayoutGroup, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x357 /* #349 'NSCollectionLayoutSection' => 'UIKit.NSCollectionLayoutSection, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x359 /* #350 'NSCollectionLayoutSize' => 'UIKit.NSCollectionLayoutSize, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x35B /* #351 'NSCollectionLayoutSpacing' => 'UIKit.NSCollectionLayoutSpacing, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x361 /* #352 'NSLayoutAnchor' => 'UIKit.NSLayoutAnchor`1, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x363 /* #353 'NSLayoutDimension' => 'UIKit.NSLayoutDimension, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x365 /* #354 'NSLayoutXAxisAnchor' => 'UIKit.NSLayoutXAxisAnchor, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x367 /* #355 'NSLayoutYAxisAnchor' => 'UIKit.NSLayoutYAxisAnchor, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x369 /* #356 'NSParagraphStyle' => 'UIKit.NSParagraphStyle, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x36B /* #357 'NSMutableParagraphStyle' => 'UIKit.NSMutableParagraphStyle, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x36D /* #358 'NSShadow' => 'UIKit.NSShadow, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x36F /* #359 'NSTextAttachment' => 'UIKit.NSTextAttachment, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x371 /* #360 'NSTextContainer' => 'UIKit.NSTextContainer, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x373 /* #361 'UIAction' => 'UIKit.UIAction, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x375 /* #362 'UIActivityViewController' => 'UIKit.UIActivityViewController, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x377 /* #363 'UIAlertAction' => 'UIKit.UIAlertAction, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x379 /* #364 'UIApplicationShortcutIcon' => 'UIKit.UIApplicationShortcutIcon, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x37B /* #365 'UIApplicationShortcutItem' => 'UIKit.UIApplicationShortcutItem, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x37D /* #366 'UIBarAppearance' => 'UIKit.UIBarAppearance, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x37F /* #367 'UIBarButtonItemGroup' => 'UIKit.UIBarButtonItemGroup, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x381 /* #368 'UIBlurEffect' => 'UIKit.UIBlurEffect, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x383 /* #369 'UIButtonConfiguration' => 'UIKit.UIButtonConfiguration, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x38D /* #370 'UICollectionViewCompositionalLayoutConfiguration' => 'UIKit.UICollectionViewCompositionalLayoutConfiguration, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x393 /* #371 'UIDropProposal' => 'UIKit.UIDropProposal, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x395 /* #372 'UICollectionViewLayoutInvalidationContext' => 'UIKit.UICollectionViewLayoutInvalidationContext, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x397 /* #373 'UICollectionViewFlowLayoutInvalidationContext' => 'UIKit.UICollectionViewFlowLayoutInvalidationContext, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x399 /* #374 'UIFocusUpdateContext' => 'UIKit.UIFocusUpdateContext, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x39B /* #375 'UICollectionViewFocusUpdateContext' => 'UIKit.UICollectionViewFocusUpdateContext, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x39D /* #376 'UICollectionViewTransitionLayout' => 'UIKit.UICollectionViewTransitionLayout, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x39F /* #377 'UICollectionViewUpdateItem' => 'UIKit.UICollectionViewUpdateItem, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3A1 /* #378 'UICommand' => 'UIKit.UICommand, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3A3 /* #379 'UIContextMenuConfiguration' => 'UIKit.UIContextMenuConfiguration, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3B1 /* #380 'UICubicTimingParameters' => 'UIKit.UICubicTimingParameters, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3BB /* #381 'UIDragInteraction' => 'UIKit.UIDragInteraction, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3BD /* #382 'UIDragItem' => 'UIKit.UIDragItem, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3BF /* #383 'UIDragPreview' => 'UIKit.UIDragPreview, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3C5 /* #384 'UIDropInteraction' => 'UIKit.UIDropInteraction, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3CF /* #385 'UIFontMetrics' => 'UIKit.UIFontMetrics, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3D1 /* #386 'UIGraphicsRenderer' => 'UIKit.UIGraphicsRenderer, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3D3 /* #387 'UIGraphicsImageRenderer' => 'UIKit.UIGraphicsImageRenderer, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3D5 /* #388 'UIGraphicsRendererContext' => 'UIKit.UIGraphicsRendererContext, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3D7 /* #389 'UIGraphicsImageRendererContext' => 'UIKit.UIGraphicsImageRendererContext, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3D9 /* #390 'UIKeyCommand' => 'UIKit.UIKeyCommand, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3DF /* #391 'UIListContentConfiguration' => 'UIKit.UIListContentConfiguration, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3E1 /* #392 'UIListContentTextProperties' => 'UIKit.UIListContentTextProperties, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3E3 /* #393 'UILocalNotification' => 'UIKit.UILocalNotification, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3E9 /* #394 'UIMenuSystem' => 'UIKit.UIMenuSystem, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3EB /* #395 'UINavigationBarAppearance' => 'UIKit.UINavigationBarAppearance, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3ED /* #396 'UINavigationItem' => 'UIKit.UINavigationItem, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3F7 /* #397 'UIOpenURLContext' => 'UIKit.UIOpenUrlContext, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3FD /* #398 'UIPress' => 'UIKit.UIPress, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3FF /* #399 'UISceneActivationRequestOptions' => 'UIKit.UISceneActivationRequestOptions, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x401 /* #400 'UISceneConfiguration' => 'UIKit.UISceneConfiguration, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x403 /* #401 'UISceneConnectionOptions' => 'UIKit.UISceneConnectionOptions, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x405 /* #402 'UISceneDestructionRequestOptions' => 'UIKit.UISceneDestructionRequestOptions, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x407 /* #403 'UISceneSession' => 'UIKit.UISceneSession, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x409 /* #404 'UISceneSessionActivationRequest' => 'UIKit.UISceneSessionActivationRequest, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x40B /* #405 'UISceneSizeRestrictions' => 'UIKit.UISceneSizeRestrictions, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x40D /* #406 'UISceneWindowingBehaviors' => 'UIKit.UISceneWindowingBehaviors, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x413 /* #407 'Microsoft_MacCatalyst__UIKit_UISearchResultsUpdating' => 'UIKit.UISearchResultsUpdating, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x415 /* #408 'UITab' => 'UIKit.UITab, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x41F /* #409 'UISpringTimingParameters' => 'UIKit.UISpringTimingParameters, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x421 /* #410 'UIStatusBarManager' => 'UIKit.UIStatusBarManager, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x423 /* #411 'UITabBarAppearance' => 'UIKit.UITabBarAppearance, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x429 /* #412 'UITabBarControllerSidebar' => 'UIKit.UITabBarControllerSidebar, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x42B /* #413 'UITabBarItemAppearance' => 'UIKit.UITabBarItemAppearance, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x42D /* #414 'UITabBarItemStateAppearance' => 'UIKit.UITabBarItemStateAppearance, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x42F /* #415 'UITabGroup' => 'UIKit.UITabGroup, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x431 /* #416 'UITargetedPreview' => 'UIKit.UITargetedPreview, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x433 /* #417 'UITargetedDragPreview' => 'UIKit.UITargetedDragPreview, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x435 /* #418 'UITextInputAssistantItem' => 'UIKit.UITextInputAssistantItem, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x437 /* #419 'UITextInputPasswordRules' => 'UIKit.UITextInputPasswordRules, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x439 /* #420 'UITextItem' => 'UIKit.UITextItem, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x43B /* #421 'UITextItemMenuConfiguration' => 'UIKit.UITextItemMenuConfiguration, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x43D /* #422 'UITextPlaceholder' => 'UIKit.UITextPlaceholder, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x43F /* #423 'UITextPosition' => 'UIKit.UITextPosition, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x441 /* #424 'UITextRange' => 'UIKit.UITextRange, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x443 /* #425 'UITextSelectionRect' => 'UIKit.UITextSelectionRect, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x445 /* #426 'UIToolTipInteraction' => 'UIKit.UIToolTipInteraction, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x447 /* #427 'UITouch' => 'UIKit.UITouch, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x449 /* #428 'UIUserNotificationSettings' => 'UIKit.UIUserNotificationSettings, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x463 /* #429 'UIViewPropertyAnimator' => 'UIKit.UIViewPropertyAnimator, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x465 /* #430 '__monomac_internal_ActionDispatcher' => 'AppKit.ActionDispatcher, Microsoft.MacCatalyst' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x467 /* #431 'NSURLSession' => 'Foundation.NSUrlSession, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x469 /* #432 'UIKit_UIView_UIViewAppearance' => 'UIKit.UIView+UIViewAppearance, Microsoft.MacCatalyst' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x46B /* #433 'UIKit_UIScrollView_UIScrollViewAppearance' => 'UIKit.UIScrollView+UIScrollViewAppearance, Microsoft.MacCatalyst' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x46D /* #434 'UIKit_UIControl_UIControlAppearance' => 'UIKit.UIControl+UIControlAppearance, Microsoft.MacCatalyst' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x46F /* #435 'UIKit_UIButton_UIButtonAppearance' => 'UIKit.UIButton+UIButtonAppearance, Microsoft.MacCatalyst' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x471 /* #436 'MPVolumeView' => 'MediaPlayer.MPVolumeView, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x473 /* #437 'UIKit_UIBarItem_UIBarItemAppearance' => 'UIKit.UIBarItem+UIBarItemAppearance, Microsoft.MacCatalyst' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x475 /* #438 'WKDownload' => 'WebKit.WKDownload, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x477 /* #439 'WKHTTPCookieStore' => 'WebKit.WKHttpCookieStore, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x479 /* #440 'WKWebsiteDataStore' => 'WebKit.WKWebsiteDataStore, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x47B /* #441 'NSIndexPath' => 'Foundation.NSIndexPath, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x47D /* #442 'NSBundle' => 'Foundation.NSBundle, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x47F /* #443 'NSCalendar' => 'Foundation.NSCalendar, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x481 /* #444 'NSDate' => 'Foundation.NSDate, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x483 /* #445 'NSDictionary' => 'Foundation.NSDictionary, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x485 /* #446 'NSItemProvider' => 'Foundation.NSItemProvider, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x487 /* #447 'NSLocale' => 'Foundation.NSLocale, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x489 /* #448 'NSMutableDictionary' => 'Foundation.NSMutableDictionary, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x48B /* #449 '__NSObject_Disposer' => 'Foundation.NSObject+NSObject_Disposer, Microsoft.MacCatalyst' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x48D /* #450 '__XamarinObjectObserver' => 'Foundation.NSObject+Observer, Microsoft.MacCatalyst' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x48F /* #451 'NSProgress' => 'Foundation.NSProgress, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x491 /* #452 'NSThread' => 'Foundation.NSThread, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x493 /* #453 'NSTimeZone' => 'Foundation.NSTimeZone, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x495 /* #454 'NSUndoManager' => 'Foundation.NSUndoManager, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x497 /* #455 'NSURL' => 'Foundation.NSUrl, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x499 /* #456 'NSURLSessionConfiguration' => 'Foundation.NSUrlSessionConfiguration, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x49B /* #457 'NSUserDefaults' => 'Foundation.NSUserDefaults, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x49D /* #458 'NSCache' => 'Foundation.NSCache, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x49F /* #459 'NSHTTPCookieStorage' => 'Foundation.NSHttpCookieStorage, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x4A1 /* #460 'NSUserActivity' => 'Foundation.NSUserActivity, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x4A3 /* #461 'CLLocationManager' => 'CoreLocation.CLLocationManager, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x4A5 /* #462 'System_Net_Http_NSUrlSessionHandler_WrappedNSInputStream' => 'System.Net.Http.NSUrlSessionHandler+WrappedNSInputStream, Microsoft.MacCatalyst' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x4A7 /* #463 'ASAuthorizationAppleIDCredential' => 'AuthenticationServices.ASAuthorizationAppleIdCredential, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x4A9 /* #464 'UIApplication' => 'UIKit.UIApplication, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x4AB /* #465 'UIKit_UIBarButtonItem_Callback' => 'UIKit.UIBarButtonItem+Callback, Microsoft.MacCatalyst' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x4AD /* #466 'UIColor' => 'UIKit.UIColor, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x4AF /* #467 'UIDevice' => 'UIKit.UIDevice, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x4B1 /* #468 '__UIGestureRecognizerGenericCB' => 'UIKit.UIGestureRecognizer+Callback`1, Microsoft.MacCatalyst' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x4B3 /* #469 '__UIGestureRecognizerParameterlessToken' => 'UIKit.UIGestureRecognizer+ParameterlessDispatch, Microsoft.MacCatalyst' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x4B5 /* #470 '__UIGestureRecognizerParametrizedToken' => 'UIKit.UIGestureRecognizer+ParametrizedDispatch, Microsoft.MacCatalyst' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x4B7 /* #471 'UIKit_UIGestureRecognizer__UIGestureRecognizerDelegate' => 'UIKit.UIGestureRecognizer+_UIGestureRecognizerDelegate, Microsoft.MacCatalyst' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x4B9 /* #472 'UIImage' => 'UIKit.UIImage, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x4BB /* #473 'UIImagePickerController' => 'UIKit.UIImagePickerController, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x4BD /* #474 'UIKit_UINavigationBar_UINavigationBarAppearance' => 'UIKit.UINavigationBar+UINavigationBarAppearance, Microsoft.MacCatalyst' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x4BF /* #475 'UIPickerView' => 'UIKit.UIPickerView, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x4C1 /* #476 'UIKit_UIPopoverPresentationController__UIPopoverPresentationControllerDelegate' => 'UIKit.UIPopoverPresentationController+_UIPopoverPresentationControllerDelegate, Microsoft.MacCatalyst' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x4C3 /* #477 'UIPopoverPresentationController' => 'UIKit.UIPopoverPresentationController, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x4C5 /* #478 'UIScreen' => 'UIKit.UIScreen, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x4C7 /* #479 'UIKit_UISearchBar_UISearchBarAppearance' => 'UIKit.UISearchBar+UISearchBarAppearance, Microsoft.MacCatalyst' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x4C9 /* #480 'UIKit_UISearchBar__UISearchBarDelegate' => 'UIKit.UISearchBar+_UISearchBarDelegate, Microsoft.MacCatalyst' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x4CB /* #481 'UIKit_UISearchController___Xamarin_UISearchResultsUpdating' => 'UIKit.UISearchController+__Xamarin_UISearchResultsUpdating, Microsoft.MacCatalyst' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x4CD /* #482 'UISearchController' => 'UIKit.UISearchController, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x4CF /* #483 'UIKit_UITableView_UITableViewAppearance' => 'UIKit.UITableView+UITableViewAppearance, Microsoft.MacCatalyst' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x4D1 /* #484 'UITableView' => 'UIKit.UITableView, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x4D3 /* #485 'UIKit_UITextField__UITextFieldDelegate' => 'UIKit.UITextField+_UITextFieldDelegate, Microsoft.MacCatalyst' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x4D5 /* #486 'UIKit_UIScrollView__UIScrollViewDelegate' => 'UIKit.UIScrollView+_UIScrollViewDelegate, Microsoft.MacCatalyst' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x4D7 /* #487 'UIKit_UITextView__UITextViewDelegate' => 'UIKit.UITextView+_UITextViewDelegate, Microsoft.MacCatalyst' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x4D9 /* #488 'UIWindow' => 'UIKit.UIWindow, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x4DB /* #489 'NSTextStorage' => 'UIKit.NSTextStorage, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x4DD /* #490 'UIDatePicker' => 'UIKit.UIDatePicker, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x4DF /* #491 'UIDocumentPickerViewController' => 'UIKit.UIDocumentPickerViewController, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x4E1 /* #492 'UIFocusAnimationCoordinator' => 'UIKit.UIFocusAnimationCoordinator, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x4E3 /* #493 'UIProgressView' => 'UIKit.UIProgressView, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x4E5 /* #494 'UISearchTextField' => 'UIKit.UISearchTextField, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x4E7 /* #495 'UISlider' => 'UIKit.UISlider, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x4E9 /* #496 'UIStackView' => 'UIKit.UIStackView, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x4EB /* #497 'UIStepper' => 'UIKit.UIStepper, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x4ED /* #498 'UIKit_UISwitch_UISwitchAppearance' => 'UIKit.UISwitch+UISwitchAppearance, Microsoft.MacCatalyst' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x4EF /* #499 'UISwitch' => 'UIKit.UISwitch, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x4F1 /* #500 'UIKit_UITabBar_UITabBarAppearance' => 'UIKit.UITabBar+UITabBarAppearance, Microsoft.MacCatalyst' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x4F3 /* #501 'UITabBar' => 'UIKit.UITabBar, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x4F5 /* #502 'UIKit_UITabBarController__UITabBarControllerDelegate' => 'UIKit.UITabBarController+_UITabBarControllerDelegate, Microsoft.MacCatalyst' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x4F7 /* #503 'UIKit_UITabBarItem_UITabBarItemAppearance' => 'UIKit.UITabBarItem+UITabBarItemAppearance, Microsoft.MacCatalyst' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x4F9 /* #504 'UITabBarItem' => 'UIKit.UITabBarItem, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x4FB /* #505 'UIVisualEffectView' => 'UIKit.UIVisualEffectView, Microsoft.MacCatalyst' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x4FD /* #506 'System_Net_Http_NSUrlSessionHandler_NSUrlSessionHandlerDelegate' => 'System.Net.Http.NSUrlSessionHandler+NSUrlSessionHandlerDelegate, Microsoft.MacCatalyst' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0 },
	};

	static const MTManagedClassMap __xamarin_skipped_map [] = {
		{ 0x4FF, 0x2A9 /* 'Foundation.NSMutableSet`1' => 'Foundation.NSMutableSet' */ },
		{ 0x501, 0x2A7 /* 'Foundation.NSSet`1' => 'Foundation.NSSet' */ },
		{ 0x503, 0x483 /* 'Foundation.NSDictionary`2' => 'Foundation.NSDictionary' */ },
		{ 0x505, 0x489 /* 'Foundation.NSMutableDictionary`2' => 'Foundation.NSMutableDictionary' */ },
	};

	static const MTAssembly __xamarin_registration_assemblies [] = {
		{ "MiniProject", "b1376f88-95f5-41eb-93ef-65320a4f8877" }, 
		{ "CommunityToolkit.Mvvm", "9ff20865-177c-4814-8820-0746a9d44aac" }, 
		{ "Microsoft.Extensions.Configuration", "689c1cbb-6bf2-4564-91ee-a4f3f6e3513c" }, 
		{ "Microsoft.Extensions.Configuration.Abstractions", "e1ccce47-bfcd-4e0a-8d42-bf28f6a995be" }, 
		{ "Microsoft.Extensions.DependencyInjection", "76cff6d9-3ab9-44af-9d2f-9b3ff6f69c33" }, 
		{ "Microsoft.Extensions.DependencyInjection.Abstractions", "35df7f42-9082-4cb8-94e9-f3d6a7f3417e" }, 
		{ "Microsoft.Extensions.Logging", "71582e7a-1102-4288-89f0-1d9f7dcecc7b" }, 
		{ "Microsoft.Extensions.Logging.Abstractions", "1c2ce71e-4c00-4241-b378-a139993a43a9" }, 
		{ "Microsoft.Extensions.Logging.Debug", "f89623bb-eefd-4787-b333-a5efbe8d03cc" }, 
		{ "Microsoft.Extensions.Options", "ea1c4c09-1d90-434c-9173-8451f45a5869" }, 
		{ "Microsoft.Extensions.Primitives", "97932332-3487-4e65-8629-f4602fa18687" }, 
		{ "Microsoft.Maui.Controls", "78e43b2e-1130-4714-8279-68e271dbfe18" }, 
		{ "Microsoft.Maui.Controls.Xaml", "03325fed-7cb4-4c6e-a2bc-3a6c048cdfee" }, 
		{ "Microsoft.Maui", "e7ce6d6d-df19-4d72-9974-43bd9c5047ed" }, 
		{ "Microsoft.Maui.Essentials", "c906ad99-7756-49c8-b511-1ea148335fbd" }, 
		{ "Microsoft.Maui.Graphics", "66ba8bda-603d-4227-892b-2b6dc4fa2d5e" }, 
		{ "Newtonsoft.Json", "7e62198b-eab2-4380-bbac-29171862d1d8" }, 
		{ "Microsoft.CSharp", "8b316f8c-064c-409c-a1bd-7365caefb207" }, 
		{ "Microsoft.VisualBasic.Core", "077d664e-8f9e-4e2f-905a-6adad628e624" }, 
		{ "Microsoft.VisualBasic", "74e3f42f-bef6-44b3-b934-3ef19ba43138" }, 
		{ "Microsoft.Win32.Primitives", "0da5b313-2115-48f3-b801-9d35381687a4" }, 
		{ "Microsoft.Win32.Registry", "da2f40fe-3f46-48ac-88b6-0cb53822ee3c" }, 
		{ "System.AppContext", "a2e356b4-d17c-4ffa-9e5a-c75330f167b0" }, 
		{ "System.Buffers", "fd88b5f1-1eab-4312-aaf4-d905217f07d2" }, 
		{ "System.Collections.Concurrent", "f33ab44f-b290-4dbc-83b0-15b25cb30c73" }, 
		{ "System.Collections.Immutable", "4bc027d3-7781-4cbf-8a32-5341fa7f8772" }, 
		{ "System.Collections.NonGeneric", "29dfa1a7-dae8-4dd3-b53e-9acffa71c006" }, 
		{ "System.Collections.Specialized", "5b5eed67-ed47-40a9-bafc-fd6441f2cfbe" }, 
		{ "System.Collections", "e68abcb8-aa9f-4f50-875a-4436ae95bddc" }, 
		{ "System.ComponentModel.Annotations", "09187a5f-f5a5-406b-87ee-b3c3dad2fc97" }, 
		{ "System.ComponentModel.DataAnnotations", "2da91dd5-b267-4fa9-8b05-2ac74f8960e5" }, 
		{ "System.ComponentModel.EventBasedAsync", "f17c8ef7-4190-4599-bbf9-a97ba835c482" }, 
		{ "System.ComponentModel.Primitives", "342c1809-dc22-4e4d-a5ac-03b236a99971" }, 
		{ "System.ComponentModel.TypeConverter", "3f3d793b-e70a-4928-8940-99bd496c0ea7" }, 
		{ "System.ComponentModel", "f2d4d8d3-7d4a-4d6a-adef-12301ba94675" }, 
		{ "System.Configuration", "2d4c2603-db34-4dff-8f0c-2641358e9a39" }, 
		{ "System.Console", "945ea2ca-8067-4242-bf95-5a453189adef" }, 
		{ "System.Core", "06611f19-f04f-4c2c-8066-5ab7d2247ef4" }, 
		{ "System.Data.Common", "ee0712c6-670d-40e5-818d-1b59d91e739c" }, 
		{ "System.Data.DataSetExtensions", "54802259-ead1-4eed-931c-cf74d4402f72" }, 
		{ "System.Data", "ed9b404b-4521-4493-a82c-59a4e9656b75" }, 
		{ "System.Diagnostics.Contracts", "df2c5f37-242f-40d8-82fc-50502fb37b08" }, 
		{ "System.Diagnostics.Debug", "73455374-110b-4329-aadf-822c5588e743" }, 
		{ "System.Diagnostics.DiagnosticSource", "fd6d3b24-f6f3-47fa-86d9-b44ad7fb6286" }, 
		{ "System.Diagnostics.FileVersionInfo", "7afde7b3-6308-45f2-91d9-a61e13914571" }, 
		{ "System.Diagnostics.Process", "e5b89f77-f9ae-4049-892c-594f50d22c44" }, 
		{ "System.Diagnostics.StackTrace", "11835fdc-2d1b-434a-bc65-53a4ae1ad8d5" }, 
		{ "System.Diagnostics.TextWriterTraceListener", "e810d1a8-b049-48d0-8b92-08ff0892cef2" }, 
		{ "System.Diagnostics.Tools", "53334815-1700-4242-81d5-06821f184915" }, 
		{ "System.Diagnostics.TraceSource", "8352dbfc-26dd-42dd-8505-b30cb0ed78bf" }, 
		{ "System.Diagnostics.Tracing", "e0b9a5ef-fc49-49a3-ac8e-833f1dba36b5" }, 
		{ "System.Drawing.Primitives", "84b00705-68ec-41c6-b340-07a78b6e93cc" }, 
		{ "System.Drawing", "19266f1b-3098-4733-b625-dad3c1030dac" }, 
		{ "System.Dynamic.Runtime", "099ec529-c5e3-4ef2-88ef-82c268ee79e5" }, 
		{ "System.Formats.Asn1", "0b24403c-930e-410f-98b8-70533fe7ff7e" }, 
		{ "System.Formats.Tar", "ea6d4782-f476-4797-bbf3-bff15ebd6d39" }, 
		{ "System.Globalization.Calendars", "974d15dd-0ba7-453e-99b9-c9ea05cb61c9" }, 
		{ "System.Globalization.Extensions", "0684fe84-7453-4760-9f20-0e83f95bd04c" }, 
		{ "System.Globalization", "969cb255-6e1b-4d97-8b74-bbad0f6cd979" }, 
		{ "System.IO.Compression.Brotli", "69b53908-869d-47cb-9cc8-651ff0c85712" }, 
		{ "System.IO.Compression.FileSystem", "8bf5ce2b-76df-465e-835f-808c2b85eb6b" }, 
		{ "System.IO.Compression.ZipFile", "da4b5ff9-88cf-45ae-b70b-17302ca4bdc6" }, 
		{ "System.IO.Compression", "a68f54b6-0ba5-46e4-8bf3-0e345c075085" }, 
		{ "System.IO.FileSystem.AccessControl", "23bae625-74a0-4853-a701-75c83a0342ab" }, 
		{ "System.IO.FileSystem.DriveInfo", "ff172cd4-2b3d-4d80-8228-516784cb97ab" }, 
		{ "System.IO.FileSystem.Primitives", "02220350-49ff-45c0-8bf9-1f49cdb230c8" }, 
		{ "System.IO.FileSystem.Watcher", "617dcd4a-9ff2-479b-b1eb-7d51cf5fa031" }, 
		{ "System.IO.FileSystem", "9d5ff725-6ebf-4d84-9abb-de3b95729545" }, 
		{ "System.IO.IsolatedStorage", "20ba38ba-3bd1-4983-88a0-1734b7ab79e5" }, 
		{ "System.IO.MemoryMappedFiles", "d5ebabf0-880b-4e5f-8313-c6f467c185b2" }, 
		{ "System.IO.Pipelines", "a8b3b8a6-6272-4529-b647-2eb0308c548f" }, 
		{ "System.IO.Pipes.AccessControl", "f7c851bb-bdc7-478d-995f-9389ffb6bd82" }, 
		{ "System.IO.Pipes", "548cc0e0-6d1a-4bcb-8d72-8ddcbc010bcf" }, 
		{ "System.IO.UnmanagedMemoryStream", "0104b7dc-51c9-48bb-8445-d8bad8442d5d" }, 
		{ "System.IO", "c11dea5c-b55d-446d-93f8-31da18668d60" }, 
		{ "System.Linq.Expressions", "4e4d898f-5319-40b4-a0b5-12dab041c134" }, 
		{ "System.Linq.Parallel", "470733b3-0389-4ba4-8e9c-98d7a2f647a9" }, 
		{ "System.Linq.Queryable", "09d20591-9e91-4c10-ae2c-50b38350c13f" }, 
		{ "System.Linq", "1d436c58-2f7c-4a03-9066-3719f2149638" }, 
		{ "System.Memory", "69e73e82-0bcc-4dcb-a2aa-85aed1e1ef47" }, 
		{ "System.Net.Http.Json", "2355eef2-346d-4474-9b6d-f4f33423d0bb" }, 
		{ "System.Net.Http", "50dcfa46-e69c-4c43-96fe-e7067af404bf" }, 
		{ "System.Net.HttpListener", "d13abd0a-3594-4f67-bc03-a5fc1009ba0b" }, 
		{ "System.Net.Mail", "5bdc6c2c-5ceb-43f8-9df9-f40d10089119" }, 
		{ "System.Net.NameResolution", "96804102-0fa0-420a-a3c0-412b477ad7e3" }, 
		{ "System.Net.NetworkInformation", "3f7179bb-a0fd-4d4f-a215-188fd05aa124" }, 
		{ "System.Net.Ping", "11b71fb3-bf83-48da-be8d-e7c2fc67fd79" }, 
		{ "System.Net.Primitives", "f7e0263f-d6f7-4cc7-aad2-0fd1979e44b7" }, 
		{ "System.Net.Quic", "e6ce0d2c-d4d2-4b0d-b79b-156ebd029eb1" }, 
		{ "System.Net.Requests", "52966ad8-a317-4637-90e1-8ce22423a012" }, 
		{ "System.Net.Security", "94c9f6e0-f5c5-464d-87a3-3031445b675f" }, 
		{ "System.Net.ServicePoint", "40d2342a-82fa-4a25-a055-028fba836b11" }, 
		{ "System.Net.Sockets", "aaf3aeab-36e4-452c-b69e-149443564465" }, 
		{ "System.Net.WebClient", "c1bee259-1c99-4c37-919b-bb859bdb5cec" }, 
		{ "System.Net.WebHeaderCollection", "9e60a128-183e-4ecd-9d7f-65a67a825846" }, 
		{ "System.Net.WebProxy", "773e7127-5b06-42e8-bf39-3ca5e5baaf0a" }, 
		{ "System.Net.WebSockets.Client", "e5a6927a-0161-497b-886f-bd92c8a1b7e5" }, 
		{ "System.Net.WebSockets", "a6d85e44-d200-42c9-b388-b965cd68a982" }, 
		{ "System.Net", "0c7c2ae0-b32d-4dbc-8dd4-2ec123296442" }, 
		{ "System.Numerics.Vectors", "51ef62fb-ed7e-43f3-962e-71f34468a5ea" }, 
		{ "System.Numerics", "73fb35aa-76e1-408e-a622-b8fe068db653" }, 
		{ "System.ObjectModel", "f64a20e0-7ef4-4a5c-aa61-629d5aca05ca" }, 
		{ "System.Private.DataContractSerialization", "1693f5bd-4e83-4d9b-bf10-6805f8646b25" }, 
		{ "System.Private.Uri", "e0aa01d7-6e88-4e4e-8d84-356877faf35d" }, 
		{ "System.Private.Xml.Linq", "315c4eeb-6f53-456b-840d-ecf24a65815f" }, 
		{ "System.Private.Xml", "a38e88dd-2cdb-4cf7-8e59-2925398ed6a2" }, 
		{ "System.Reflection.DispatchProxy", "f6917d40-2437-438d-91a6-fd5af69927f0" }, 
		{ "System.Reflection.Emit.ILGeneration", "1dde9ac4-423f-40f2-a3f1-e65d82e2e1f7" }, 
		{ "System.Reflection.Emit.Lightweight", "517c11b7-c974-4d7e-853e-fd333d10b838" }, 
		{ "System.Reflection.Emit", "56e9e460-816a-4791-84f8-5513222c8232" }, 
		{ "System.Reflection.Extensions", "874dd1fe-b85c-4ab6-adf0-9e93fc956378" }, 
		{ "System.Reflection.Metadata", "f111cfb4-190b-4ce7-9e9e-1caa8065ed63" }, 
		{ "System.Reflection.Primitives", "28c03c57-4c81-404f-94f1-535c122ee985" }, 
		{ "System.Reflection.TypeExtensions", "bbf6016b-2f9b-4e78-8593-a47a85a9169d" }, 
		{ "System.Reflection", "9379f605-7af4-4d42-a861-095183877932" }, 
		{ "System.Resources.Reader", "1fe71871-b91b-4666-b158-5bf399d06cfd" }, 
		{ "System.Resources.ResourceManager", "9ecdae99-f373-4bd8-8ef9-00527cfdc7ce" }, 
		{ "System.Resources.Writer", "d5da6141-1c7d-4e45-876c-cad8085bdf33" }, 
		{ "System.Runtime.CompilerServices.Unsafe", "1398d62d-58d7-43ee-b4ed-82e9c7c87e5f" }, 
		{ "System.Runtime.CompilerServices.VisualC", "020542a1-9928-47d0-8002-1dbca752b660" }, 
		{ "System.Runtime.Extensions", "80c3fcef-fab4-48f5-a940-842deddc517e" }, 
		{ "System.Runtime.Handles", "3f25baaa-6729-4246-8e15-aefbac4a641d" }, 
		{ "System.Runtime.InteropServices.JavaScript", "611bfeae-1656-4da6-9d37-24594986a275" }, 
		{ "System.Runtime.InteropServices.RuntimeInformation", "7ff95d9e-e15b-4501-a8e2-144f494051d8" }, 
		{ "System.Runtime.InteropServices", "683b913f-fc64-443c-9a5a-3680c57b5da6" }, 
		{ "System.Runtime.Intrinsics", "daba9662-c495-4f09-8543-5105a41fec6a" }, 
		{ "System.Runtime.Loader", "3cdb198c-7ce1-4d91-9df1-9831f97fb06c" }, 
		{ "System.Runtime.Numerics", "946539fc-bf84-4380-8bb4-dfad72949521" }, 
		{ "System.Runtime.Serialization.Formatters", "2e16ee57-8267-4784-b9f5-bbddac4b52c6" }, 
		{ "System.Runtime.Serialization.Json", "e5c0ff8d-9b0a-4f51-b2f6-d8e2c94ec2b2" }, 
		{ "System.Runtime.Serialization.Primitives", "2d921f4c-9b76-4746-9c93-fde9a7e158c5" }, 
		{ "System.Runtime.Serialization.Xml", "e569ab6a-75cc-47af-adcc-376879f74e4c" }, 
		{ "System.Runtime.Serialization", "27593b60-6f81-4cdc-b846-8fbda90984a4" }, 
		{ "System.Runtime", "f26af2db-a94e-4b2b-930b-fcb3410a6a5d" }, 
		{ "System.Security.AccessControl", "90d5394c-91f3-4b7f-a751-a9f92604e0b7" }, 
		{ "System.Security.Claims", "6b624d22-4d2a-4bea-8365-e291e734b6bd" }, 
		{ "System.Security.Cryptography.Algorithms", "38e04c32-9dd0-4399-bac9-cb56b2aa65a6" }, 
		{ "System.Security.Cryptography.Cng", "006a3c44-a70d-445e-9a56-3fd330001672" }, 
		{ "System.Security.Cryptography.Csp", "1a2fa28b-e338-4a35-a7c2-9b84f6e28e5e" }, 
		{ "System.Security.Cryptography.Encoding", "0e3ab8b8-71f8-44c2-906a-120b39292884" }, 
		{ "System.Security.Cryptography.OpenSsl", "72746cc0-652c-4408-8466-101b4edac306" }, 
		{ "System.Security.Cryptography.Primitives", "f1c4b647-9736-47c5-86f2-c4a58045c506" }, 
		{ "System.Security.Cryptography.X509Certificates", "772c09a0-7335-4671-b82d-04d4df8418a0" }, 
		{ "System.Security.Cryptography", "5e2bdf76-21eb-4d99-9f9e-9b088b1cf5a2" }, 
		{ "System.Security.Principal.Windows", "705ba9a9-16d5-4626-945d-4f7a11d9c93a" }, 
		{ "System.Security.Principal", "5beedd4c-8474-4ba7-8cb8-1ce747daad27" }, 
		{ "System.Security.SecureString", "f6cb744f-1204-4567-a6bd-a1567a661502" }, 
		{ "System.Security", "e9be25e7-b34c-4281-ac61-30f76ca63865" }, 
		{ "System.ServiceModel.Web", "e3ba4941-d5e5-4d82-833b-7d584535d531" }, 
		{ "System.ServiceProcess", "e8b8d2f7-9b52-4290-9cd4-da6d63da2bf3" }, 
		{ "System.Text.Encoding.CodePages", "a4c57357-02e9-46ea-abec-dd256f92f41d" }, 
		{ "System.Text.Encoding.Extensions", "864ecfe1-7ace-4f7f-86b1-1094330405a1" }, 
		{ "System.Text.Encoding", "d6320b9c-5ec1-4412-a2a8-0cff6ac0fbf3" }, 
		{ "System.Text.Encodings.Web", "5da26c0e-47f6-43f4-97c6-4b733d414e3a" }, 
		{ "System.Text.Json", "0f73055d-8b43-4f16-a4a5-0d216a4472b3" }, 
		{ "System.Text.RegularExpressions", "5245715b-04e0-4e53-8f22-6c626e626450" }, 
		{ "System.Threading.Channels", "211b6f00-4865-487f-94dd-252f018c864a" }, 
		{ "System.Threading.Overlapped", "15cc2d9d-213a-4115-af9e-7de894cb8d33" }, 
		{ "System.Threading.Tasks.Dataflow", "9541124a-1322-4d63-adb8-50b88c10320d" }, 
		{ "System.Threading.Tasks.Extensions", "9d726621-0ef2-4022-9fce-e894e72b98d5" }, 
		{ "System.Threading.Tasks.Parallel", "10755dc1-ad40-4313-ae17-dd354f50d739" }, 
		{ "System.Threading.Tasks", "5081eae0-4567-4590-8c93-8a0b232b68e8" }, 
		{ "System.Threading.Thread", "2ec1e3a1-4ac5-40a7-861c-6cc642d89dbd" }, 
		{ "System.Threading.ThreadPool", "4370aaf9-cc98-4ff8-ad8f-953795d24fee" }, 
		{ "System.Threading.Timer", "fac0e4ab-76a6-43f6-8ca4-3e2f41bc890c" }, 
		{ "System.Threading", "c1c62fbf-0985-45cb-8726-c9c0fbbe7a14" }, 
		{ "System.Transactions.Local", "aecb4876-989a-484c-bf58-fbbb6fcd2b99" }, 
		{ "System.Transactions", "70053ab6-8979-4aae-8fa4-471f1ebd0195" }, 
		{ "System.ValueTuple", "5feb4da3-bfeb-4309-b0ce-5b00a6163413" }, 
		{ "System.Web.HttpUtility", "ebe1b59f-1454-4c43-bd1e-3c6a4d6f1f45" }, 
		{ "System.Web", "5246af75-aceb-4d17-b7f1-725128046e37" }, 
		{ "System.Windows", "57e48f91-76ce-485f-b7b4-0f16ee668f7f" }, 
		{ "System.Xml.Linq", "64fa7231-e811-4bda-a88e-d3bb7b4a6651" }, 
		{ "System.Xml.ReaderWriter", "0b030924-e1aa-48da-8a0a-ca8119c3de1e" }, 
		{ "System.Xml.Serialization", "d74037f7-39f4-411b-a8c1-97077347a5a2" }, 
		{ "System.Xml.XDocument", "729f5317-dd27-4b02-bf0f-da12c78ae679" }, 
		{ "System.Xml.XPath.XDocument", "eca5f4cd-6811-4fdb-82cc-a4453413e027" }, 
		{ "System.Xml.XPath", "ad9115e3-3554-4178-b670-ee2fc1caf398" }, 
		{ "System.Xml.XmlDocument", "dc4b4725-a961-4beb-b2eb-2e8aa8088a76" }, 
		{ "System.Xml.XmlSerializer", "57c22d04-26f1-4b73-8484-83a70cf0ace5" }, 
		{ "System.Xml", "4c5bfc23-70b4-4c2f-a0b8-0951fc5e94e6" }, 
		{ "System", "3478bb51-c07d-456a-9fb7-8f3630813cd3" }, 
		{ "WindowsBase", "2c48c845-ee00-4511-a649-859f176d8159" }, 
		{ "mscorlib", "993e786c-7043-433a-ad4e-e3a1c9aace26" }, 
		{ "netstandard", "62bf7f88-9395-4c44-be64-5241a39665d7" }, 
		{ "System.Private.CoreLib", "0979ad62-cb6d-45c7-b95b-767c06606852" }, 
		{ "Microsoft.MacCatalyst", "6a8eb6bc-1a16-4f9b-bd50-6e955cc6a3d6" }
	};

	static const MTFullTokenReference __xamarin_token_references [] = {
		{ /* #1 = 0x1 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000000 /* Foundation.NSObject */ },
		{ /* #2 = 0x3 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000001 /* UIKit.UIResponder */ },
		{ /* #3 = 0x5 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000002 /* UIKit.IUIApplicationDelegate */ },
		{ /* #4 = 0x7 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20001A6 /* UIKit.UIApplicationDelegateWrapper */ },
		{ /* #5 = 0x9 */ 13 /* Microsoft.Maui */, 0xFFFFFFFF /* Microsoft.Maui.dll */, 0x2000000 /* Microsoft.Maui.MauiUIApplicationDelegate */ },
		{ /* #6 = 0xB */ 0 /* MiniProject */, 0xFFFFFFFF /* MiniProject.dll */, 0x2000000 /* MiniProject.AppDelegate */ },
		{ /* #7 = 0xD */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000003 /* UIKit.UIGestureRecognizer */ },
		{ /* #8 = 0xF */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x2000000 /* Microsoft.Maui.Controls.Compatibility.Platform.iOS.GlobalCloseContextGestureRecognizer */ },
		{ /* #9 = 0x11 */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x2000001 /* Microsoft.Maui.Controls.Compatibility.Platform.iOS.NativeViewPropertyListener */ },
		{ /* #10 = 0x13 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000004 /* UIKit.UIViewController */ },
		{ /* #11 = 0x15 */ 13 /* Microsoft.Maui */, 0xFFFFFFFF /* Microsoft.Maui.dll */, 0x2000001 /* Microsoft.Maui.Platform.ModalWrapper */ },
		{ /* #12 = 0x17 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000005 /* UIKit.IUIAdaptivePresentationControllerDelegate */ },
		{ /* #13 = 0x19 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20001A5 /* UIKit.UIAdaptivePresentationControllerDelegateWrapper */ },
		{ /* #14 = 0x1B */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x2000002 /* Microsoft.Maui.Controls.Platform.ControlsModalWrapper */ },
		{ /* #15 = 0x1D */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000006 /* UIKit.IUICoordinateSpace */ },
		{ /* #16 = 0x1F */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20001AC /* UIKit.UICoordinateSpaceWrapper */ },
		{ /* #17 = 0x21 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000007 /* UIKit.IUIDynamicItem */ },
		{ /* #18 = 0x23 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20001B3 /* UIKit.UIDynamicItemWrapper */ },
		{ /* #19 = 0x25 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000008 /* CoreAnimation.ICALayerDelegate */ },
		{ /* #20 = 0x27 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200019C /* CoreAnimation.CALayerDelegateWrapper */ },
		{ /* #21 = 0x29 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000009 /* UIKit.UIView */ },
		{ /* #22 = 0x2B */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x2000003 /* Microsoft.Maui.Controls.Platform.Compatibility.UIContainerView */ },
		{ /* #23 = 0x2D */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x2000004 /* Microsoft.Maui.Controls.Platform.Compatibility.ShellFlyoutHeaderContainer */ },
		{ /* #24 = 0x2F */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200000A /* UIKit.UITabBarController */ },
		{ /* #25 = 0x31 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200000B /* UIKit.IUINavigationControllerDelegate */ },
		{ /* #26 = 0x33 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20001BA /* UIKit.UINavigationControllerDelegateWrapper */ },
		{ /* #27 = 0x35 */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x2000005 /* Microsoft.Maui.Controls.Platform.Compatibility.ShellItemRenderer */ },
		{ /* #28 = 0x37 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200000C /* UIKit.IUITableViewDataSource */ },
		{ /* #29 = 0x39 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20001C3 /* UIKit.UITableViewDataSourceWrapper */ },
		{ /* #30 = 0x3B */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200000D /* UIKit.IUIScrollViewDelegate */ },
		{ /* #31 = 0x3D */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20001BF /* UIKit.UIScrollViewDelegateWrapper */ },
		{ /* #32 = 0x3F */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200000E /* UIKit.UITableViewController */ },
		{ /* #33 = 0x41 */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x2000006 /* Microsoft.Maui.Controls.Platform.Compatibility.ShellTableViewController */ },
		{ /* #34 = 0x43 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200000F /* UIKit.IUIGestureRecognizerDelegate */ },
		{ /* #35 = 0x45 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20001B5 /* UIKit.UIGestureRecognizerDelegateWrapper */ },
		{ /* #36 = 0x47 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000010 /* UIKit.UITableViewCell */ },
		{ /* #37 = 0x49 */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x2000007 /* Microsoft.Maui.Controls.Platform.Compatibility.UIContainerCell */ },
		{ /* #38 = 0x4B */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000011 /* UIKit.UICollectionReusableView */ },
		{ /* #39 = 0x4D */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000012 /* UIKit.UICollectionViewCell */ },
		{ /* #40 = 0x4F */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x2000008 /* Microsoft.Maui.Controls.Handlers.Items.ItemsViewCell */ },
		{ /* #41 = 0x51 */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x2000009 /* Microsoft.Maui.Controls.Handlers.Items.TemplatedCell */ },
		{ /* #42 = 0x53 */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x200000A /* Microsoft.Maui.Controls.Handlers.Items.CarouselTemplatedCell */ },
		{ /* #43 = 0x55 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000013 /* UIKit.IUICollectionViewDelegate */ },
		{ /* #44 = 0x57 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20001A8 /* UIKit.UICollectionViewDelegateWrapper */ },
		{ /* #45 = 0x59 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000014 /* UIKit.UICollectionViewController */ },
		{ /* #46 = 0x5B */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x200000B /* Microsoft.Maui.Controls.Handlers.Items.ItemsViewController`1 */ },
		{ /* #47 = 0x5D */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x200000C /* Microsoft.Maui.Controls.Handlers.Items.CarouselViewController */ },
		{ /* #48 = 0x5F */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000015 /* UIKit.UICollectionViewDelegate */ },
		{ /* #49 = 0x61 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000016 /* UIKit.UICollectionViewDelegateFlowLayout */ },
		{ /* #50 = 0x63 */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x200000D /* Microsoft.Maui.Controls.Handlers.Items.ItemsViewDelegator`2 */ },
		{ /* #51 = 0x65 */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x200000E /* Microsoft.Maui.Controls.Handlers.Items.CarouselViewDelegator */ },
		{ /* #52 = 0x67 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000017 /* UIKit.UICollectionViewLayout */ },
		{ /* #53 = 0x69 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000018 /* UIKit.UICollectionViewFlowLayout */ },
		{ /* #54 = 0x6B */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x200000F /* Microsoft.Maui.Controls.Handlers.Items.ItemsViewLayout */ },
		{ /* #55 = 0x6D */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x2000010 /* Microsoft.Maui.Controls.Handlers.Items.CarouselViewLayout */ },
		{ /* #56 = 0x6F */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x2000011 /* Microsoft.Maui.Controls.Handlers.Items.DefaultCell */ },
		{ /* #57 = 0x71 */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x2000012 /* Microsoft.Maui.Controls.Handlers.Items.GridViewLayout */ },
		{ /* #58 = 0x73 */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x2000013 /* Microsoft.Maui.Controls.Handlers.Items.StructuredItemsViewController`1 */ },
		{ /* #59 = 0x75 */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x2000014 /* Microsoft.Maui.Controls.Handlers.Items.SelectableItemsViewController`1 */ },
		{ /* #60 = 0x77 */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x2000015 /* Microsoft.Maui.Controls.Handlers.Items.GroupableItemsViewController`1 */ },
		{ /* #61 = 0x79 */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x2000016 /* Microsoft.Maui.Controls.Handlers.Items.SelectableItemsViewDelegator`2 */ },
		{ /* #62 = 0x7B */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x2000017 /* Microsoft.Maui.Controls.Handlers.Items.GroupableItemsViewDelegator`2 */ },
		{ /* #63 = 0x7D */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x2000018 /* Microsoft.Maui.Controls.Handlers.Items.HeightConstrainedTemplatedCell */ },
		{ /* #64 = 0x7F */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x2000019 /* Microsoft.Maui.Controls.Handlers.Items.HorizontalCell */ },
		{ /* #65 = 0x81 */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x200001A /* Microsoft.Maui.Controls.Handlers.Items.HorizontalDefaultCell */ },
		{ /* #66 = 0x83 */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x200001B /* Microsoft.Maui.Controls.Handlers.Items.HorizontalDefaultSupplementalView */ },
		{ /* #67 = 0x85 */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x200001C /* Microsoft.Maui.Controls.Handlers.Items.HorizontalSupplementaryView */ },
		{ /* #68 = 0x87 */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x200001D /* Microsoft.Maui.Controls.Handlers.Items.ListViewLayout */ },
		{ /* #69 = 0x89 */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x200001E /* Microsoft.Maui.Controls.Handlers.Items.ReorderableItemsViewController`1 */ },
		{ /* #70 = 0x8B */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x200001F /* Microsoft.Maui.Controls.Handlers.Items.ReorderableItemsViewDelegator`2 */ },
		{ /* #71 = 0x8D */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x2000020 /* Microsoft.Maui.Controls.Handlers.Items.WidthConstrainedTemplatedCell */ },
		{ /* #72 = 0x8F */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x2000021 /* Microsoft.Maui.Controls.Handlers.Items.VerticalCell */ },
		{ /* #73 = 0x91 */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x2000022 /* Microsoft.Maui.Controls.Handlers.Items.VerticalDefaultCell */ },
		{ /* #74 = 0x93 */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x2000023 /* Microsoft.Maui.Controls.Handlers.Items.VerticalDefaultSupplementalView */ },
		{ /* #75 = 0x95 */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x2000024 /* Microsoft.Maui.Controls.Handlers.Items.VerticalSupplementaryView */ },
		{ /* #76 = 0x97 */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x2000025 /* Microsoft.Maui.Controls.Handlers.Items2.ItemsViewDelegator2`2 */ },
		{ /* #77 = 0x99 */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x2000026 /* Microsoft.Maui.Controls.Handlers.Items2.CarouselViewDelegator2 */ },
		{ /* #78 = 0x9B */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x2000027 /* Microsoft.Maui.Controls.Handlers.Items2.ItemsViewCell2 */ },
		{ /* #79 = 0x9D */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x2000028 /* Microsoft.Maui.Controls.Handlers.Items2.DefaultCell2 */ },
		{ /* #80 = 0x9F */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x2000029 /* Microsoft.Maui.Controls.Handlers.Items2.ItemsViewController2`1 */ },
		{ /* #81 = 0xA1 */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x200002A /* Microsoft.Maui.Controls.Handlers.Items2.StructuredItemsViewController2`1 */ },
		{ /* #82 = 0xA3 */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x200002B /* Microsoft.Maui.Controls.Handlers.Items2.SelectableItemsViewController2`1 */ },
		{ /* #83 = 0xA5 */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x200002C /* Microsoft.Maui.Controls.Handlers.Items2.GroupableItemsViewController2`1 */ },
		{ /* #84 = 0xA7 */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x200002D /* Microsoft.Maui.Controls.Handlers.Items2.SelectableItemsViewDelegator2`2 */ },
		{ /* #85 = 0xA9 */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x200002E /* Microsoft.Maui.Controls.Handlers.Items2.GroupableItemsViewDelegator2`2 */ },
		{ /* #86 = 0xAB */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x200002F /* Microsoft.Maui.Controls.Handlers.Items2.TemplatedCell2 */ },
		{ /* #87 = 0xAD */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x2000030 /* Microsoft.Maui.Controls.Handlers.Items2.HeightConstrainedTemplatedCell2 */ },
		{ /* #88 = 0xAF */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x2000031 /* Microsoft.Maui.Controls.Handlers.Items2.HorizontalCell2 */ },
		{ /* #89 = 0xB1 */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x2000032 /* Microsoft.Maui.Controls.Handlers.Items2.HorizontalDefaultCell2 */ },
		{ /* #90 = 0xB3 */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x2000033 /* Microsoft.Maui.Controls.Handlers.Items2.HorizontalDefaultSupplementalView2 */ },
		{ /* #91 = 0xB5 */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x2000034 /* Microsoft.Maui.Controls.Handlers.Items2.HorizontalSupplementaryView2 */ },
		{ /* #92 = 0xB7 */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x2000035 /* Microsoft.Maui.Controls.Handlers.Items2.ReorderableItemsViewController2`1 */ },
		{ /* #93 = 0xB9 */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x2000036 /* Microsoft.Maui.Controls.Handlers.Items2.ReorderableItemsViewDelegator2`2 */ },
		{ /* #94 = 0xBB */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x2000037 /* Microsoft.Maui.Controls.Handlers.Items2.UIContainerView2 */ },
		{ /* #95 = 0xBD */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x2000038 /* Microsoft.Maui.Controls.Handlers.Items2.WidthConstrainedTemplatedCell2 */ },
		{ /* #96 = 0xBF */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x2000039 /* Microsoft.Maui.Controls.Handlers.Items2.VerticalCell2 */ },
		{ /* #97 = 0xC1 */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x200003A /* Microsoft.Maui.Controls.Handlers.Items2.VerticalDefaultCell2 */ },
		{ /* #98 = 0xC3 */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x200003B /* Microsoft.Maui.Controls.Handlers.Items2.VerticalDefaultSupplementalView2 */ },
		{ /* #99 = 0xC5 */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x200003C /* Microsoft.Maui.Controls.Handlers.Items2.VerticalSupplementaryView2 */ },
		{ /* #100 = 0xC7 */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x200003D /* Microsoft.Maui.Controls.Handlers.Compatibility.VisualElementRenderer`1 */ },
		{ /* #101 = 0xC9 */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x200003E /* Microsoft.Maui.Controls.Handlers.Compatibility.ViewRenderer`2 */ },
		{ /* #102 = 0xCB */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x200003F /* Microsoft.Maui.Controls.Handlers.Compatibility.ViewRenderer */ },
		{ /* #103 = 0xCD */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x2000040 /* Microsoft.Maui.Controls.Handlers.Compatibility.CellTableViewCell */ },
		{ /* #104 = 0xCF */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x2000041 /* Microsoft.Maui.Controls.Handlers.Compatibility.iOS7ButtonContainer */ },
		{ /* #105 = 0xD1 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000019 /* UIKit.UITableViewHeaderFooterView */ },
		{ /* #106 = 0xD3 */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x2000042 /* Microsoft.Maui.Controls.Handlers.Compatibility.HeaderWrapperView */ },
		{ /* #107 = 0xD5 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200001A /* UIKit.IUIContextMenuInteractionDelegate */ },
		{ /* #108 = 0xD7 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20001AB /* UIKit.UIContextMenuInteractionDelegateWrapper */ },
		{ /* #109 = 0xD9 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200001B /* UIKit.UIControl */ },
		{ /* #110 = 0xDB */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200001C /* UIKit.UIRefreshControl */ },
		{ /* #111 = 0xDD */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x2000043 /* Microsoft.Maui.Controls.Handlers.Compatibility.FormsRefreshControl */ },
		{ /* #112 = 0xDF */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200001D /* UIKit.UIScrollViewDelegate */ },
		{ /* #113 = 0xE1 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200001E /* UIKit.UITableViewSource */ },
		{ /* #114 = 0xE3 */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x2000044 /* Microsoft.Maui.Controls.Handlers.Compatibility.TableViewModelRenderer */ },
		{ /* #115 = 0xE5 */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x2000045 /* Microsoft.Maui.Controls.Handlers.Compatibility.UnEvenTableViewModelRenderer */ },
		{ /* #116 = 0xE7 */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x2000046 /* Microsoft.Maui.Controls.Handlers.Compatibility.TableViewRenderer */ },
		{ /* #117 = 0xE9 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200001F /* UIKit.UITapGestureRecognizer */ },
		{ /* #118 = 0xEB */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x2000047 /* Microsoft.Maui.Platform.ResignFirstResponderTouchGestureRecognizer */ },
		{ /* #119 = 0xED */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000020 /* UIKit.UIBarItem */ },
		{ /* #120 = 0xEF */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000021 /* UIKit.UIBarButtonItem */ },
		{ /* #121 = 0xF1 */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x2000048 /* Microsoft.Maui.Controls.Compatibility.Platform.iOS.ToolbarItemExtensions/PrimaryToolbarItem */ },
		{ /* #122 = 0xF3 */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x2000049 /* Microsoft.Maui.Controls.Platform.DragAndDropDelegate/CustomLocalStateData */ },
		{ /* #123 = 0xF5 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000022 /* UIKit.IUIDragInteractionDelegate */ },
		{ /* #124 = 0xF7 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20001AF /* UIKit.UIDragInteractionDelegateWrapper */ },
		{ /* #125 = 0xF9 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000023 /* UIKit.IUIDropInteractionDelegate */ },
		{ /* #126 = 0xFB */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20001B1 /* UIKit.UIDropInteractionDelegateWrapper */ },
		{ /* #127 = 0xFD */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x200004A /* Microsoft.Maui.Controls.Platform.DragAndDropDelegate */ },
		{ /* #128 = 0xFF */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000024 /* UIKit.UIGestureRecognizer/Token */ },
		{ /* #129 = 0x101 */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x200004B /* Microsoft.Maui.Controls.Platform.iOS.CustomPressGestureRecognizer/Callback */ },
		{ /* #130 = 0x103 */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x200004C /* Microsoft.Maui.Controls.Platform.iOS.CustomPressGestureRecognizer */ },
		{ /* #131 = 0x105 */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x200004D /* Microsoft.Maui.Controls.Platform.Compatibility.ShellFlyoutContentRenderer */ },
		{ /* #132 = 0x107 */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x200004E /* Microsoft.Maui.Controls.Platform.Compatibility.ShellFlyoutRenderer */ },
		{ /* #133 = 0x109 */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x200004F /* Microsoft.Maui.Controls.Platform.Compatibility.ShellPageRendererTracker/TitleViewContainer */ },
		{ /* #134 = 0x10B */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x2000050 /* Microsoft.Maui.Controls.Platform.Compatibility.ShellSearchResultsRenderer */ },
		{ /* #135 = 0x10D */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000025 /* UIKit.UIGestureRecognizerDelegate */ },
		{ /* #136 = 0x10F */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x2000051 /* Microsoft.Maui.Controls.Platform.Compatibility.ShellSectionRenderer/GestureDelegate */ },
		{ /* #137 = 0x111 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000026 /* UIKit.UINavigationControllerDelegate */ },
		{ /* #138 = 0x113 */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x2000052 /* Microsoft.Maui.Controls.Platform.Compatibility.ShellSectionRenderer/NavDelegate */ },
		{ /* #139 = 0x115 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000027 /* UIKit.UINavigationController */ },
		{ /* #140 = 0x117 */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x2000053 /* Microsoft.Maui.Controls.Platform.Compatibility.ShellSectionRenderer */ },
		{ /* #141 = 0x119 */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x2000054 /* Microsoft.Maui.Controls.Platform.Compatibility.ShellSectionRootHeader/ShellSectionHeaderCell */ },
		{ /* #142 = 0x11B */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x2000055 /* Microsoft.Maui.Controls.Platform.Compatibility.ShellSectionRootHeader */ },
		{ /* #143 = 0x11D */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x2000056 /* Microsoft.Maui.Controls.Platform.Compatibility.ShellSectionRootRenderer */ },
		{ /* #144 = 0x11F */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x2000057 /* Microsoft.Maui.Controls.Platform.Compatibility.ShellTableViewSource/SeparatorView */ },
		{ /* #145 = 0x121 */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x2000058 /* Microsoft.Maui.Controls.Platform.Compatibility.ShellTableViewSource */ },
		{ /* #146 = 0x123 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000028 /* UIKit.UIScrollView */ },
		{ /* #147 = 0x125 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000029 /* UIKit.UICollectionView */ },
		{ /* #148 = 0x127 */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x2000059 /* Microsoft.Maui.Controls.Handlers.Items.MauiCollectionView */ },
		{ /* #149 = 0x129 */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x200005A /* Microsoft.Maui.Controls.Handlers.Items2.CarouselViewController2 */ },
		{ /* #150 = 0x12B */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200002A /* UIKit.UICollectionViewCompositionalLayout */ },
		{ /* #151 = 0x12D */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x200005B /* Microsoft.Maui.Controls.Handlers.Items2.LayoutFactory2/CustomUICollectionViewCompositionalLayout */ },
		{ /* #152 = 0x12F */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x200005C /* Microsoft.Maui.Controls.Handlers.Compatibility.PhoneFlyoutPageRenderer/ChildViewController */ },
		{ /* #153 = 0x131 */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x200005D /* Microsoft.Maui.Controls.Handlers.Compatibility.PhoneFlyoutPageRenderer */ },
		{ /* #154 = 0x133 */ 13 /* Microsoft.Maui */, 0xFFFFFFFF /* Microsoft.Maui.dll */, 0x2000002 /* Microsoft.Maui.Platform.MauiView */ },
		{ /* #155 = 0x135 */ 13 /* Microsoft.Maui */, 0xFFFFFFFF /* Microsoft.Maui.dll */, 0x2000003 /* Microsoft.Maui.Platform.ContentView */ },
		{ /* #156 = 0x137 */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x200005E /* Microsoft.Maui.Controls.Handlers.Compatibility.FrameRenderer/FrameView */ },
		{ /* #157 = 0x139 */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x200005F /* Microsoft.Maui.Controls.Handlers.Compatibility.FrameRenderer */ },
		{ /* #158 = 0x13B */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200002B /* UIKit.UIAlertController */ },
		{ /* #159 = 0x13D */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x2000060 /* Microsoft.Maui.Controls.Handlers.Compatibility.ContextActionsCell/MoreActionSheetController */ },
		{ /* #160 = 0x13F */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x2000061 /* Microsoft.Maui.Controls.Handlers.Compatibility.ContextActionsCell */ },
		{ /* #161 = 0x141 */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x2000062 /* Microsoft.Maui.Controls.Handlers.Compatibility.ContextScrollViewDelegate */ },
		{ /* #162 = 0x143 */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x2000063 /* Microsoft.Maui.Controls.Handlers.Compatibility.ListViewRenderer/ListViewDataSource */ },
		{ /* #163 = 0x145 */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x2000064 /* Microsoft.Maui.Controls.Handlers.Compatibility.ListViewRenderer/UnevenListViewDataSource */ },
		{ /* #164 = 0x147 */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x2000065 /* Microsoft.Maui.Controls.Handlers.Compatibility.ListViewRenderer */ },
		{ /* #165 = 0x149 */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x2000066 /* Microsoft.Maui.Controls.Handlers.Compatibility.FormsUITableViewController */ },
		{ /* #166 = 0x14B */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x2000067 /* Microsoft.Maui.Controls.Handlers.Compatibility.ViewCellRenderer/ViewTableCell */ },
		{ /* #167 = 0x14D */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x2000068 /* Microsoft.Maui.Controls.Handlers.Compatibility.NavigationRenderer/MauiNavigationDelegate */ },
		{ /* #168 = 0x14F */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200002C /* UIKit.UINavigationBar */ },
		{ /* #169 = 0x151 */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x2000069 /* Microsoft.Maui.Controls.Handlers.Compatibility.NavigationRenderer/MauiControlsNavigationBar */ },
		{ /* #170 = 0x153 */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x200006A /* Microsoft.Maui.Controls.Handlers.Compatibility.NavigationRenderer/Container */ },
		{ /* #171 = 0x155 */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x200006B /* Microsoft.Maui.Controls.Handlers.Compatibility.NavigationRenderer */ },
		{ /* #172 = 0x157 */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x200006C /* Microsoft.Maui.Controls.Handlers.Compatibility.ShellRenderer */ },
		{ /* #173 = 0x159 */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x200006D /* Microsoft.Maui.Controls.Handlers.Compatibility.TabbedRenderer */ },
		{ /* #174 = 0x15B */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x200006E /* Microsoft.Maui.Controls.Compatibility.Platform.iOS.ToolbarItemExtensions/SecondaryToolbarItem/SecondaryToolbarItemContent */ },
		{ /* #175 = 0x15D */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x200006F /* Microsoft.Maui.Controls.Compatibility.Platform.iOS.ToolbarItemExtensions/SecondaryToolbarItem */ },
		{ /* #176 = 0x15F */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200002D /* UIKit.UIContextMenuInteractionDelegate */ },
		{ /* #177 = 0x161 */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x2000070 /* Microsoft.Maui.Controls.Platform.GesturePlatformManager/FakeRightClickContextMenuInteraction/FakeRightClickDelegate */ },
		{ /* #178 = 0x163 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200002E /* UIKit.IUIInteraction */ },
		{ /* #179 = 0x165 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20001B6 /* UIKit.UIInteractionWrapper */ },
		{ /* #180 = 0x167 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200002F /* UIKit.UIContextMenuInteraction */ },
		{ /* #181 = 0x169 */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x2000071 /* Microsoft.Maui.Controls.Platform.GesturePlatformManager/FakeRightClickContextMenuInteraction */ },
		{ /* #182 = 0x16B */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x2000072 /* Microsoft.Maui.Controls.Handlers.Compatibility.ContextActionsCell/SelectGestureRecognizer */ },
		{ /* #183 = 0x16D */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x2000073 /* Microsoft.Maui.Controls.Handlers.Compatibility.EntryCellRenderer/EntryCellTableViewCell */ },
		{ /* #184 = 0x16F */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000030 /* UIKit.UIToolbar */ },
		{ /* #185 = 0x171 */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x2000074 /* Microsoft.Maui.Controls.Handlers.Compatibility.NavigationRenderer/SecondaryToolbar */ },
		{ /* #186 = 0x173 */ 11 /* Microsoft.Maui.Controls */, 0xFFFFFFFF /* Microsoft.Maui.Controls.dll */, 0x2000075 /* Microsoft.Maui.Controls.Handlers.Compatibility.NavigationRenderer/ParentingViewController */ },
		{ /* #187 = 0x175 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000031 /* UIKit.NSLayoutConstraint */ },
		{ /* #188 = 0x177 */ 13 /* Microsoft.Maui */, 0xFFFFFFFF /* Microsoft.Maui.dll */, 0x2000004 /* Microsoft.Maui.Platform.CollapseConstraint */ },
		{ /* #189 = 0x179 */ 13 /* Microsoft.Maui */, 0xFFFFFFFF /* Microsoft.Maui.dll */, 0x2000005 /* Microsoft.Maui.Platform.ContainerViewController */ },
		{ /* #190 = 0x17B */ 13 /* Microsoft.Maui */, 0xFFFFFFFF /* Microsoft.Maui.dll */, 0x2000006 /* Microsoft.Maui.Platform.LayoutView */ },
		{ /* #191 = 0x17D */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000032 /* UIKit.UIActivityIndicatorView */ },
		{ /* #192 = 0x17F */ 13 /* Microsoft.Maui */, 0xFFFFFFFF /* Microsoft.Maui.dll */, 0x2000007 /* Microsoft.Maui.Platform.MauiActivityIndicator */ },
		{ /* #193 = 0x181 */ 15 /* Microsoft.Maui.Graphics */, 0xFFFFFFFF /* Microsoft.Maui.Graphics.dll */, 0x2000000 /* Microsoft.Maui.Graphics.Platform.PlatformGraphicsView */ },
		{ /* #194 = 0x183 */ 13 /* Microsoft.Maui */, 0xFFFFFFFF /* Microsoft.Maui.dll */, 0x2000008 /* Microsoft.Maui.Platform.MauiBoxView */ },
		{ /* #195 = 0x185 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000033 /* CoreAnimation.CALayer */ },
		{ /* #196 = 0x187 */ 13 /* Microsoft.Maui */, 0xFFFFFFFF /* Microsoft.Maui.dll */, 0x2000009 /* Microsoft.Maui.Platform.MauiCALayer */ },
		{ /* #197 = 0x189 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000034 /* UIKit.UIButton */ },
		{ /* #198 = 0x18B */ 13 /* Microsoft.Maui */, 0xFFFFFFFF /* Microsoft.Maui.dll */, 0x200000A /* Microsoft.Maui.Platform.MauiCheckBox */ },
		{ /* #199 = 0x18D */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000035 /* UIKit.IUITextInputTraits */ },
		{ /* #200 = 0x18F */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20001C6 /* UIKit.UITextInputTraitsWrapper */ },
		{ /* #201 = 0x191 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000036 /* UIKit.IUITextInput */ },
		{ /* #202 = 0x193 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20001C5 /* UIKit.UITextInputWrapper */ },
		{ /* #203 = 0x195 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000037 /* UIKit.UITextField */ },
		{ /* #204 = 0x197 */ 13 /* Microsoft.Maui */, 0xFFFFFFFF /* Microsoft.Maui.dll */, 0x200000B /* Microsoft.Maui.Platform.NoCaretField */ },
		{ /* #205 = 0x199 */ 13 /* Microsoft.Maui */, 0xFFFFFFFF /* Microsoft.Maui.dll */, 0x200000C /* Microsoft.Maui.Platform.MauiDatePicker */ },
		{ /* #206 = 0x19B */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000038 /* UIKit.UIImageView */ },
		{ /* #207 = 0x19D */ 13 /* Microsoft.Maui */, 0xFFFFFFFF /* Microsoft.Maui.dll */, 0x200000D /* Microsoft.Maui.Platform.MauiImageView */ },
		{ /* #208 = 0x19F */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000039 /* UIKit.UILabel */ },
		{ /* #209 = 0x1A1 */ 13 /* Microsoft.Maui */, 0xFFFFFFFF /* Microsoft.Maui.dll */, 0x200000E /* Microsoft.Maui.Platform.MauiLabel */ },
		{ /* #210 = 0x1A3 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200003A /* UIKit.UIPageControl */ },
		{ /* #211 = 0x1A5 */ 13 /* Microsoft.Maui */, 0xFFFFFFFF /* Microsoft.Maui.dll */, 0x200000F /* Microsoft.Maui.Platform.MauiPageControl */ },
		{ /* #212 = 0x1A7 */ 13 /* Microsoft.Maui */, 0xFFFFFFFF /* Microsoft.Maui.dll */, 0x2000010 /* Microsoft.Maui.Platform.MauiPicker */ },
		{ /* #213 = 0x1A9 */ 13 /* Microsoft.Maui */, 0xFFFFFFFF /* Microsoft.Maui.dll */, 0x2000011 /* Microsoft.Maui.Platform.MauiRefreshView */ },
		{ /* #214 = 0x1AB */ 13 /* Microsoft.Maui */, 0xFFFFFFFF /* Microsoft.Maui.dll */, 0x2000012 /* Microsoft.Maui.Platform.MauiScrollView */ },
		{ /* #215 = 0x1AD */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200003B /* UIKit.UISearchBar */ },
		{ /* #216 = 0x1AF */ 13 /* Microsoft.Maui */, 0xFFFFFFFF /* Microsoft.Maui.dll */, 0x2000013 /* Microsoft.Maui.Platform.MauiSearchBar */ },
		{ /* #217 = 0x1B1 */ 13 /* Microsoft.Maui */, 0xFFFFFFFF /* Microsoft.Maui.dll */, 0x2000014 /* Microsoft.Maui.Platform.MauiShapeView */ },
		{ /* #218 = 0x1B3 */ 13 /* Microsoft.Maui */, 0xFFFFFFFF /* Microsoft.Maui.dll */, 0x2000015 /* Microsoft.Maui.Platform.MauiTextField */ },
		{ /* #219 = 0x1B5 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200003C /* UIKit.UITextView */ },
		{ /* #220 = 0x1B7 */ 13 /* Microsoft.Maui */, 0xFFFFFFFF /* Microsoft.Maui.dll */, 0x2000016 /* Microsoft.Maui.Platform.MauiTextView */ },
		{ /* #221 = 0x1B9 */ 13 /* Microsoft.Maui */, 0xFFFFFFFF /* Microsoft.Maui.dll */, 0x2000017 /* Microsoft.Maui.Platform.MauiTimePicker */ },
		{ /* #222 = 0x1BB */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200003D /* WebKit.IWKNavigationDelegate */ },
		{ /* #223 = 0x1BD */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000191 /* WebKit.WKNavigationDelegateWrapper */ },
		{ /* #224 = 0x1BF */ 13 /* Microsoft.Maui */, 0xFFFFFFFF /* Microsoft.Maui.dll */, 0x2000018 /* Microsoft.Maui.Platform.MauiWebViewNavigationDelegate */ },
		{ /* #225 = 0x1C1 */ 13 /* Microsoft.Maui */, 0xFFFFFFFF /* Microsoft.Maui.dll */, 0x2000019 /* Microsoft.Maui.Platform.PageViewController */ },
		{ /* #226 = 0x1C3 */ 13 /* Microsoft.Maui */, 0xFFFFFFFF /* Microsoft.Maui.dll */, 0x200001A /* Microsoft.Maui.Platform.SemanticSwitchContentView */ },
		{ /* #227 = 0x1C5 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200003E /* CoreAnimation.CAGradientLayer */ },
		{ /* #228 = 0x1C7 */ 13 /* Microsoft.Maui */, 0xFFFFFFFF /* Microsoft.Maui.dll */, 0x200001B /* Microsoft.Maui.Platform.StaticCAGradientLayer */ },
		{ /* #229 = 0x1C9 */ 13 /* Microsoft.Maui */, 0xFFFFFFFF /* Microsoft.Maui.dll */, 0x200001C /* Microsoft.Maui.Platform.StaticCALayer */ },
		{ /* #230 = 0x1CB */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200003F /* CoreAnimation.CAShapeLayer */ },
		{ /* #231 = 0x1CD */ 13 /* Microsoft.Maui */, 0xFFFFFFFF /* Microsoft.Maui.dll */, 0x200001D /* Microsoft.Maui.Platform.StaticCAShapeLayer */ },
		{ /* #232 = 0x1CF */ 13 /* Microsoft.Maui */, 0xFFFFFFFF /* Microsoft.Maui.dll */, 0x200001E /* Microsoft.Maui.Platform.WrapperView */ },
		{ /* #233 = 0x1D1 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000040 /* UIKit.IUIPickerViewDataSource */ },
		{ /* #234 = 0x1D3 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20001BD /* UIKit.UIPickerViewDataSourceWrapper */ },
		{ /* #235 = 0x1D5 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000041 /* UIKit.UIPickerViewModel */ },
		{ /* #236 = 0x1D7 */ 13 /* Microsoft.Maui */, 0xFFFFFFFF /* Microsoft.Maui.dll */, 0x200001F /* Microsoft.Maui.Handlers.PickerSource */ },
		{ /* #237 = 0x1D9 */ 13 /* Microsoft.Maui */, 0xFFFFFFFF /* Microsoft.Maui.dll */, 0x2000020 /* Microsoft.Maui.Handlers.SwipeItemButton */ },
		{ /* #238 = 0x1DB */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000042 /* UIKit.IUISceneDelegate */ },
		{ /* #239 = 0x1DD */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20001BE /* UIKit.UISceneDelegateWrapper */ },
		{ /* #240 = 0x1DF */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000043 /* UIKit.IUIWindowSceneDelegate */ },
		{ /* #241 = 0x1E1 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20001D2 /* UIKit.UIWindowSceneDelegateWrapper */ },
		{ /* #242 = 0x1E3 */ 13 /* Microsoft.Maui */, 0xFFFFFFFF /* Microsoft.Maui.dll */, 0x2000021 /* Microsoft.Maui.MauiUISceneDelegate */ },
		{ /* #243 = 0x1E5 */ 13 /* Microsoft.Maui */, 0xFFFFFFFF /* Microsoft.Maui.dll */, 0x2000022 /* Microsoft.Maui.WindowOverlay/OverlayGraphicsView */ },
		{ /* #244 = 0x1E7 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000044 /* WebKit.WKWebView */ },
		{ /* #245 = 0x1E9 */ 13 /* Microsoft.Maui */, 0xFFFFFFFF /* Microsoft.Maui.dll */, 0x2000023 /* Microsoft.Maui.Platform.MauiHybridWebView */ },
		{ /* #246 = 0x1EB */ 13 /* Microsoft.Maui */, 0xFFFFFFFF /* Microsoft.Maui.dll */, 0x2000024 /* Microsoft.Maui.Platform.MauiSwipeView */ },
		{ /* #247 = 0x1ED */ 13 /* Microsoft.Maui */, 0xFFFFFFFF /* Microsoft.Maui.dll */, 0x2000025 /* Microsoft.Maui.Platform.MauiUIContextMenuInteraction/FlyoutUIContextMenuInteractionDelegate */ },
		{ /* #248 = 0x1EF */ 13 /* Microsoft.Maui */, 0xFFFFFFFF /* Microsoft.Maui.dll */, 0x2000026 /* Microsoft.Maui.Platform.MauiUIContextMenuInteraction */ },
		{ /* #249 = 0x1F1 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000045 /* WebKit.IWKUIDelegate */ },
		{ /* #250 = 0x1F3 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000194 /* WebKit.WKUIDelegateWrapper */ },
		{ /* #251 = 0x1F5 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000046 /* WebKit.WKUIDelegate */ },
		{ /* #252 = 0x1F7 */ 13 /* Microsoft.Maui */, 0xFFFFFFFF /* Microsoft.Maui.dll */, 0x2000027 /* Microsoft.Maui.Platform.MauiWebViewUIDelegate */ },
		{ /* #253 = 0x1F9 */ 13 /* Microsoft.Maui */, 0xFFFFFFFF /* Microsoft.Maui.dll */, 0x2000028 /* Microsoft.Maui.Platform.MauiWKWebView */ },
		{ /* #254 = 0x1FB */ 13 /* Microsoft.Maui */, 0xFFFFFFFF /* Microsoft.Maui.dll */, 0x2000029 /* Microsoft.Maui.Platform.PlatformTouchGraphicsView */ },
		{ /* #255 = 0x1FD */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000047 /* WebKit.IWKScriptMessageHandler */ },
		{ /* #256 = 0x1FF */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000193 /* WebKit.WKScriptMessageHandlerWrapper */ },
		{ /* #257 = 0x201 */ 13 /* Microsoft.Maui */, 0xFFFFFFFF /* Microsoft.Maui.dll */, 0x200002A /* Microsoft.Maui.Handlers.HybridWebViewHandler/WebViewScriptMessageHandler */ },
		{ /* #258 = 0x203 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000048 /* WebKit.IWKUrlSchemeHandler */ },
		{ /* #259 = 0x205 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000195 /* WebKit.WKUrlSchemeHandlerWrapper */ },
		{ /* #260 = 0x207 */ 13 /* Microsoft.Maui */, 0xFFFFFFFF /* Microsoft.Maui.dll */, 0x200002B /* Microsoft.Maui.Handlers.HybridWebViewHandler/SchemeHandler */ },
		{ /* #261 = 0x209 */ 13 /* Microsoft.Maui */, 0xFFFFFFFF /* Microsoft.Maui.dll */, 0x200002C /* Microsoft.Maui.WindowOverlay/PassthroughView */ },
		{ /* #262 = 0x20B */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000049 /* AuthenticationServices.IASAuthorizationControllerDelegate */ },
		{ /* #263 = 0x20D */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200019D /* AuthenticationServices.ASAuthorizationControllerDelegateWrapper */ },
		{ /* #264 = 0x20F */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200004A /* AuthenticationServices.IASAuthorizationControllerPresentationContextProviding */ },
		{ /* #265 = 0x211 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200019E /* AuthenticationServices.ASAuthorizationControllerPresentationContextProvidingWrapper */ },
		{ /* #266 = 0x213 */ 14 /* Microsoft.Maui.Essentials */, 0xFFFFFFFF /* Microsoft.Maui.Essentials.dll */, 0x2000000 /* Microsoft.Maui.Authentication.AuthManager */ },
		{ /* #267 = 0x215 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200004B /* UIKit.UIAdaptivePresentationControllerDelegate */ },
		{ /* #268 = 0x217 */ 14 /* Microsoft.Maui.Essentials */, 0xFFFFFFFF /* Microsoft.Maui.Essentials.dll */, 0x2000001 /* Microsoft.Maui.ApplicationModel.UIPresentationControllerDelegate */ },
		{ /* #269 = 0x219 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200004C /* UIKit.UIActivityItemSource */ },
		{ /* #270 = 0x21B */ 14 /* Microsoft.Maui.Essentials */, 0xFFFFFFFF /* Microsoft.Maui.Essentials.dll */, 0x2000002 /* Microsoft.Maui.ApplicationModel.DataTransfer.ShareActivityItemSource */ },
		{ /* #271 = 0x21D */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200004D /* CoreLocation.ICLLocationManagerDelegate */ },
		{ /* #272 = 0x21F */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200019B /* CoreLocation.CLLocationManagerDelegateWrapper */ },
		{ /* #273 = 0x221 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200004E /* CoreLocation.CLLocationManagerDelegate */ },
		{ /* #274 = 0x223 */ 14 /* Microsoft.Maui.Essentials */, 0xFFFFFFFF /* Microsoft.Maui.Essentials.dll */, 0x2000003 /* Microsoft.Maui.Devices.Sensors.SingleLocationListener */ },
		{ /* #275 = 0x225 */ 14 /* Microsoft.Maui.Essentials */, 0xFFFFFFFF /* Microsoft.Maui.Essentials.dll */, 0x2000004 /* Microsoft.Maui.Devices.Sensors.ContinuousLocationListener */ },
		{ /* #276 = 0x227 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200004F /* SafariServices.SFSafariViewControllerDelegate */ },
		{ /* #277 = 0x229 */ 14 /* Microsoft.Maui.Essentials */, 0xFFFFFFFF /* Microsoft.Maui.Essentials.dll */, 0x2000005 /* Microsoft.Maui.Authentication.WebAuthenticatorImplementation/NativeSFSafariViewControllerDelegate */ },
		{ /* #278 = 0x22B */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000050 /* AuthenticationServices.IASWebAuthenticationPresentationContextProviding */ },
		{ /* #279 = 0x22D */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20001A0 /* AuthenticationServices.ASWebAuthenticationPresentationContextProvidingWrapper */ },
		{ /* #280 = 0x22F */ 14 /* Microsoft.Maui.Essentials */, 0xFFFFFFFF /* Microsoft.Maui.Essentials.dll */, 0x2000006 /* Microsoft.Maui.Authentication.WebAuthenticatorImplementation/ContextProvider */ },
		{ /* #281 = 0x231 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000051 /* UIKit.UIImagePickerControllerDelegate */ },
		{ /* #282 = 0x233 */ 14 /* Microsoft.Maui.Essentials */, 0xFFFFFFFF /* Microsoft.Maui.Essentials.dll */, 0x2000007 /* Microsoft.Maui.Media.MediaPickerImplementation/PhotoPickerDelegate */ },
		{ /* #283 = 0x235 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000052 /* UIKit.UIDocumentPickerDelegate */ },
		{ /* #284 = 0x237 */ 14 /* Microsoft.Maui.Essentials */, 0xFFFFFFFF /* Microsoft.Maui.Essentials.dll */, 0x2000008 /* Microsoft.Maui.Storage.FilePickerImplementation/PickerDelegate */ },
		{ /* #285 = 0x239 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000053 /* ContactsUI.CNContactPickerDelegate */ },
		{ /* #286 = 0x23B */ 14 /* Microsoft.Maui.Essentials */, 0xFFFFFFFF /* Microsoft.Maui.Essentials.dll */, 0x2000009 /* Microsoft.Maui.ApplicationModel.Communication.ContactsImplementation/ContactPickerDelegate */ },
		{ /* #287 = 0x23D */ 14 /* Microsoft.Maui.Essentials */, 0xFFFFFFFF /* Microsoft.Maui.Essentials.dll */, 0x200000A /* Microsoft.Maui.ApplicationModel.Permissions/LocationWhenInUse/ManagerDelegate */ },
		{ /* #288 = 0x23F */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000054 /* Foundation.INSCopying */ },
		{ /* #289 = 0x241 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000197 /* Foundation.NSCopyingWrapper */ },
		{ /* #290 = 0x243 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000055 /* SafariServices.SFSafariViewController */ },
		{ /* #291 = 0x245 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000056 /* UIKit.UIWindowSceneActivationConfiguration */ },
		{ /* #292 = 0x247 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000057 /* Foundation.NSEnumerator */ },
		{ /* #293 = 0x249 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000058 /* LinkPresentation.LPLinkMetadata */ },
		{ /* #294 = 0x24B */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000059 /* ContactsUI.CNContactPickerViewController */ },
		{ /* #295 = 0x24D */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200005A /* UIKit.IUITextViewDelegate */ },
		{ /* #296 = 0x24F */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20001C7 /* UIKit.UITextViewDelegateWrapper */ },
		{ /* #297 = 0x251 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200005B /* Foundation.INSItemProviderReading */ },
		{ /* #298 = 0x253 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000198 /* Foundation.NSItemProviderReadingWrapper */ },
		{ /* #299 = 0x255 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200005C /* Foundation.NSCoder */ },
		{ /* #300 = 0x257 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200005D /* Foundation.NSFormatter */ },
		{ /* #301 = 0x259 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200005E /* Intents.INIntentResponse */ },
		{ /* #302 = 0x25B */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200005F /* Intents.INIntent */ },
		{ /* #303 = 0x25D */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000060 /* WebKit.WKPreferences */ },
		{ /* #304 = 0x25F */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000061 /* WebKit.WKWindowFeatures */ },
		{ /* #305 = 0x261 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000062 /* WebKit.WKContextMenuElementInfo */ },
		{ /* #306 = 0x263 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000063 /* WebKit.WKFrameInfo */ },
		{ /* #307 = 0x265 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000064 /* WebKit.WKNavigation */ },
		{ /* #308 = 0x267 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000065 /* WebKit.WKNavigationAction */ },
		{ /* #309 = 0x269 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000066 /* WebKit.WKNavigationResponse */ },
		{ /* #310 = 0x26B */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000067 /* WebKit.IWKPreviewActionItem */ },
		{ /* #311 = 0x26D */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000192 /* WebKit.WKPreviewActionItemWrapper */ },
		{ /* #312 = 0x26F */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000068 /* WebKit.WKPreviewElementInfo */ },
		{ /* #313 = 0x271 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000069 /* WebKit.WKProcessPool */ },
		{ /* #314 = 0x273 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200006A /* WebKit.WKScriptMessage */ },
		{ /* #315 = 0x275 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200006B /* WebKit.WKSecurityOrigin */ },
		{ /* #316 = 0x277 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200006C /* WebKit.IWKUrlSchemeTask */ },
		{ /* #317 = 0x279 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000196 /* WebKit.WKUrlSchemeTaskWrapper */ },
		{ /* #318 = 0x27B */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200006D /* WebKit.WKUserContentController */ },
		{ /* #319 = 0x27D */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200006E /* WebKit.WKUserScript */ },
		{ /* #320 = 0x27F */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200006F /* WebKit.WKWebpagePreferences */ },
		{ /* #321 = 0x281 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000070 /* WebKit.WKWebsiteDataRecord */ },
		{ /* #322 = 0x283 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000071 /* WebKit.WKWebViewConfiguration */ },
		{ /* #323 = 0x285 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000072 /* Foundation.NSDispatcher */ },
		{ /* #324 = 0x287 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000073 /* Foundation.NSActionDispatcher */ },
		{ /* #325 = 0x289 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000074 /* Foundation.NSSynchronizationContextDispatcher */ },
		{ /* #326 = 0x28B */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000075 /* Foundation.NSAsyncDispatcher */ },
		{ /* #327 = 0x28D */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000076 /* Foundation.NSAsyncActionDispatcher */ },
		{ /* #328 = 0x28F */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000077 /* Foundation.NSAsyncSynchronizationContextDispatcher */ },
		{ /* #329 = 0x291 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000078 /* Foundation.NSArray */ },
		{ /* #330 = 0x293 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000079 /* Foundation.NSDateComponents */ },
		{ /* #331 = 0x295 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200007A /* Foundation.NSError */ },
		{ /* #332 = 0x297 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200007B /* Foundation.NSExceptionError */ },
		{ /* #333 = 0x299 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200007C /* Foundation.NSHttpCookie */ },
		{ /* #334 = 0x29B */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200007D /* Foundation.NSStream */ },
		{ /* #335 = 0x29D */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200007E /* Foundation.NSInputStream */ },
		{ /* #336 = 0x29F */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200007F /* Foundation.INSItemProviderWriting */ },
		{ /* #337 = 0x2A1 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000199 /* Foundation.NSItemProviderWritingWrapper */ },
		{ /* #338 = 0x2A3 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000080 /* Foundation.NSAttributedString */ },
		{ /* #339 = 0x2A5 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000081 /* Foundation.NSMutableAttributedString */ },
		{ /* #340 = 0x2A7 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000082 /* Foundation.NSSet */ },
		{ /* #341 = 0x2A9 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000083 /* Foundation.NSMutableSet */ },
		{ /* #342 = 0x2AB */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000084 /* Foundation.NSString */ },
		{ /* #343 = 0x2AD */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000085 /* Foundation.NSUrlRequest */ },
		{ /* #344 = 0x2AF */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000086 /* Foundation.NSMutableUrlRequest */ },
		{ /* #345 = 0x2B1 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000087 /* Foundation.InternalNSNotificationHandler */ },
		{ /* #346 = 0x2B3 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000088 /* Foundation.NSNull */ },
		{ /* #347 = 0x2B5 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000089 /* Foundation.NSValue */ },
		{ /* #348 = 0x2B7 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200008A /* Foundation.NSNumber */ },
		{ /* #349 = 0x2B9 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200008B /* Foundation.NSProxy */ },
		{ /* #350 = 0x2BB */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200008C /* Foundation.NSRunLoop */ },
		{ /* #351 = 0x2BD */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200008D /* Foundation.NSUrlCredential */ },
		{ /* #352 = 0x2BF */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200008E /* Foundation.NSUrlProtectionSpace */ },
		{ /* #353 = 0x2C1 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200008F /* Foundation.NSAutoreleasePool */ },
		{ /* #354 = 0x2C3 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000090 /* Foundation.NSCachedUrlResponse */ },
		{ /* #355 = 0x2C5 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000091 /* Foundation.NSDateFormatter */ },
		{ /* #356 = 0x2C7 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000092 /* Foundation.NSNotificationCenter */ },
		{ /* #357 = 0x2C9 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000093 /* Foundation.NSException */ },
		{ /* #358 = 0x2CB */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000094 /* Foundation.NSUrlResponse */ },
		{ /* #359 = 0x2CD */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000095 /* Foundation.NSHttpUrlResponse */ },
		{ /* #360 = 0x2CF */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000096 /* Foundation.NSIndexSet */ },
		{ /* #361 = 0x2D1 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000097 /* Foundation.NSNotification */ },
		{ /* #362 = 0x2D3 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000098 /* Foundation.NSOperationQueue */ },
		{ /* #363 = 0x2D5 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000099 /* Foundation.NSData */ },
		{ /* #364 = 0x2D7 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200009A /* Foundation.NSMutableData */ },
		{ /* #365 = 0x2D9 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200009B /* Foundation.NSStringDrawingContext */ },
		{ /* #366 = 0x2DB */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200009C /* Foundation.NSUrlAuthenticationChallenge */ },
		{ /* #367 = 0x2DD */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200009D /* Foundation.INSUrlSessionDelegate */ },
		{ /* #368 = 0x2DF */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200019A /* Foundation.NSUrlSessionDelegateWrapper */ },
		{ /* #369 = 0x2E1 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200009E /* Foundation.NSUrlSessionDelegate */ },
		{ /* #370 = 0x2E3 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200009F /* Foundation.NSUrlSessionTaskDelegate */ },
		{ /* #371 = 0x2E5 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20000A0 /* Foundation.NSUrlSessionDataDelegate */ },
		{ /* #372 = 0x2E7 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20000A1 /* Foundation.NSUrlSessionTask */ },
		{ /* #373 = 0x2E9 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20000A2 /* Foundation.NSUrlSessionDataTask */ },
		{ /* #374 = 0x2EB */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20000A3 /* CoreLocation.CLBeacon */ },
		{ /* #375 = 0x2ED */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20000A4 /* CoreLocation.CLBeaconIdentityConstraint */ },
		{ /* #376 = 0x2EF */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20000A5 /* CoreLocation.CLRegion */ },
		{ /* #377 = 0x2F1 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20000A6 /* CoreLocation.CLBeaconRegion */ },
		{ /* #378 = 0x2F3 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20000A7 /* CoreLocation.CLHeading */ },
		{ /* #379 = 0x2F5 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20000A8 /* CoreLocation.CLLocation */ },
		{ /* #380 = 0x2F7 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20000A9 /* CoreLocation.CLVisit */ },
		{ /* #381 = 0x2F9 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20000AA /* CoreAnimation.CAAnimation */ },
		{ /* #382 = 0x2FB */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20000AB /* CoreAnimation.CAPropertyAnimation */ },
		{ /* #383 = 0x2FD */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20000AC /* CoreAnimation.CABasicAnimation */ },
		{ /* #384 = 0x2FF */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20000AD /* CoreAnimation.CADisplayLink */ },
		{ /* #385 = 0x301 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20000AE /* CoreAnimation.CALayerDelegate */ },
		{ /* #386 = 0x303 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20000AF /* Contacts.CNContactProperty */ },
		{ /* #387 = 0x305 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20000B0 /* Contacts.CNContact */ },
		{ /* #388 = 0x307 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20000B1 /* CloudKit.CKShareMetadata */ },
		{ /* #389 = 0x309 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20000B2 /* AuthenticationServices.ASAuthorization */ },
		{ /* #390 = 0x30B */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20000B3 /* AuthenticationServices.ASAuthorizationController */ },
		{ /* #391 = 0x30D */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20000B4 /* AuthenticationServices.IASAuthorizationCredential */ },
		{ /* #392 = 0x30F */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200019F /* AuthenticationServices.ASAuthorizationCredentialWrapper */ },
		{ /* #393 = 0x311 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20000B5 /* AuthenticationServices.ASWebAuthenticationSession */ },
		{ /* #394 = 0x313 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20000B6 /* UIKit.NSLayoutManager */ },
		{ /* #395 = 0x315 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20000B7 /* UIKit.UIAppearance */ },
		{ /* #396 = 0x317 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20000B8 /* UIKit.UIBezierPath */ },
		{ /* #397 = 0x319 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20000B9 /* UIKit.UICollectionViewLayoutAttributes */ },
		{ /* #398 = 0x31B */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20000BA /* UIKit.UIControlEventProxy */ },
		{ /* #399 = 0x31D */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20000BB /* UIKit.UIEvent */ },
		{ /* #400 = 0x31F */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20000BC /* UIKit.UIFont */ },
		{ /* #401 = 0x321 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20000BD /* UIKit.UIFontDescriptor */ },
		{ /* #402 = 0x323 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20000BE /* UIKit.UILongPressGestureRecognizer */ },
		{ /* #403 = 0x325 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20000BF /* UIKit.UIPanGestureRecognizer */ },
		{ /* #404 = 0x327 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20000C0 /* UIKit.UIPinchGestureRecognizer */ },
		{ /* #405 = 0x329 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20000C1 /* UIKit.UISwipeGestureRecognizer */ },
		{ /* #406 = 0x32B */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20000C2 /* UIKit.UIHoverGestureRecognizer */ },
		{ /* #407 = 0x32D */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20000C3 /* UIKit.UIMenuElement */ },
		{ /* #408 = 0x32F */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20000C4 /* UIKit.UIMenu */ },
		{ /* #409 = 0x331 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20000C5 /* UIKit.UIPresentationController */ },
		{ /* #410 = 0x333 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20000C6 /* UIKit.UIScene */ },
		{ /* #411 = 0x335 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20000C7 /* UIKit.UIWindowScene */ },
		{ /* #412 = 0x337 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20000C8 /* UIKit.UITraitCollection */ },
		{ /* #413 = 0x339 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20000C9 /* UIKit.IUIMutableTraits */ },
		{ /* #414 = 0x33B */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20001B9 /* UIKit.UIMutableTraitsWrapper */ },
		{ /* #415 = 0x33D */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20000CA /* UIKit.IUITraitOverrides */ },
		{ /* #416 = 0x33F */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20001A1 /* UIKit.UITraitOverridesWrapper */ },
		{ /* #417 = 0x341 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20000CB /* UIKit.UIVisualEffect */ },
		{ /* #418 = 0x343 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20000CC /* UIKit.NSAdaptiveImageGlyph */ },
		{ /* #419 = 0x345 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20000CD /* UIKit.NSCollectionLayoutItem */ },
		{ /* #420 = 0x347 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20000CE /* UIKit.NSCollectionLayoutSupplementaryItem */ },
		{ /* #421 = 0x349 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20000CF /* UIKit.NSCollectionLayoutBoundarySupplementaryItem */ },
		{ /* #422 = 0x34B */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20000D0 /* UIKit.INSCollectionLayoutContainer */ },
		{ /* #423 = 0x34D */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20001A2 /* UIKit.NSCollectionLayoutContainerWrapper */ },
		{ /* #424 = 0x34F */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20000D1 /* UIKit.NSCollectionLayoutDimension */ },
		{ /* #425 = 0x351 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20000D2 /* UIKit.INSCollectionLayoutEnvironment */ },
		{ /* #426 = 0x353 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20001A3 /* UIKit.NSCollectionLayoutEnvironmentWrapper */ },
		{ /* #427 = 0x355 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20000D3 /* UIKit.NSCollectionLayoutGroup */ },
		{ /* #428 = 0x357 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20000D4 /* UIKit.NSCollectionLayoutSection */ },
		{ /* #429 = 0x359 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20000D5 /* UIKit.NSCollectionLayoutSize */ },
		{ /* #430 = 0x35B */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20000D6 /* UIKit.NSCollectionLayoutSpacing */ },
		{ /* #431 = 0x35D */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20000D7 /* UIKit.INSCollectionLayoutVisibleItem */ },
		{ /* #432 = 0x35F */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20001A4 /* UIKit.NSCollectionLayoutVisibleItemWrapper */ },
		{ /* #433 = 0x361 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20000D8 /* UIKit.NSLayoutAnchor`1 */ },
		{ /* #434 = 0x363 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20000D9 /* UIKit.NSLayoutDimension */ },
		{ /* #435 = 0x365 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20000DA /* UIKit.NSLayoutXAxisAnchor */ },
		{ /* #436 = 0x367 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20000DB /* UIKit.NSLayoutYAxisAnchor */ },
		{ /* #437 = 0x369 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20000DC /* UIKit.NSParagraphStyle */ },
		{ /* #438 = 0x36B */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20000DD /* UIKit.NSMutableParagraphStyle */ },
		{ /* #439 = 0x36D */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20000DE /* UIKit.NSShadow */ },
		{ /* #440 = 0x36F */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20000DF /* UIKit.NSTextAttachment */ },
		{ /* #441 = 0x371 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20000E0 /* UIKit.NSTextContainer */ },
		{ /* #442 = 0x373 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20000E1 /* UIKit.UIAction */ },
		{ /* #443 = 0x375 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20000E2 /* UIKit.UIActivityViewController */ },
		{ /* #444 = 0x377 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20000E3 /* UIKit.UIAlertAction */ },
		{ /* #445 = 0x379 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20000E4 /* UIKit.UIApplicationShortcutIcon */ },
		{ /* #446 = 0x37B */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20000E5 /* UIKit.UIApplicationShortcutItem */ },
		{ /* #447 = 0x37D */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20000E6 /* UIKit.UIBarAppearance */ },
		{ /* #448 = 0x37F */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20000E7 /* UIKit.UIBarButtonItemGroup */ },
		{ /* #449 = 0x381 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20000E8 /* UIKit.UIBlurEffect */ },
		{ /* #450 = 0x383 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20000E9 /* UIKit.UIButtonConfiguration */ },
		{ /* #451 = 0x385 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20000EA /* UIKit.IUITraitDefinition */ },
		{ /* #452 = 0x387 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20001C9 /* UIKit.UITraitDefinitionWrapper */ },
		{ /* #453 = 0x389 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20000EB /* UIKit.IUICGFloatTraitDefinition */ },
		{ /* #454 = 0x38B */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20001A7 /* UIKit.UICGFloatTraitDefinitionWrapper */ },
		{ /* #455 = 0x38D */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20000EC /* UIKit.UICollectionViewCompositionalLayoutConfiguration */ },
		{ /* #456 = 0x38F */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20000ED /* UIKit.IUIDragAnimating */ },
		{ /* #457 = 0x391 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20001AD /* UIKit.UIDragAnimatingWrapper */ },
		{ /* #458 = 0x393 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20000EE /* UIKit.UIDropProposal */ },
		{ /* #459 = 0x395 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20000EF /* UIKit.UICollectionViewLayoutInvalidationContext */ },
		{ /* #460 = 0x397 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20000F0 /* UIKit.UICollectionViewFlowLayoutInvalidationContext */ },
		{ /* #461 = 0x399 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20000F1 /* UIKit.UIFocusUpdateContext */ },
		{ /* #462 = 0x39B */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20000F2 /* UIKit.UICollectionViewFocusUpdateContext */ },
		{ /* #463 = 0x39D */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20000F3 /* UIKit.UICollectionViewTransitionLayout */ },
		{ /* #464 = 0x39F */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20000F4 /* UIKit.UICollectionViewUpdateItem */ },
		{ /* #465 = 0x3A1 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20000F5 /* UIKit.UICommand */ },
		{ /* #466 = 0x3A3 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20000F6 /* UIKit.UIContextMenuConfiguration */ },
		{ /* #467 = 0x3A5 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20000F7 /* UIKit.IUIContextMenuInteractionAnimating */ },
		{ /* #468 = 0x3A7 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20001A9 /* UIKit.UIContextMenuInteractionAnimatingWrapper */ },
		{ /* #469 = 0x3A9 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20000F8 /* UIKit.IUIContextMenuInteractionCommitAnimating */ },
		{ /* #470 = 0x3AB */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20001AA /* UIKit.UIContextMenuInteractionCommitAnimatingWrapper */ },
		{ /* #471 = 0x3AD */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20000F9 /* UIKit.IUITimingCurveProvider */ },
		{ /* #472 = 0x3AF */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20001C8 /* UIKit.UITimingCurveProviderWrapper */ },
		{ /* #473 = 0x3B1 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20000FA /* UIKit.UICubicTimingParameters */ },
		{ /* #474 = 0x3B3 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20000FB /* UIKit.IUIViewControllerAnimatedTransitioning */ },
		{ /* #475 = 0x3B5 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20001CB /* UIKit.UIViewControllerAnimatedTransitioningWrapper */ },
		{ /* #476 = 0x3B7 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20000FC /* UIKit.IUIDragDropSession */ },
		{ /* #477 = 0x3B9 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20001AE /* UIKit.UIDragDropSessionWrapper */ },
		{ /* #478 = 0x3BB */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20000FD /* UIKit.UIDragInteraction */ },
		{ /* #479 = 0x3BD */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20000FE /* UIKit.UIDragItem */ },
		{ /* #480 = 0x3BF */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20000FF /* UIKit.UIDragPreview */ },
		{ /* #481 = 0x3C1 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000100 /* UIKit.IUIDragSession */ },
		{ /* #482 = 0x3C3 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20001B0 /* UIKit.UIDragSessionWrapper */ },
		{ /* #483 = 0x3C5 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000101 /* UIKit.UIDropInteraction */ },
		{ /* #484 = 0x3C7 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000102 /* UIKit.IUIDropSession */ },
		{ /* #485 = 0x3C9 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20001B2 /* UIKit.UIDropSessionWrapper */ },
		{ /* #486 = 0x3CB */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000103 /* UIKit.IUIEditMenuInteractionAnimating */ },
		{ /* #487 = 0x3CD */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20001B4 /* UIKit.UIEditMenuInteractionAnimatingWrapper */ },
		{ /* #488 = 0x3CF */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000104 /* UIKit.UIFontMetrics */ },
		{ /* #489 = 0x3D1 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000105 /* UIKit.UIGraphicsRenderer */ },
		{ /* #490 = 0x3D3 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000106 /* UIKit.UIGraphicsImageRenderer */ },
		{ /* #491 = 0x3D5 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000107 /* UIKit.UIGraphicsRendererContext */ },
		{ /* #492 = 0x3D7 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000108 /* UIKit.UIGraphicsImageRendererContext */ },
		{ /* #493 = 0x3D9 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000109 /* UIKit.UIKeyCommand */ },
		{ /* #494 = 0x3DB */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200010A /* UIKit.IUILayoutSupport */ },
		{ /* #495 = 0x3DD */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20001B7 /* UIKit.UILayoutSupportWrapper */ },
		{ /* #496 = 0x3DF */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200010B /* UIKit.UIListContentConfiguration */ },
		{ /* #497 = 0x3E1 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200010C /* UIKit.UIListContentTextProperties */ },
		{ /* #498 = 0x3E3 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200010D /* UIKit.UILocalNotification */ },
		{ /* #499 = 0x3E5 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200010E /* UIKit.IUIMenuBuilder */ },
		{ /* #500 = 0x3E7 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20001B8 /* UIKit.UIMenuBuilderWrapper */ },
		{ /* #501 = 0x3E9 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200010F /* UIKit.UIMenuSystem */ },
		{ /* #502 = 0x3EB */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000110 /* UIKit.UINavigationBarAppearance */ },
		{ /* #503 = 0x3ED */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000111 /* UIKit.UINavigationItem */ },
		{ /* #504 = 0x3EF */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000112 /* UIKit.IUINSIntegerTraitDefinition */ },
		{ /* #505 = 0x3F1 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20001BB /* UIKit.UINSIntegerTraitDefinitionWrapper */ },
		{ /* #506 = 0x3F3 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000113 /* UIKit.IUIObjectTraitDefinition */ },
		{ /* #507 = 0x3F5 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20001BC /* UIKit.UIObjectTraitDefinitionWrapper */ },
		{ /* #508 = 0x3F7 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000114 /* UIKit.UIOpenUrlContext */ },
		{ /* #509 = 0x3F9 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000115 /* UIKit.IUIViewControllerInteractiveTransitioning */ },
		{ /* #510 = 0x3FB */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20001CD /* UIKit.UIViewControllerInteractiveTransitioningWrapper */ },
		{ /* #511 = 0x3FD */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000116 /* UIKit.UIPress */ },
		{ /* #512 = 0x3FF */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000117 /* UIKit.UISceneActivationRequestOptions */ },
		{ /* #513 = 0x401 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000118 /* UIKit.UISceneConfiguration */ },
		{ /* #514 = 0x403 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000119 /* UIKit.UISceneConnectionOptions */ },
		{ /* #515 = 0x405 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200011A /* UIKit.UISceneDestructionRequestOptions */ },
		{ /* #516 = 0x407 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200011B /* UIKit.UISceneSession */ },
		{ /* #517 = 0x409 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200011C /* UIKit.UISceneSessionActivationRequest */ },
		{ /* #518 = 0x40B */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200011D /* UIKit.UISceneSizeRestrictions */ },
		{ /* #519 = 0x40D */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200011E /* UIKit.UISceneWindowingBehaviors */ },
		{ /* #520 = 0x40F */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200011F /* UIKit.IUISearchBarDelegate */ },
		{ /* #521 = 0x411 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20001C0 /* UIKit.UISearchBarDelegateWrapper */ },
		{ /* #522 = 0x413 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000120 /* UIKit.UISearchResultsUpdating */ },
		{ /* #523 = 0x415 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000121 /* UIKit.UITab */ },
		{ /* #524 = 0x417 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000122 /* UIKit.IUITextFieldDelegate */ },
		{ /* #525 = 0x419 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20001C4 /* UIKit.UITextFieldDelegateWrapper */ },
		{ /* #526 = 0x41B */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000123 /* UIKit.IUISpringLoadedInteractionContext */ },
		{ /* #527 = 0x41D */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20001C1 /* UIKit.UISpringLoadedInteractionContextWrapper */ },
		{ /* #528 = 0x41F */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000124 /* UIKit.UISpringTimingParameters */ },
		{ /* #529 = 0x421 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000125 /* UIKit.UIStatusBarManager */ },
		{ /* #530 = 0x423 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000126 /* UIKit.UITabBarAppearance */ },
		{ /* #531 = 0x425 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000127 /* UIKit.IUITabBarControllerDelegate */ },
		{ /* #532 = 0x427 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20001C2 /* UIKit.UITabBarControllerDelegateWrapper */ },
		{ /* #533 = 0x429 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000128 /* UIKit.UITabBarControllerSidebar */ },
		{ /* #534 = 0x42B */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000129 /* UIKit.UITabBarItemAppearance */ },
		{ /* #535 = 0x42D */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200012A /* UIKit.UITabBarItemStateAppearance */ },
		{ /* #536 = 0x42F */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200012B /* UIKit.UITabGroup */ },
		{ /* #537 = 0x431 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200012C /* UIKit.UITargetedPreview */ },
		{ /* #538 = 0x433 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200012D /* UIKit.UITargetedDragPreview */ },
		{ /* #539 = 0x435 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200012E /* UIKit.UITextInputAssistantItem */ },
		{ /* #540 = 0x437 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200012F /* UIKit.UITextInputPasswordRules */ },
		{ /* #541 = 0x439 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000130 /* UIKit.UITextItem */ },
		{ /* #542 = 0x43B */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000131 /* UIKit.UITextItemMenuConfiguration */ },
		{ /* #543 = 0x43D */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000132 /* UIKit.UITextPlaceholder */ },
		{ /* #544 = 0x43F */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000133 /* UIKit.UITextPosition */ },
		{ /* #545 = 0x441 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000134 /* UIKit.UITextRange */ },
		{ /* #546 = 0x443 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000135 /* UIKit.UITextSelectionRect */ },
		{ /* #547 = 0x445 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000136 /* UIKit.UIToolTipInteraction */ },
		{ /* #548 = 0x447 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000137 /* UIKit.UITouch */ },
		{ /* #549 = 0x449 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000138 /* UIKit.UIUserNotificationSettings */ },
		{ /* #550 = 0x44B */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000139 /* UIKit.IUIViewAnimating */ },
		{ /* #551 = 0x44D */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20001CA /* UIKit.UIViewAnimatingWrapper */ },
		{ /* #552 = 0x44F */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200013A /* UIKit.IUIViewControllerContextTransitioning */ },
		{ /* #553 = 0x451 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20001CC /* UIKit.UIViewControllerContextTransitioningWrapper */ },
		{ /* #554 = 0x453 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200013B /* UIKit.IUIViewControllerTransitionCoordinatorContext */ },
		{ /* #555 = 0x455 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20001CF /* UIKit.UIViewControllerTransitionCoordinatorContextWrapper */ },
		{ /* #556 = 0x457 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200013C /* UIKit.IUIViewControllerTransitionCoordinator */ },
		{ /* #557 = 0x459 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20001CE /* UIKit.UIViewControllerTransitionCoordinatorWrapper */ },
		{ /* #558 = 0x45B */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200013D /* UIKit.IUIViewControllerTransitioningDelegate */ },
		{ /* #559 = 0x45D */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20001D0 /* UIKit.UIViewControllerTransitioningDelegateWrapper */ },
		{ /* #560 = 0x45F */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200013E /* UIKit.IUIViewImplicitlyAnimating */ },
		{ /* #561 = 0x461 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x20001D1 /* UIKit.UIViewImplicitlyAnimatingWrapper */ },
		{ /* #562 = 0x463 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200013F /* UIKit.UIViewPropertyAnimator */ },
		{ /* #563 = 0x465 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000140 /* AppKit.ActionDispatcher */ },
		{ /* #564 = 0x467 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000141 /* Foundation.NSUrlSession */ },
		{ /* #565 = 0x469 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000142 /* UIKit.UIView/UIViewAppearance */ },
		{ /* #566 = 0x46B */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000143 /* UIKit.UIScrollView/UIScrollViewAppearance */ },
		{ /* #567 = 0x46D */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000144 /* UIKit.UIControl/UIControlAppearance */ },
		{ /* #568 = 0x46F */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000145 /* UIKit.UIButton/UIButtonAppearance */ },
		{ /* #569 = 0x471 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000146 /* MediaPlayer.MPVolumeView */ },
		{ /* #570 = 0x473 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000147 /* UIKit.UIBarItem/UIBarItemAppearance */ },
		{ /* #571 = 0x475 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000148 /* WebKit.WKDownload */ },
		{ /* #572 = 0x477 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000149 /* WebKit.WKHttpCookieStore */ },
		{ /* #573 = 0x479 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200014A /* WebKit.WKWebsiteDataStore */ },
		{ /* #574 = 0x47B */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200014B /* Foundation.NSIndexPath */ },
		{ /* #575 = 0x47D */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200014C /* Foundation.NSBundle */ },
		{ /* #576 = 0x47F */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200014D /* Foundation.NSCalendar */ },
		{ /* #577 = 0x481 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200014E /* Foundation.NSDate */ },
		{ /* #578 = 0x483 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200014F /* Foundation.NSDictionary */ },
		{ /* #579 = 0x485 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000150 /* Foundation.NSItemProvider */ },
		{ /* #580 = 0x487 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000151 /* Foundation.NSLocale */ },
		{ /* #581 = 0x489 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000152 /* Foundation.NSMutableDictionary */ },
		{ /* #582 = 0x48B */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000153 /* Foundation.NSObject/NSObject_Disposer */ },
		{ /* #583 = 0x48D */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000154 /* Foundation.NSObject/Observer */ },
		{ /* #584 = 0x48F */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000155 /* Foundation.NSProgress */ },
		{ /* #585 = 0x491 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000156 /* Foundation.NSThread */ },
		{ /* #586 = 0x493 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000157 /* Foundation.NSTimeZone */ },
		{ /* #587 = 0x495 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000158 /* Foundation.NSUndoManager */ },
		{ /* #588 = 0x497 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000159 /* Foundation.NSUrl */ },
		{ /* #589 = 0x499 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200015A /* Foundation.NSUrlSessionConfiguration */ },
		{ /* #590 = 0x49B */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200015B /* Foundation.NSUserDefaults */ },
		{ /* #591 = 0x49D */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200015C /* Foundation.NSCache */ },
		{ /* #592 = 0x49F */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200015D /* Foundation.NSHttpCookieStorage */ },
		{ /* #593 = 0x4A1 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200015E /* Foundation.NSUserActivity */ },
		{ /* #594 = 0x4A3 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200015F /* CoreLocation.CLLocationManager */ },
		{ /* #595 = 0x4A5 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000160 /* System.Net.Http.NSUrlSessionHandler/WrappedNSInputStream */ },
		{ /* #596 = 0x4A7 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000161 /* AuthenticationServices.ASAuthorizationAppleIdCredential */ },
		{ /* #597 = 0x4A9 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000162 /* UIKit.UIApplication */ },
		{ /* #598 = 0x4AB */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000163 /* UIKit.UIBarButtonItem/Callback */ },
		{ /* #599 = 0x4AD */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000164 /* UIKit.UIColor */ },
		{ /* #600 = 0x4AF */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000165 /* UIKit.UIDevice */ },
		{ /* #601 = 0x4B1 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000166 /* UIKit.UIGestureRecognizer/Callback`1 */ },
		{ /* #602 = 0x4B3 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000167 /* UIKit.UIGestureRecognizer/ParameterlessDispatch */ },
		{ /* #603 = 0x4B5 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000168 /* UIKit.UIGestureRecognizer/ParametrizedDispatch */ },
		{ /* #604 = 0x4B7 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000169 /* UIKit.UIGestureRecognizer/_UIGestureRecognizerDelegate */ },
		{ /* #605 = 0x4B9 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200016A /* UIKit.UIImage */ },
		{ /* #606 = 0x4BB */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200016B /* UIKit.UIImagePickerController */ },
		{ /* #607 = 0x4BD */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200016C /* UIKit.UINavigationBar/UINavigationBarAppearance */ },
		{ /* #608 = 0x4BF */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200016D /* UIKit.UIPickerView */ },
		{ /* #609 = 0x4C1 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200016E /* UIKit.UIPopoverPresentationController/_UIPopoverPresentationControllerDelegate */ },
		{ /* #610 = 0x4C3 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200016F /* UIKit.UIPopoverPresentationController */ },
		{ /* #611 = 0x4C5 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000170 /* UIKit.UIScreen */ },
		{ /* #612 = 0x4C7 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000171 /* UIKit.UISearchBar/UISearchBarAppearance */ },
		{ /* #613 = 0x4C9 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000172 /* UIKit.UISearchBar/_UISearchBarDelegate */ },
		{ /* #614 = 0x4CB */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000173 /* UIKit.UISearchController/__Xamarin_UISearchResultsUpdating */ },
		{ /* #615 = 0x4CD */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000174 /* UIKit.UISearchController */ },
		{ /* #616 = 0x4CF */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000175 /* UIKit.UITableView/UITableViewAppearance */ },
		{ /* #617 = 0x4D1 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000176 /* UIKit.UITableView */ },
		{ /* #618 = 0x4D3 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000177 /* UIKit.UITextField/_UITextFieldDelegate */ },
		{ /* #619 = 0x4D5 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000178 /* UIKit.UIScrollView/_UIScrollViewDelegate */ },
		{ /* #620 = 0x4D7 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000179 /* UIKit.UITextView/_UITextViewDelegate */ },
		{ /* #621 = 0x4D9 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200017A /* UIKit.UIWindow */ },
		{ /* #622 = 0x4DB */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200017B /* UIKit.NSTextStorage */ },
		{ /* #623 = 0x4DD */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200017C /* UIKit.UIDatePicker */ },
		{ /* #624 = 0x4DF */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200017D /* UIKit.UIDocumentPickerViewController */ },
		{ /* #625 = 0x4E1 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200017E /* UIKit.UIFocusAnimationCoordinator */ },
		{ /* #626 = 0x4E3 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200017F /* UIKit.UIProgressView */ },
		{ /* #627 = 0x4E5 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000180 /* UIKit.UISearchTextField */ },
		{ /* #628 = 0x4E7 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000181 /* UIKit.UISlider */ },
		{ /* #629 = 0x4E9 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000182 /* UIKit.UIStackView */ },
		{ /* #630 = 0x4EB */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000183 /* UIKit.UIStepper */ },
		{ /* #631 = 0x4ED */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000184 /* UIKit.UISwitch/UISwitchAppearance */ },
		{ /* #632 = 0x4EF */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000185 /* UIKit.UISwitch */ },
		{ /* #633 = 0x4F1 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000186 /* UIKit.UITabBar/UITabBarAppearance */ },
		{ /* #634 = 0x4F3 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000187 /* UIKit.UITabBar */ },
		{ /* #635 = 0x4F5 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000188 /* UIKit.UITabBarController/_UITabBarControllerDelegate */ },
		{ /* #636 = 0x4F7 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000189 /* UIKit.UITabBarItem/UITabBarItemAppearance */ },
		{ /* #637 = 0x4F9 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200018A /* UIKit.UITabBarItem */ },
		{ /* #638 = 0x4FB */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200018B /* UIKit.UIVisualEffectView */ },
		{ /* #639 = 0x4FD */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200018C /* System.Net.Http.NSUrlSessionHandler/NSUrlSessionHandlerDelegate */ },
		{ /* #640 = 0x4FF */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200018D /* Foundation.NSMutableSet`1 */ },
		{ /* #641 = 0x501 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200018E /* Foundation.NSSet`1 */ },
		{ /* #642 = 0x503 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x200018F /* Foundation.NSDictionary`2 */ },
		{ /* #643 = 0x505 */ 186 /* Microsoft.MacCatalyst */, 0xFFFFFFFF /* Microsoft.MacCatalyst.dll */, 0x2000190 /* Foundation.NSMutableDictionary`2 */ },

	};

	static const MTProtocolWrapperMap __xamarin_protocol_wrapper_map [] = {
		{ 0x5 /* UIKit.IUIApplicationDelegate */, 0x7 /* UIApplicationDelegateWrapper */ },
		{ 0x17 /* UIKit.IUIAdaptivePresentationControllerDelegate */, 0x19 /* UIAdaptivePresentationControllerDelegateWrapper */ },
		{ 0x1D /* UIKit.IUICoordinateSpace */, 0x1F /* UICoordinateSpaceWrapper */ },
		{ 0x21 /* UIKit.IUIDynamicItem */, 0x23 /* UIDynamicItemWrapper */ },
		{ 0x25 /* CoreAnimation.ICALayerDelegate */, 0x27 /* CALayerDelegateWrapper */ },
		{ 0x31 /* UIKit.IUINavigationControllerDelegate */, 0x33 /* UINavigationControllerDelegateWrapper */ },
		{ 0x37 /* UIKit.IUITableViewDataSource */, 0x39 /* UITableViewDataSourceWrapper */ },
		{ 0x3B /* UIKit.IUIScrollViewDelegate */, 0x3D /* UIScrollViewDelegateWrapper */ },
		{ 0x43 /* UIKit.IUIGestureRecognizerDelegate */, 0x45 /* UIGestureRecognizerDelegateWrapper */ },
		{ 0x55 /* UIKit.IUICollectionViewDelegate */, 0x57 /* UICollectionViewDelegateWrapper */ },
		{ 0xD5 /* UIKit.IUIContextMenuInteractionDelegate */, 0xD7 /* UIContextMenuInteractionDelegateWrapper */ },
		{ 0xF5 /* UIKit.IUIDragInteractionDelegate */, 0xF7 /* UIDragInteractionDelegateWrapper */ },
		{ 0xF9 /* UIKit.IUIDropInteractionDelegate */, 0xFB /* UIDropInteractionDelegateWrapper */ },
		{ 0x163 /* UIKit.IUIInteraction */, 0x165 /* UIInteractionWrapper */ },
		{ 0x18D /* UIKit.IUITextInputTraits */, 0x18F /* UITextInputTraitsWrapper */ },
		{ 0x191 /* UIKit.IUITextInput */, 0x193 /* UITextInputWrapper */ },
		{ 0x1BB /* WebKit.IWKNavigationDelegate */, 0x1BD /* WKNavigationDelegateWrapper */ },
		{ 0x1D1 /* UIKit.IUIPickerViewDataSource */, 0x1D3 /* UIPickerViewDataSourceWrapper */ },
		{ 0x1DB /* UIKit.IUISceneDelegate */, 0x1DD /* UISceneDelegateWrapper */ },
		{ 0x1DF /* UIKit.IUIWindowSceneDelegate */, 0x1E1 /* UIWindowSceneDelegateWrapper */ },
		{ 0x1F1 /* WebKit.IWKUIDelegate */, 0x1F3 /* WKUIDelegateWrapper */ },
		{ 0x1FD /* WebKit.IWKScriptMessageHandler */, 0x1FF /* WKScriptMessageHandlerWrapper */ },
		{ 0x203 /* WebKit.IWKUrlSchemeHandler */, 0x205 /* WKUrlSchemeHandlerWrapper */ },
		{ 0x20B /* AuthenticationServices.IASAuthorizationControllerDelegate */, 0x20D /* ASAuthorizationControllerDelegateWrapper */ },
		{ 0x20F /* AuthenticationServices.IASAuthorizationControllerPresentationContextProviding */, 0x211 /* ASAuthorizationControllerPresentationContextProvidingWrapper */ },
		{ 0x21D /* CoreLocation.ICLLocationManagerDelegate */, 0x21F /* CLLocationManagerDelegateWrapper */ },
		{ 0x22B /* AuthenticationServices.IASWebAuthenticationPresentationContextProviding */, 0x22D /* ASWebAuthenticationPresentationContextProvidingWrapper */ },
		{ 0x23F /* Foundation.INSCopying */, 0x241 /* NSCopyingWrapper */ },
		{ 0x24D /* UIKit.IUITextViewDelegate */, 0x24F /* UITextViewDelegateWrapper */ },
		{ 0x251 /* Foundation.INSItemProviderReading */, 0x253 /* NSItemProviderReadingWrapper */ },
		{ 0x26B /* WebKit.IWKPreviewActionItem */, 0x26D /* WKPreviewActionItemWrapper */ },
		{ 0x277 /* WebKit.IWKUrlSchemeTask */, 0x279 /* WKUrlSchemeTaskWrapper */ },
		{ 0x29F /* Foundation.INSItemProviderWriting */, 0x2A1 /* NSItemProviderWritingWrapper */ },
		{ 0x2DD /* Foundation.INSUrlSessionDelegate */, 0x2DF /* NSUrlSessionDelegateWrapper */ },
		{ 0x30D /* AuthenticationServices.IASAuthorizationCredential */, 0x30F /* ASAuthorizationCredentialWrapper */ },
		{ 0x339 /* UIKit.IUIMutableTraits */, 0x33B /* UIMutableTraitsWrapper */ },
		{ 0x33D /* UIKit.IUITraitOverrides */, 0x33F /* UITraitOverridesWrapper */ },
		{ 0x34B /* UIKit.INSCollectionLayoutContainer */, 0x34D /* NSCollectionLayoutContainerWrapper */ },
		{ 0x351 /* UIKit.INSCollectionLayoutEnvironment */, 0x353 /* NSCollectionLayoutEnvironmentWrapper */ },
		{ 0x35D /* UIKit.INSCollectionLayoutVisibleItem */, 0x35F /* NSCollectionLayoutVisibleItemWrapper */ },
		{ 0x385 /* UIKit.IUITraitDefinition */, 0x387 /* UITraitDefinitionWrapper */ },
		{ 0x389 /* UIKit.IUICGFloatTraitDefinition */, 0x38B /* UICGFloatTraitDefinitionWrapper */ },
		{ 0x38F /* UIKit.IUIDragAnimating */, 0x391 /* UIDragAnimatingWrapper */ },
		{ 0x3A5 /* UIKit.IUIContextMenuInteractionAnimating */, 0x3A7 /* UIContextMenuInteractionAnimatingWrapper */ },
		{ 0x3A9 /* UIKit.IUIContextMenuInteractionCommitAnimating */, 0x3AB /* UIContextMenuInteractionCommitAnimatingWrapper */ },
		{ 0x3AD /* UIKit.IUITimingCurveProvider */, 0x3AF /* UITimingCurveProviderWrapper */ },
		{ 0x3B3 /* UIKit.IUIViewControllerAnimatedTransitioning */, 0x3B5 /* UIViewControllerAnimatedTransitioningWrapper */ },
		{ 0x3B7 /* UIKit.IUIDragDropSession */, 0x3B9 /* UIDragDropSessionWrapper */ },
		{ 0x3C1 /* UIKit.IUIDragSession */, 0x3C3 /* UIDragSessionWrapper */ },
		{ 0x3C7 /* UIKit.IUIDropSession */, 0x3C9 /* UIDropSessionWrapper */ },
		{ 0x3CB /* UIKit.IUIEditMenuInteractionAnimating */, 0x3CD /* UIEditMenuInteractionAnimatingWrapper */ },
		{ 0x3DB /* UIKit.IUILayoutSupport */, 0x3DD /* UILayoutSupportWrapper */ },
		{ 0x3E5 /* UIKit.IUIMenuBuilder */, 0x3E7 /* UIMenuBuilderWrapper */ },
		{ 0x3EF /* UIKit.IUINSIntegerTraitDefinition */, 0x3F1 /* UINSIntegerTraitDefinitionWrapper */ },
		{ 0x3F3 /* UIKit.IUIObjectTraitDefinition */, 0x3F5 /* UIObjectTraitDefinitionWrapper */ },
		{ 0x3F9 /* UIKit.IUIViewControllerInteractiveTransitioning */, 0x3FB /* UIViewControllerInteractiveTransitioningWrapper */ },
		{ 0x40F /* UIKit.IUISearchBarDelegate */, 0x411 /* UISearchBarDelegateWrapper */ },
		{ 0x417 /* UIKit.IUITextFieldDelegate */, 0x419 /* UITextFieldDelegateWrapper */ },
		{ 0x41B /* UIKit.IUISpringLoadedInteractionContext */, 0x41D /* UISpringLoadedInteractionContextWrapper */ },
		{ 0x425 /* UIKit.IUITabBarControllerDelegate */, 0x427 /* UITabBarControllerDelegateWrapper */ },
		{ 0x44B /* UIKit.IUIViewAnimating */, 0x44D /* UIViewAnimatingWrapper */ },
		{ 0x44F /* UIKit.IUIViewControllerContextTransitioning */, 0x451 /* UIViewControllerContextTransitioningWrapper */ },
		{ 0x453 /* UIKit.IUIViewControllerTransitionCoordinatorContext */, 0x455 /* UIViewControllerTransitionCoordinatorContextWrapper */ },
		{ 0x457 /* UIKit.IUIViewControllerTransitionCoordinator */, 0x459 /* UIViewControllerTransitionCoordinatorWrapper */ },
		{ 0x45B /* UIKit.IUIViewControllerTransitioningDelegate */, 0x45D /* UIViewControllerTransitioningDelegateWrapper */ },
		{ 0x45F /* UIKit.IUIViewImplicitlyAnimating */, 0x461 /* UIViewImplicitlyAnimatingWrapper */ },
	};

	static struct MTRegistrationMap __xamarin_registration_map = {
		"4c5dd937c3705d1f784a877a9af3219709d6b700",
		__xamarin_registration_assemblies,
		__xamarin_class_map,
		__xamarin_token_references,
		__xamarin_skipped_map,
		__xamarin_protocol_wrapper_map,
		{ NULL, NULL },
		187,
		507,
		643,
		4,
		66,
		0,
		(void **)0
	};

void xamarin_create_classes () {
	__xamarin_class_map [0].handle = objc_getClass ("NSObject");
	__xamarin_class_map [1].handle = objc_getClass ("UIResponder");
	__xamarin_class_map [2].handle = [Microsoft_Maui_MauiUIApplicationDelegate class];
	__xamarin_class_map [3].handle = [AppDelegate class];
	__xamarin_class_map [4].handle = objc_getClass ("UIGestureRecognizer");
	__xamarin_class_map [5].handle = [Microsoft_Maui_Controls_Compatibility_Platform_iOS_GlobalCloseContextGestureRecognizer class];
	__xamarin_class_map [6].handle = [Microsoft_Maui_Controls_Compatibility_Platform_iOS_NativeViewPropertyListener class];
	__xamarin_class_map [7].handle = objc_getClass ("UIViewController");
	__xamarin_class_map [8].handle = [Microsoft_Maui_Platform_ModalWrapper class];
	__xamarin_class_map [9].handle = [Microsoft_Maui_Controls_Platform_ControlsModalWrapper class];
	__xamarin_class_map [10].handle = objc_getClass ("UIView");
	__xamarin_class_map [11].handle = [Microsoft_Maui_Controls_Platform_Compatibility_UIContainerView class];
	__xamarin_class_map [12].handle = [Microsoft_Maui_Controls_Platform_Compatibility_ShellFlyoutHeaderContainer class];
	__xamarin_class_map [13].handle = objc_getClass ("UITabBarController");
	__xamarin_class_map [14].handle = [Microsoft_Maui_Controls_Platform_Compatibility_ShellItemRenderer class];
	__xamarin_class_map [15].handle = objc_getClass ("UITableViewController");
	__xamarin_class_map [16].handle = [Microsoft_Maui_Controls_Platform_Compatibility_ShellTableViewController class];
	__xamarin_class_map [17].handle = objc_getClass ("UITableViewCell");
	__xamarin_class_map [18].handle = [Microsoft_Maui_Controls_Platform_Compatibility_UIContainerCell class];
	__xamarin_class_map [19].handle = objc_getClass ("UICollectionReusableView");
	__xamarin_class_map [20].handle = objc_getClass ("UICollectionViewCell");
	__xamarin_class_map [21].handle = [Microsoft_Maui_Controls_Handlers_Items_ItemsViewCell class];
	__xamarin_class_map [22].handle = [Microsoft_Maui_Controls_Handlers_Items_TemplatedCell class];
	__xamarin_class_map [23].handle = [Microsoft_Maui_Controls_Handlers_Items_CarouselTemplatedCell class];
	__xamarin_class_map [24].handle = objc_getClass ("UICollectionViewController");
	__xamarin_class_map [25].handle = [Microsoft_Maui_Controls_Handlers_Items_ItemsViewController_1 class];
	__xamarin_class_map [26].handle = [Microsoft_Maui_Controls_Handlers_Items_CarouselViewController class];
	__xamarin_class_map [27].handle = objc_getClass ("Microsoft_MacCatalyst__UIKit_UICollectionViewDelegate");
	__xamarin_class_map [28].handle = objc_getClass ("Microsoft_MacCatalyst__UIKit_UICollectionViewDelegateFlowLayout");
	__xamarin_class_map [29].handle = [Microsoft_Maui_Controls_Handlers_Items_ItemsViewDelegator_2 class];
	__xamarin_class_map [30].handle = [Microsoft_Maui_Controls_Handlers_Items_CarouselViewDelegator class];
	__xamarin_class_map [31].handle = objc_getClass ("UICollectionViewLayout");
	__xamarin_class_map [32].handle = objc_getClass ("UICollectionViewFlowLayout");
	__xamarin_class_map [33].handle = [Microsoft_Maui_Controls_Handlers_Items_ItemsViewLayout class];
	__xamarin_class_map [34].handle = [Microsoft_Maui_Controls_Handlers_Items_CarouselViewLayout class];
	__xamarin_class_map [35].handle = [Microsoft_Maui_Controls_Handlers_Items_DefaultCell class];
	__xamarin_class_map [36].handle = [Microsoft_Maui_Controls_Handlers_Items_GridViewLayout class];
	__xamarin_class_map [37].handle = [Microsoft_Maui_Controls_Handlers_Items_StructuredItemsViewController_1 class];
	__xamarin_class_map [38].handle = [Microsoft_Maui_Controls_Handlers_Items_SelectableItemsViewController_1 class];
	__xamarin_class_map [39].handle = [Microsoft_Maui_Controls_Handlers_Items_GroupableItemsViewController_1 class];
	__xamarin_class_map [40].handle = [Microsoft_Maui_Controls_Handlers_Items_SelectableItemsViewDelegator_2 class];
	__xamarin_class_map [41].handle = [Microsoft_Maui_Controls_Handlers_Items_GroupableItemsViewDelegator_2 class];
	__xamarin_class_map [42].handle = [Microsoft_Maui_Controls_Handlers_Items_HeightConstrainedTemplatedCell class];
	__xamarin_class_map [43].handle = [Microsoft_Maui_Controls_Handlers_Items_HorizontalCell class];
	__xamarin_class_map [44].handle = [Microsoft_Maui_Controls_Handlers_Items_HorizontalDefaultCell class];
	__xamarin_class_map [45].handle = [Microsoft_Maui_Controls_Handlers_Items_HorizontalDefaultSupplementalView class];
	__xamarin_class_map [46].handle = [Microsoft_Maui_Controls_Handlers_Items_HorizontalSupplementaryView class];
	__xamarin_class_map [47].handle = [Microsoft_Maui_Controls_Handlers_Items_ListViewLayout class];
	__xamarin_class_map [48].handle = [Microsoft_Maui_Controls_Handlers_Items_ReorderableItemsViewController_1 class];
	__xamarin_class_map [49].handle = [Microsoft_Maui_Controls_Handlers_Items_ReorderableItemsViewDelegator_2 class];
	__xamarin_class_map [50].handle = [Microsoft_Maui_Controls_Handlers_Items_WidthConstrainedTemplatedCell class];
	__xamarin_class_map [51].handle = [Microsoft_Maui_Controls_Handlers_Items_VerticalCell class];
	__xamarin_class_map [52].handle = [Microsoft_Maui_Controls_Handlers_Items_VerticalDefaultCell class];
	__xamarin_class_map [53].handle = [Microsoft_Maui_Controls_Handlers_Items_VerticalDefaultSupplementalView class];
	__xamarin_class_map [54].handle = [Microsoft_Maui_Controls_Handlers_Items_VerticalSupplementaryView class];
	__xamarin_class_map [55].handle = [Microsoft_Maui_Controls_Handlers_Items2_ItemsViewDelegator2_2 class];
	__xamarin_class_map [56].handle = [Microsoft_Maui_Controls_Handlers_Items2_CarouselViewDelegator2 class];
	__xamarin_class_map [57].handle = [Microsoft_Maui_Controls_Handlers_Items2_ItemsViewCell2 class];
	__xamarin_class_map [58].handle = [Microsoft_Maui_Controls_Handlers_Items2_DefaultCell2 class];
	__xamarin_class_map [59].handle = [Microsoft_Maui_Controls_Handlers_Items2_ItemsViewController2_1 class];
	__xamarin_class_map [60].handle = [Microsoft_Maui_Controls_Handlers_Items2_StructuredItemsViewController2_1 class];
	__xamarin_class_map [61].handle = [Microsoft_Maui_Controls_Handlers_Items2_SelectableItemsViewController2_1 class];
	__xamarin_class_map [62].handle = [Microsoft_Maui_Controls_Handlers_Items2_GroupableItemsViewController2_1 class];
	__xamarin_class_map [63].handle = [Microsoft_Maui_Controls_Handlers_Items2_SelectableItemsViewDelegator2_2 class];
	__xamarin_class_map [64].handle = [Microsoft_Maui_Controls_Handlers_Items2_GroupableItemsViewDelegator2_2 class];
	__xamarin_class_map [65].handle = [Microsoft_Maui_Controls_Handlers_Items2_TemplatedCell2 class];
	__xamarin_class_map [66].handle = [Microsoft_Maui_Controls_Handlers_Items2_HeightConstrainedTemplatedCell2 class];
	__xamarin_class_map [67].handle = [Microsoft_Maui_Controls_Handlers_Items2_HorizontalCell2 class];
	__xamarin_class_map [68].handle = [Microsoft_Maui_Controls_Handlers_Items2_HorizontalDefaultCell2 class];
	__xamarin_class_map [69].handle = [Microsoft_Maui_Controls_Handlers_Items2_HorizontalDefaultSupplementalView2 class];
	__xamarin_class_map [70].handle = [Microsoft_Maui_Controls_Handlers_Items2_HorizontalSupplementaryView2 class];
	__xamarin_class_map [71].handle = [Microsoft_Maui_Controls_Handlers_Items2_ReorderableItemsViewController2_1 class];
	__xamarin_class_map [72].handle = [Microsoft_Maui_Controls_Handlers_Items2_ReorderableItemsViewDelegator2_2 class];
	__xamarin_class_map [73].handle = [Microsoft_Maui_Controls_Handlers_Items2_UIContainerView2 class];
	__xamarin_class_map [74].handle = [Microsoft_Maui_Controls_Handlers_Items2_WidthConstrainedTemplatedCell2 class];
	__xamarin_class_map [75].handle = [Microsoft_Maui_Controls_Handlers_Items2_VerticalCell2 class];
	__xamarin_class_map [76].handle = [Microsoft_Maui_Controls_Handlers_Items2_VerticalDefaultCell2 class];
	__xamarin_class_map [77].handle = [Microsoft_Maui_Controls_Handlers_Items2_VerticalDefaultSupplementalView2 class];
	__xamarin_class_map [78].handle = [Microsoft_Maui_Controls_Handlers_Items2_VerticalSupplementaryView2 class];
	__xamarin_class_map [79].handle = [Microsoft_Maui_Controls_Handlers_Compatibility_VisualElementRenderer_1 class];
	__xamarin_class_map [80].handle = [Microsoft_Maui_Controls_Handlers_Compatibility_ViewRenderer_2 class];
	__xamarin_class_map [81].handle = [Microsoft_Maui_Controls_Handlers_Compatibility_ViewRenderer class];
	__xamarin_class_map [82].handle = [Microsoft_Maui_Controls_Handlers_Compatibility_CellTableViewCell class];
	__xamarin_class_map [83].handle = [Microsoft_Maui_Controls_Handlers_Compatibility_iOS7ButtonContainer class];
	__xamarin_class_map [84].handle = objc_getClass ("UITableViewHeaderFooterView");
	__xamarin_class_map [85].handle = [Microsoft_Maui_Controls_Handlers_Compatibility_HeaderWrapperView class];
	__xamarin_class_map [86].handle = objc_getClass ("UIControl");
	__xamarin_class_map [87].handle = objc_getClass ("UIRefreshControl");
	__xamarin_class_map [88].handle = [Microsoft_Maui_Controls_Handlers_Compatibility_FormsRefreshControl class];
	__xamarin_class_map [89].handle = objc_getClass ("Microsoft_MacCatalyst__UIKit_UIScrollViewDelegate");
	__xamarin_class_map [90].handle = objc_getClass ("Microsoft_MacCatalyst__UIKit_UITableViewSource");
	__xamarin_class_map [91].handle = [Microsoft_Maui_Controls_Handlers_Compatibility_TableViewModelRenderer class];
	__xamarin_class_map [92].handle = [Microsoft_Maui_Controls_Handlers_Compatibility_UnEvenTableViewModelRenderer class];
	__xamarin_class_map [93].handle = [Microsoft_Maui_Controls_Handlers_Compatibility_TableViewRenderer class];
	__xamarin_class_map [94].handle = objc_getClass ("UITapGestureRecognizer");
	__xamarin_class_map [95].handle = [Microsoft_Maui_Platform_ResignFirstResponderTouchGestureRecognizer class];
	__xamarin_class_map [96].handle = objc_getClass ("UIBarItem");
	__xamarin_class_map [97].handle = objc_getClass ("UIBarButtonItem");
	__xamarin_class_map [98].handle = [Microsoft_Maui_Controls_Compatibility_Platform_iOS_ToolbarItemExtensions_PrimaryToolbarItem class];
	__xamarin_class_map [99].handle = [Microsoft_Maui_Controls_Platform_DragAndDropDelegate_CustomLocalStateData class];
	__xamarin_class_map [100].handle = [Microsoft_Maui_Controls_Platform_DragAndDropDelegate class];
	__xamarin_class_map [101].handle = objc_getClass ("__UIGestureRecognizerToken");
	__xamarin_class_map [102].handle = [__UIGestureRecognizer class];
	__xamarin_class_map [103].handle = [Microsoft_Maui_Controls_Platform_iOS_CustomPressGestureRecognizer class];
	__xamarin_class_map [104].handle = [Microsoft_Maui_Controls_Platform_Compatibility_ShellFlyoutContentRenderer class];
	__xamarin_class_map [105].handle = [Microsoft_Maui_Controls_Platform_Compatibility_ShellFlyoutRenderer class];
	__xamarin_class_map [106].handle = [Microsoft_Maui_Controls_Platform_Compatibility_ShellPageRendererTracker_TitleViewContainer class];
	__xamarin_class_map [107].handle = [Microsoft_Maui_Controls_Platform_Compatibility_ShellSearchResultsRenderer class];
	__xamarin_class_map [108].handle = objc_getClass ("Microsoft_MacCatalyst__UIKit_UIGestureRecognizerDelegate");
	__xamarin_class_map [109].handle = [Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRenderer_GestureDelegate class];
	__xamarin_class_map [110].handle = objc_getClass ("Microsoft_MacCatalyst__UIKit_UINavigationControllerDelegate");
	__xamarin_class_map [111].handle = [Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRenderer_NavDelegate class];
	__xamarin_class_map [112].handle = objc_getClass ("UINavigationController");
	__xamarin_class_map [113].handle = [Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRenderer class];
	__xamarin_class_map [114].handle = [Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootHeader_ShellSectionHeaderCell class];
	__xamarin_class_map [115].handle = [Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootHeader class];
	__xamarin_class_map [116].handle = [Microsoft_Maui_Controls_Platform_Compatibility_ShellSectionRootRenderer class];
	__xamarin_class_map [117].handle = [Microsoft_Maui_Controls_Platform_Compatibility_ShellTableViewSource_SeparatorView class];
	__xamarin_class_map [118].handle = [Microsoft_Maui_Controls_Platform_Compatibility_ShellTableViewSource class];
	__xamarin_class_map [119].handle = objc_getClass ("UIScrollView");
	__xamarin_class_map [120].handle = objc_getClass ("UICollectionView");
	__xamarin_class_map [121].handle = [Microsoft_Maui_Controls_Handlers_Items_MauiCollectionView class];
	__xamarin_class_map [122].handle = [Microsoft_Maui_Controls_Handlers_Items2_CarouselViewController2 class];
	__xamarin_class_map [123].handle = objc_getClass ("UICollectionViewCompositionalLayout");
	__xamarin_class_map [124].handle = [Microsoft_Maui_Controls_Handlers_Items2_LayoutFactory2_CustomUICollectionViewCompositionalLayout class];
	__xamarin_class_map [125].handle = [Microsoft_Maui_Controls_Handlers_Compatibility_PhoneFlyoutPageRenderer_ChildViewController class];
	__xamarin_class_map [126].handle = [Microsoft_Maui_Controls_Handlers_Compatibility_PhoneFlyoutPageRenderer class];
	__xamarin_class_map [127].handle = [Microsoft_Maui_Platform_MauiView class];
	__xamarin_class_map [128].handle = [Microsoft_Maui_Platform_ContentView class];
	__xamarin_class_map [129].handle = [Microsoft_Maui_Controls_Handlers_Compatibility_FrameRenderer_FrameView class];
	__xamarin_class_map [130].handle = [Microsoft_Maui_Controls_Handlers_Compatibility_FrameRenderer class];
	__xamarin_class_map [131].handle = objc_getClass ("UIAlertController");
	__xamarin_class_map [132].handle = [Microsoft_Maui_Controls_Handlers_Compatibility_ContextActionsCell_MoreActionSheetController class];
	__xamarin_class_map [133].handle = [Microsoft_Maui_Controls_Handlers_Compatibility_ContextActionsCell class];
	__xamarin_class_map [134].handle = [Microsoft_Maui_Controls_Handlers_Compatibility_ContextScrollViewDelegate class];
	__xamarin_class_map [135].handle = [Microsoft_Maui_Controls_Handlers_Compatibility_ListViewRenderer_ListViewDataSource class];
	__xamarin_class_map [136].handle = [Microsoft_Maui_Controls_Handlers_Compatibility_ListViewRenderer_UnevenListViewDataSource class];
	__xamarin_class_map [137].handle = [Microsoft_Maui_Controls_Handlers_Compatibility_ListViewRenderer class];
	__xamarin_class_map [138].handle = [Microsoft_Maui_Controls_Handlers_Compatibility_FormsUITableViewController class];
	__xamarin_class_map [139].handle = [Microsoft_Maui_Controls_Handlers_Compatibility_ViewCellRenderer_ViewTableCell class];
	__xamarin_class_map [140].handle = [Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_MauiNavigationDelegate class];
	__xamarin_class_map [141].handle = objc_getClass ("UINavigationBar");
	__xamarin_class_map [142].handle = [Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_MauiControlsNavigationBar class];
	__xamarin_class_map [143].handle = [Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_Container class];
	__xamarin_class_map [144].handle = [Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer class];
	__xamarin_class_map [145].handle = [Microsoft_Maui_Controls_Handlers_Compatibility_ShellRenderer class];
	__xamarin_class_map [146].handle = [Microsoft_Maui_Controls_Handlers_Compatibility_TabbedRenderer class];
	__xamarin_class_map [147].handle = [Microsoft_Maui_Controls_Compatibility_Platform_iOS_ToolbarItemExtensions_SecondaryToolbarItem_SecondaryToolbarItemContent class];
	__xamarin_class_map [148].handle = [Microsoft_Maui_Controls_Compatibility_Platform_iOS_ToolbarItemExtensions_SecondaryToolbarItem class];
	__xamarin_class_map [149].handle = objc_getClass ("Microsoft_MacCatalyst__UIKit_UIContextMenuInteractionDelegate");
	__xamarin_class_map [150].handle = [Microsoft_Maui_Controls_Platform_GesturePlatformManager_FakeRightClickContextMenuInteraction_FakeRightClickDelegate class];
	__xamarin_class_map [151].handle = objc_getClass ("UIContextMenuInteraction");
	__xamarin_class_map [152].handle = [Microsoft_Maui_Controls_Platform_GesturePlatformManager_FakeRightClickContextMenuInteraction class];
	__xamarin_class_map [153].handle = [Microsoft_Maui_Controls_Handlers_Compatibility_ContextActionsCell_SelectGestureRecognizer class];
	__xamarin_class_map [154].handle = [Microsoft_Maui_Controls_Handlers_Compatibility_EntryCellRenderer_EntryCellTableViewCell class];
	__xamarin_class_map [155].handle = objc_getClass ("UIToolbar");
	__xamarin_class_map [156].handle = [Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_SecondaryToolbar class];
	__xamarin_class_map [157].handle = [Microsoft_Maui_Controls_Handlers_Compatibility_NavigationRenderer_ParentingViewController class];
	__xamarin_class_map [158].handle = objc_getClass ("NSLayoutConstraint");
	__xamarin_class_map [159].handle = [Microsoft_Maui_Platform_CollapseConstraint class];
	__xamarin_class_map [160].handle = [Microsoft_Maui_Platform_ContainerViewController class];
	__xamarin_class_map [161].handle = [Microsoft_Maui_Platform_LayoutView class];
	__xamarin_class_map [162].handle = objc_getClass ("UIActivityIndicatorView");
	__xamarin_class_map [163].handle = [Microsoft_Maui_Platform_MauiActivityIndicator class];
	__xamarin_class_map [164].handle = [PlatformGraphicsView class];
	__xamarin_class_map [165].handle = [Microsoft_Maui_Platform_MauiBoxView class];
	__xamarin_class_map [166].handle = objc_getClass ("CALayer");
	__xamarin_class_map [167].handle = [Microsoft_Maui_Platform_MauiCALayer class];
	__xamarin_class_map [168].handle = objc_getClass ("UIButton");
	__xamarin_class_map [169].handle = [Microsoft_Maui_Platform_MauiCheckBox class];
	__xamarin_class_map [170].handle = objc_getClass ("UITextField");
	__xamarin_class_map [171].handle = [Microsoft_Maui_Platform_NoCaretField class];
	__xamarin_class_map [172].handle = [Microsoft_Maui_Platform_MauiDatePicker class];
	__xamarin_class_map [173].handle = objc_getClass ("UIImageView");
	__xamarin_class_map [174].handle = [Microsoft_Maui_Platform_MauiImageView class];
	__xamarin_class_map [175].handle = objc_getClass ("UILabel");
	__xamarin_class_map [176].handle = [Microsoft_Maui_Platform_MauiLabel class];
	__xamarin_class_map [177].handle = objc_getClass ("UIPageControl");
	__xamarin_class_map [178].handle = [Microsoft_Maui_Platform_MauiPageControl class];
	__xamarin_class_map [179].handle = [Microsoft_Maui_Platform_MauiPicker class];
	__xamarin_class_map [180].handle = [Microsoft_Maui_Platform_MauiRefreshView class];
	__xamarin_class_map [181].handle = [Microsoft_Maui_Platform_MauiScrollView class];
	__xamarin_class_map [182].handle = objc_getClass ("UISearchBar");
	__xamarin_class_map [183].handle = [Microsoft_Maui_Platform_MauiSearchBar class];
	__xamarin_class_map [184].handle = [Microsoft_Maui_Platform_MauiShapeView class];
	__xamarin_class_map [185].handle = [Microsoft_Maui_Platform_MauiTextField class];
	__xamarin_class_map [186].handle = objc_getClass ("UITextView");
	__xamarin_class_map [187].handle = [Microsoft_Maui_Platform_MauiTextView class];
	__xamarin_class_map [188].handle = [Microsoft_Maui_Platform_MauiTimePicker class];
	__xamarin_class_map [189].handle = [Microsoft_Maui_Platform_MauiWebViewNavigationDelegate class];
	__xamarin_class_map [190].handle = [Microsoft_Maui_Platform_PageViewController class];
	__xamarin_class_map [191].handle = [Microsoft_Maui_Platform_SemanticSwitchContentView class];
	__xamarin_class_map [192].handle = objc_getClass ("CAGradientLayer");
	__xamarin_class_map [193].handle = [Microsoft_Maui_Platform_StaticCAGradientLayer class];
	__xamarin_class_map [194].handle = [Microsoft_Maui_Platform_StaticCALayer class];
	__xamarin_class_map [195].handle = objc_getClass ("CAShapeLayer");
	__xamarin_class_map [196].handle = [Microsoft_Maui_Platform_StaticCAShapeLayer class];
	__xamarin_class_map [197].handle = [Microsoft_Maui_Platform_WrapperView class];
	__xamarin_class_map [198].handle = objc_getClass ("Microsoft_MacCatalyst__UIKit_UIPickerViewModel");
	__xamarin_class_map [199].handle = [Microsoft_Maui_Handlers_PickerSource class];
	__xamarin_class_map [200].handle = [Microsoft_Maui_Handlers_SwipeItemButton class];
	__xamarin_class_map [201].handle = [Microsoft_Maui_MauiUISceneDelegate class];
	__xamarin_class_map [202].handle = [Microsoft_Maui_WindowOverlay_OverlayGraphicsView class];
	__xamarin_class_map [203].handle = objc_getClass ("WKWebView");
	__xamarin_class_map [204].handle = [Microsoft_Maui_Platform_MauiHybridWebView class];
	__xamarin_class_map [205].handle = [Microsoft_Maui_Platform_MauiSwipeView class];
	__xamarin_class_map [206].handle = [Microsoft_Maui_Platform_MauiUIContextMenuInteraction_FlyoutUIContextMenuInteractionDelegate class];
	__xamarin_class_map [207].handle = [Microsoft_Maui_Platform_MauiUIContextMenuInteraction class];
	__xamarin_class_map [208].handle = objc_getClass ("Microsoft_MacCatalyst__WebKit_WKUIDelegate");
	__xamarin_class_map [209].handle = [Microsoft_Maui_Platform_MauiWebViewUIDelegate class];
	__xamarin_class_map [210].handle = [Microsoft_Maui_Platform_MauiWKWebView class];
	__xamarin_class_map [211].handle = [Microsoft_Maui_Platform_PlatformTouchGraphicsView class];
	__xamarin_class_map [212].handle = [Microsoft_Maui_Handlers_HybridWebViewHandler_WebViewScriptMessageHandler class];
	__xamarin_class_map [213].handle = [Microsoft_Maui_Handlers_HybridWebViewHandler_SchemeHandler class];
	__xamarin_class_map [214].handle = [Microsoft_Maui_WindowOverlay_PassthroughView class];
	__xamarin_class_map [215].handle = [Microsoft_Maui_Authentication_AuthManager class];
	__xamarin_class_map [216].handle = objc_getClass ("Microsoft_MacCatalyst__UIKit_UIAdaptivePresentationControllerDelegate");
	__xamarin_class_map [217].handle = [Microsoft_Maui_ApplicationModel_UIPresentationControllerDelegate class];
	__xamarin_class_map [218].handle = objc_getClass ("Microsoft_MacCatalyst__UIKit_UIActivityItemSource");
	__xamarin_class_map [219].handle = [Microsoft_Maui_ApplicationModel_DataTransfer_ShareActivityItemSource class];
	__xamarin_class_map [220].handle = objc_getClass ("Microsoft_MacCatalyst__CoreLocation_CLLocationManagerDelegate");
	__xamarin_class_map [221].handle = [Microsoft_Maui_Devices_Sensors_SingleLocationListener class];
	__xamarin_class_map [222].handle = [Microsoft_Maui_Devices_Sensors_ContinuousLocationListener class];
	__xamarin_class_map [223].handle = objc_getClass ("Microsoft_MacCatalyst__SafariServices_SFSafariViewControllerDelegate");
	__xamarin_class_map [224].handle = [Microsoft_Maui_Authentication_WebAuthenticatorImplementation_NativeSFSafariViewControllerDelegate class];
	__xamarin_class_map [225].handle = [Microsoft_Maui_Authentication_WebAuthenticatorImplementation_ContextProvider class];
	__xamarin_class_map [226].handle = objc_getClass ("Microsoft_MacCatalyst__UIKit_UIImagePickerControllerDelegate");
	__xamarin_class_map [227].handle = [Microsoft_Maui_Media_MediaPickerImplementation_PhotoPickerDelegate class];
	__xamarin_class_map [228].handle = objc_getClass ("Microsoft_MacCatalyst__UIKit_UIDocumentPickerDelegate");
	__xamarin_class_map [229].handle = [Microsoft_Maui_Storage_FilePickerImplementation_PickerDelegate class];
	__xamarin_class_map [230].handle = objc_getClass ("Microsoft_MacCatalyst__ContactsUI_CNContactPickerDelegate");
	__xamarin_class_map [231].handle = [Microsoft_Maui_ApplicationModel_Communication_ContactsImplementation_ContactPickerDelegate class];
	__xamarin_class_map [232].handle = [Microsoft_Maui_ApplicationModel_Permissions_LocationWhenInUse_ManagerDelegate class];
	__xamarin_class_map [233].handle = objc_getClass ("SFSafariViewController");
	__xamarin_class_map [234].handle = objc_getClass ("UIWindowSceneActivationConfiguration");
	__xamarin_class_map [235].handle = objc_getClass ("NSEnumerator");
	__xamarin_class_map [236].handle = objc_getClass ("LPLinkMetadata");
	__xamarin_class_map [237].handle = objc_getClass ("CNContactPickerViewController");
	__xamarin_class_map [238].handle = objc_getClass ("NSCoder");
	__xamarin_class_map [239].handle = objc_getClass ("NSFormatter");
	__xamarin_class_map [240].handle = objc_getClass ("INIntentResponse");
	__xamarin_class_map [241].handle = objc_getClass ("INIntent");
	__xamarin_class_map [242].handle = objc_getClass ("WKPreferences");
	__xamarin_class_map [243].handle = objc_getClass ("WKWindowFeatures");
	__xamarin_class_map [244].handle = objc_getClass ("WKContextMenuElementInfo");
	__xamarin_class_map [245].handle = objc_getClass ("WKFrameInfo");
	__xamarin_class_map [246].handle = objc_getClass ("WKNavigation");
	__xamarin_class_map [247].handle = objc_getClass ("WKNavigationAction");
	__xamarin_class_map [248].handle = objc_getClass ("WKNavigationResponse");
	__xamarin_class_map [249].handle = objc_getClass ("WKPreviewElementInfo");
	__xamarin_class_map [250].handle = objc_getClass ("WKProcessPool");
	__xamarin_class_map [251].handle = objc_getClass ("WKScriptMessage");
	__xamarin_class_map [252].handle = objc_getClass ("WKSecurityOrigin");
	__xamarin_class_map [253].handle = objc_getClass ("WKUserContentController");
	__xamarin_class_map [254].handle = objc_getClass ("WKUserScript");
	__xamarin_class_map [255].handle = objc_getClass ("WKWebpagePreferences");
	__xamarin_class_map [256].handle = objc_getClass ("WKWebsiteDataRecord");
	__xamarin_class_map [257].handle = objc_getClass ("WKWebViewConfiguration");
	__xamarin_class_map [258].handle = objc_getClass ("Foundation_NSDispatcher");
	__xamarin_class_map [259].handle = objc_getClass ("__MonoMac_NSActionDispatcher");
	__xamarin_class_map [260].handle = objc_getClass ("__MonoMac_NSSynchronizationContextDispatcher");
	__xamarin_class_map [261].handle = objc_getClass ("Foundation_NSAsyncDispatcher");
	__xamarin_class_map [262].handle = objc_getClass ("__MonoMac_NSAsyncActionDispatcher");
	__xamarin_class_map [263].handle = objc_getClass ("__MonoMac_NSAsyncSynchronizationContextDispatcher");
	__xamarin_class_map [264].handle = objc_getClass ("NSArray");
	__xamarin_class_map [265].handle = objc_getClass ("NSDateComponents");
	__xamarin_class_map [266].handle = objc_getClass ("NSError");
	__xamarin_class_map [267].handle = objc_getClass ("Foundation_NSExceptionError");
	__xamarin_class_map [268].handle = objc_getClass ("NSHTTPCookie");
	__xamarin_class_map [269].handle = objc_getClass ("NSStream");
	__xamarin_class_map [270].handle = objc_getClass ("NSInputStream");
	__xamarin_class_map [271].handle = objc_getClass ("NSAttributedString");
	__xamarin_class_map [272].handle = objc_getClass ("NSMutableAttributedString");
	__xamarin_class_map [273].handle = objc_getClass ("NSSet");
	__xamarin_class_map [274].handle = objc_getClass ("NSMutableSet");
	__xamarin_class_map [275].handle = objc_getClass ("NSString");
	__xamarin_class_map [276].handle = objc_getClass ("NSURLRequest");
	__xamarin_class_map [277].handle = objc_getClass ("NSMutableURLRequest");
	__xamarin_class_map [278].handle = objc_getClass ("Foundation_InternalNSNotificationHandler");
	__xamarin_class_map [279].handle = objc_getClass ("NSNull");
	__xamarin_class_map [280].handle = objc_getClass ("NSValue");
	__xamarin_class_map [281].handle = objc_getClass ("NSNumber");
	__xamarin_class_map [282].handle = objc_getClass ("NSProxy");
	__xamarin_class_map [283].handle = objc_getClass ("NSRunLoop");
	__xamarin_class_map [284].handle = objc_getClass ("NSURLCredential");
	__xamarin_class_map [285].handle = objc_getClass ("NSURLProtectionSpace");
	__xamarin_class_map [286].handle = objc_getClass ("NSAutoreleasePool");
	__xamarin_class_map [287].handle = objc_getClass ("NSCachedURLResponse");
	__xamarin_class_map [288].handle = objc_getClass ("NSDateFormatter");
	__xamarin_class_map [289].handle = objc_getClass ("NSNotificationCenter");
	__xamarin_class_map [290].handle = objc_getClass ("NSException");
	__xamarin_class_map [291].handle = objc_getClass ("NSURLResponse");
	__xamarin_class_map [292].handle = objc_getClass ("NSHTTPURLResponse");
	__xamarin_class_map [293].handle = objc_getClass ("NSIndexSet");
	__xamarin_class_map [294].handle = objc_getClass ("NSNotification");
	__xamarin_class_map [295].handle = objc_getClass ("NSOperationQueue");
	__xamarin_class_map [296].handle = objc_getClass ("NSData");
	__xamarin_class_map [297].handle = objc_getClass ("NSMutableData");
	__xamarin_class_map [298].handle = objc_getClass ("NSStringDrawingContext");
	__xamarin_class_map [299].handle = objc_getClass ("NSURLAuthenticationChallenge");
	__xamarin_class_map [300].handle = objc_getClass ("Microsoft_MacCatalyst__Foundation_NSUrlSessionDelegate");
	__xamarin_class_map [301].handle = objc_getClass ("Microsoft_MacCatalyst__Foundation_NSUrlSessionTaskDelegate");
	__xamarin_class_map [302].handle = objc_getClass ("Microsoft_MacCatalyst__Foundation_NSUrlSessionDataDelegate");
	__xamarin_class_map [303].handle = objc_getClass ("NSURLSessionTask");
	__xamarin_class_map [304].handle = objc_getClass ("NSURLSessionDataTask");
	__xamarin_class_map [305].handle = objc_getClass ("CLBeacon");
	__xamarin_class_map [306].handle = objc_getClass ("CLBeaconIdentityConstraint");
	__xamarin_class_map [307].handle = objc_getClass ("CLRegion");
	__xamarin_class_map [308].handle = objc_getClass ("CLBeaconRegion");
	__xamarin_class_map [309].handle = objc_getClass ("CLHeading");
	__xamarin_class_map [310].handle = objc_getClass ("CLLocation");
	__xamarin_class_map [311].handle = objc_getClass ("CLVisit");
	__xamarin_class_map [312].handle = objc_getClass ("CAAnimation");
	__xamarin_class_map [313].handle = objc_getClass ("CAPropertyAnimation");
	__xamarin_class_map [314].handle = objc_getClass ("CABasicAnimation");
	__xamarin_class_map [315].handle = objc_getClass ("CADisplayLink");
	__xamarin_class_map [316].handle = objc_getClass ("Microsoft_MacCatalyst__CoreAnimation_CALayerDelegate");
	__xamarin_class_map [317].handle = objc_getClass ("CNContactProperty");
	__xamarin_class_map [318].handle = objc_getClass ("CNContact");
	__xamarin_class_map [319].handle = objc_getClass ("CKShareMetadata");
	__xamarin_class_map [320].handle = objc_getClass ("ASAuthorization");
	__xamarin_class_map [321].handle = objc_getClass ("ASAuthorizationController");
	__xamarin_class_map [322].handle = objc_getClass ("ASWebAuthenticationSession");
	__xamarin_class_map [323].handle = objc_getClass ("NSLayoutManager");
	__xamarin_class_map [324].handle = objc_getClass ("Microsoft_MacCatalyst__UIKit_UIAppearance");
	__xamarin_class_map [325].handle = objc_getClass ("UIBezierPath");
	__xamarin_class_map [326].handle = objc_getClass ("UICollectionViewLayoutAttributes");
	__xamarin_class_map [327].handle = objc_getClass ("UIKit_UIControlEventProxy");
	__xamarin_class_map [328].handle = objc_getClass ("UIEvent");
	__xamarin_class_map [329].handle = objc_getClass ("UIFont");
	__xamarin_class_map [330].handle = objc_getClass ("UIFontDescriptor");
	__xamarin_class_map [331].handle = objc_getClass ("UILongPressGestureRecognizer");
	__xamarin_class_map [332].handle = objc_getClass ("UIPanGestureRecognizer");
	__xamarin_class_map [333].handle = objc_getClass ("UIPinchGestureRecognizer");
	__xamarin_class_map [334].handle = objc_getClass ("UISwipeGestureRecognizer");
	__xamarin_class_map [335].handle = objc_getClass ("UIHoverGestureRecognizer");
	__xamarin_class_map [336].handle = objc_getClass ("UIMenuElement");
	__xamarin_class_map [337].handle = objc_getClass ("UIMenu");
	__xamarin_class_map [338].handle = objc_getClass ("UIPresentationController");
	__xamarin_class_map [339].handle = objc_getClass ("UIScene");
	__xamarin_class_map [340].handle = objc_getClass ("UIWindowScene");
	__xamarin_class_map [341].handle = objc_getClass ("UITraitCollection");
	__xamarin_class_map [342].handle = objc_getClass ("UIVisualEffect");
	__xamarin_class_map [343].handle = objc_getClass ("NSAdaptiveImageGlyph");
	__xamarin_class_map [344].handle = objc_getClass ("NSCollectionLayoutItem");
	__xamarin_class_map [345].handle = objc_getClass ("NSCollectionLayoutSupplementaryItem");
	__xamarin_class_map [346].handle = objc_getClass ("NSCollectionLayoutBoundarySupplementaryItem");
	__xamarin_class_map [347].handle = objc_getClass ("NSCollectionLayoutDimension");
	__xamarin_class_map [348].handle = objc_getClass ("NSCollectionLayoutGroup");
	__xamarin_class_map [349].handle = objc_getClass ("NSCollectionLayoutSection");
	__xamarin_class_map [350].handle = objc_getClass ("NSCollectionLayoutSize");
	__xamarin_class_map [351].handle = objc_getClass ("NSCollectionLayoutSpacing");
	__xamarin_class_map [352].handle = objc_getClass ("NSLayoutAnchor");
	__xamarin_class_map [353].handle = objc_getClass ("NSLayoutDimension");
	__xamarin_class_map [354].handle = objc_getClass ("NSLayoutXAxisAnchor");
	__xamarin_class_map [355].handle = objc_getClass ("NSLayoutYAxisAnchor");
	__xamarin_class_map [356].handle = objc_getClass ("NSParagraphStyle");
	__xamarin_class_map [357].handle = objc_getClass ("NSMutableParagraphStyle");
	__xamarin_class_map [358].handle = objc_getClass ("NSShadow");
	__xamarin_class_map [359].handle = objc_getClass ("NSTextAttachment");
	__xamarin_class_map [360].handle = objc_getClass ("NSTextContainer");
	__xamarin_class_map [361].handle = objc_getClass ("UIAction");
	__xamarin_class_map [362].handle = objc_getClass ("UIActivityViewController");
	__xamarin_class_map [363].handle = objc_getClass ("UIAlertAction");
	__xamarin_class_map [364].handle = objc_getClass ("UIApplicationShortcutIcon");
	__xamarin_class_map [365].handle = objc_getClass ("UIApplicationShortcutItem");
	__xamarin_class_map [366].handle = objc_getClass ("UIBarAppearance");
	__xamarin_class_map [367].handle = objc_getClass ("UIBarButtonItemGroup");
	__xamarin_class_map [368].handle = objc_getClass ("UIBlurEffect");
	__xamarin_class_map [369].handle = objc_getClass ("UIButtonConfiguration");
	__xamarin_class_map [370].handle = objc_getClass ("UICollectionViewCompositionalLayoutConfiguration");
	__xamarin_class_map [371].handle = objc_getClass ("UIDropProposal");
	__xamarin_class_map [372].handle = objc_getClass ("UICollectionViewLayoutInvalidationContext");
	__xamarin_class_map [373].handle = objc_getClass ("UICollectionViewFlowLayoutInvalidationContext");
	__xamarin_class_map [374].handle = objc_getClass ("UIFocusUpdateContext");
	__xamarin_class_map [375].handle = objc_getClass ("UICollectionViewFocusUpdateContext");
	__xamarin_class_map [376].handle = objc_getClass ("UICollectionViewTransitionLayout");
	__xamarin_class_map [377].handle = objc_getClass ("UICollectionViewUpdateItem");
	__xamarin_class_map [378].handle = objc_getClass ("UICommand");
	__xamarin_class_map [379].handle = objc_getClass ("UIContextMenuConfiguration");
	__xamarin_class_map [380].handle = objc_getClass ("UICubicTimingParameters");
	__xamarin_class_map [381].handle = objc_getClass ("UIDragInteraction");
	__xamarin_class_map [382].handle = objc_getClass ("UIDragItem");
	__xamarin_class_map [383].handle = objc_getClass ("UIDragPreview");
	__xamarin_class_map [384].handle = objc_getClass ("UIDropInteraction");
	__xamarin_class_map [385].handle = objc_getClass ("UIFontMetrics");
	__xamarin_class_map [386].handle = objc_getClass ("UIGraphicsRenderer");
	__xamarin_class_map [387].handle = objc_getClass ("UIGraphicsImageRenderer");
	__xamarin_class_map [388].handle = objc_getClass ("UIGraphicsRendererContext");
	__xamarin_class_map [389].handle = objc_getClass ("UIGraphicsImageRendererContext");
	__xamarin_class_map [390].handle = objc_getClass ("UIKeyCommand");
	__xamarin_class_map [391].handle = objc_getClass ("UIListContentConfiguration");
	__xamarin_class_map [392].handle = objc_getClass ("UIListContentTextProperties");
	__xamarin_class_map [393].handle = objc_getClass ("UILocalNotification");
	__xamarin_class_map [394].handle = objc_getClass ("UIMenuSystem");
	__xamarin_class_map [395].handle = objc_getClass ("UINavigationBarAppearance");
	__xamarin_class_map [396].handle = objc_getClass ("UINavigationItem");
	__xamarin_class_map [397].handle = objc_getClass ("UIOpenURLContext");
	__xamarin_class_map [398].handle = objc_getClass ("UIPress");
	__xamarin_class_map [399].handle = objc_getClass ("UISceneActivationRequestOptions");
	__xamarin_class_map [400].handle = objc_getClass ("UISceneConfiguration");
	__xamarin_class_map [401].handle = objc_getClass ("UISceneConnectionOptions");
	__xamarin_class_map [402].handle = objc_getClass ("UISceneDestructionRequestOptions");
	__xamarin_class_map [403].handle = objc_getClass ("UISceneSession");
	__xamarin_class_map [404].handle = objc_getClass ("UISceneSessionActivationRequest");
	__xamarin_class_map [405].handle = objc_getClass ("UISceneSizeRestrictions");
	__xamarin_class_map [406].handle = objc_getClass ("UISceneWindowingBehaviors");
	__xamarin_class_map [407].handle = objc_getClass ("Microsoft_MacCatalyst__UIKit_UISearchResultsUpdating");
	__xamarin_class_map [408].handle = objc_getClass ("UITab");
	__xamarin_class_map [409].handle = objc_getClass ("UISpringTimingParameters");
	__xamarin_class_map [410].handle = objc_getClass ("UIStatusBarManager");
	__xamarin_class_map [411].handle = objc_getClass ("UITabBarAppearance");
	__xamarin_class_map [412].handle = objc_getClass ("UITabBarControllerSidebar");
	__xamarin_class_map [413].handle = objc_getClass ("UITabBarItemAppearance");
	__xamarin_class_map [414].handle = objc_getClass ("UITabBarItemStateAppearance");
	__xamarin_class_map [415].handle = objc_getClass ("UITabGroup");
	__xamarin_class_map [416].handle = objc_getClass ("UITargetedPreview");
	__xamarin_class_map [417].handle = objc_getClass ("UITargetedDragPreview");
	__xamarin_class_map [418].handle = objc_getClass ("UITextInputAssistantItem");
	__xamarin_class_map [419].handle = objc_getClass ("UITextInputPasswordRules");
	__xamarin_class_map [420].handle = objc_getClass ("UITextItem");
	__xamarin_class_map [421].handle = objc_getClass ("UITextItemMenuConfiguration");
	__xamarin_class_map [422].handle = objc_getClass ("UITextPlaceholder");
	__xamarin_class_map [423].handle = objc_getClass ("UITextPosition");
	__xamarin_class_map [424].handle = objc_getClass ("UITextRange");
	__xamarin_class_map [425].handle = objc_getClass ("UITextSelectionRect");
	__xamarin_class_map [426].handle = objc_getClass ("UIToolTipInteraction");
	__xamarin_class_map [427].handle = objc_getClass ("UITouch");
	__xamarin_class_map [428].handle = objc_getClass ("UIUserNotificationSettings");
	__xamarin_class_map [429].handle = objc_getClass ("UIViewPropertyAnimator");
	__xamarin_class_map [430].handle = objc_getClass ("__monomac_internal_ActionDispatcher");
	__xamarin_class_map [431].handle = objc_getClass ("NSURLSession");
	__xamarin_class_map [432].handle = objc_getClass ("UIKit_UIView_UIViewAppearance");
	__xamarin_class_map [433].handle = objc_getClass ("UIKit_UIScrollView_UIScrollViewAppearance");
	__xamarin_class_map [434].handle = objc_getClass ("UIKit_UIControl_UIControlAppearance");
	__xamarin_class_map [435].handle = objc_getClass ("UIKit_UIButton_UIButtonAppearance");
	__xamarin_class_map [436].handle = objc_getClass ("MPVolumeView");
	__xamarin_class_map [437].handle = objc_getClass ("UIKit_UIBarItem_UIBarItemAppearance");
	__xamarin_class_map [438].handle = objc_getClass ("WKDownload");
	__xamarin_class_map [439].handle = objc_getClass ("WKHTTPCookieStore");
	__xamarin_class_map [440].handle = objc_getClass ("WKWebsiteDataStore");
	__xamarin_class_map [441].handle = objc_getClass ("NSIndexPath");
	__xamarin_class_map [442].handle = objc_getClass ("NSBundle");
	__xamarin_class_map [443].handle = objc_getClass ("NSCalendar");
	__xamarin_class_map [444].handle = objc_getClass ("NSDate");
	__xamarin_class_map [445].handle = objc_getClass ("NSDictionary");
	__xamarin_class_map [446].handle = objc_getClass ("NSItemProvider");
	__xamarin_class_map [447].handle = objc_getClass ("NSLocale");
	__xamarin_class_map [448].handle = objc_getClass ("NSMutableDictionary");
	__xamarin_class_map [449].handle = objc_getClass ("__NSObject_Disposer");
	__xamarin_class_map [450].handle = objc_getClass ("__XamarinObjectObserver");
	__xamarin_class_map [451].handle = objc_getClass ("NSProgress");
	__xamarin_class_map [452].handle = objc_getClass ("NSThread");
	__xamarin_class_map [453].handle = objc_getClass ("NSTimeZone");
	__xamarin_class_map [454].handle = objc_getClass ("NSUndoManager");
	__xamarin_class_map [455].handle = objc_getClass ("NSURL");
	__xamarin_class_map [456].handle = objc_getClass ("NSURLSessionConfiguration");
	__xamarin_class_map [457].handle = objc_getClass ("NSUserDefaults");
	__xamarin_class_map [458].handle = objc_getClass ("NSCache");
	__xamarin_class_map [459].handle = objc_getClass ("NSHTTPCookieStorage");
	__xamarin_class_map [460].handle = objc_getClass ("NSUserActivity");
	__xamarin_class_map [461].handle = objc_getClass ("CLLocationManager");
	__xamarin_class_map [462].handle = objc_getClass ("System_Net_Http_NSUrlSessionHandler_WrappedNSInputStream");
	__xamarin_class_map [463].handle = objc_getClass ("ASAuthorizationAppleIDCredential");
	__xamarin_class_map [464].handle = objc_getClass ("UIApplication");
	__xamarin_class_map [465].handle = objc_getClass ("UIKit_UIBarButtonItem_Callback");
	__xamarin_class_map [466].handle = objc_getClass ("UIColor");
	__xamarin_class_map [467].handle = objc_getClass ("UIDevice");
	__xamarin_class_map [468].handle = objc_getClass ("__UIGestureRecognizerGenericCB");
	__xamarin_class_map [469].handle = objc_getClass ("__UIGestureRecognizerParameterlessToken");
	__xamarin_class_map [470].handle = objc_getClass ("__UIGestureRecognizerParametrizedToken");
	__xamarin_class_map [471].handle = objc_getClass ("UIKit_UIGestureRecognizer__UIGestureRecognizerDelegate");
	__xamarin_class_map [472].handle = objc_getClass ("UIImage");
	__xamarin_class_map [473].handle = objc_getClass ("UIImagePickerController");
	__xamarin_class_map [474].handle = objc_getClass ("UIKit_UINavigationBar_UINavigationBarAppearance");
	__xamarin_class_map [475].handle = objc_getClass ("UIPickerView");
	__xamarin_class_map [476].handle = objc_getClass ("UIKit_UIPopoverPresentationController__UIPopoverPresentationControllerDelegate");
	__xamarin_class_map [477].handle = objc_getClass ("UIPopoverPresentationController");
	__xamarin_class_map [478].handle = objc_getClass ("UIScreen");
	__xamarin_class_map [479].handle = objc_getClass ("UIKit_UISearchBar_UISearchBarAppearance");
	__xamarin_class_map [480].handle = objc_getClass ("UIKit_UISearchBar__UISearchBarDelegate");
	__xamarin_class_map [481].handle = objc_getClass ("UIKit_UISearchController___Xamarin_UISearchResultsUpdating");
	__xamarin_class_map [482].handle = objc_getClass ("UISearchController");
	__xamarin_class_map [483].handle = objc_getClass ("UIKit_UITableView_UITableViewAppearance");
	__xamarin_class_map [484].handle = objc_getClass ("UITableView");
	__xamarin_class_map [485].handle = objc_getClass ("UIKit_UITextField__UITextFieldDelegate");
	__xamarin_class_map [486].handle = objc_getClass ("UIKit_UIScrollView__UIScrollViewDelegate");
	__xamarin_class_map [487].handle = objc_getClass ("UIKit_UITextView__UITextViewDelegate");
	__xamarin_class_map [488].handle = objc_getClass ("UIWindow");
	__xamarin_class_map [489].handle = objc_getClass ("NSTextStorage");
	__xamarin_class_map [490].handle = objc_getClass ("UIDatePicker");
	__xamarin_class_map [491].handle = objc_getClass ("UIDocumentPickerViewController");
	__xamarin_class_map [492].handle = objc_getClass ("UIFocusAnimationCoordinator");
	__xamarin_class_map [493].handle = objc_getClass ("UIProgressView");
	__xamarin_class_map [494].handle = objc_getClass ("UISearchTextField");
	__xamarin_class_map [495].handle = objc_getClass ("UISlider");
	__xamarin_class_map [496].handle = objc_getClass ("UIStackView");
	__xamarin_class_map [497].handle = objc_getClass ("UIStepper");
	__xamarin_class_map [498].handle = objc_getClass ("UIKit_UISwitch_UISwitchAppearance");
	__xamarin_class_map [499].handle = objc_getClass ("UISwitch");
	__xamarin_class_map [500].handle = objc_getClass ("UIKit_UITabBar_UITabBarAppearance");
	__xamarin_class_map [501].handle = objc_getClass ("UITabBar");
	__xamarin_class_map [502].handle = objc_getClass ("UIKit_UITabBarController__UITabBarControllerDelegate");
	__xamarin_class_map [503].handle = objc_getClass ("UIKit_UITabBarItem_UITabBarItemAppearance");
	__xamarin_class_map [504].handle = objc_getClass ("UITabBarItem");
	__xamarin_class_map [505].handle = objc_getClass ("UIVisualEffectView");
	__xamarin_class_map [506].handle = objc_getClass ("System_Net_Http_NSUrlSessionHandler_NSUrlSessionHandlerDelegate");
	xamarin_add_registration_map (&__xamarin_registration_map, false);
}


} /* extern "C" */
